@page "/NewCate/NewCateDetail"
@using Newtonsoft.Json
@using Robot.Data.DA.DPMNews
@using Robot.Data.DPMNEW.TT
@using Robot.Data.DA.Document
@using System.IO
@using static Robot.Data.ML.I_Result

@inject DPMNewsService dpmnewsService

<style>
    .file-input-zone {
        display: block;
        align-items: center;
        justify-content: center;
        background-color: transparent;
        color: black;
        cursor: pointer;
        position: relative;
        width: 32px;
        height: 32px;
        background-image: url('/assets/img/upload_logo.png');
    }
</style>

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="col-12 text-center" style="background-color: transparent; height: 100%; vertical-align: middle;">
            <br /><br />
            <div class="row pt-2">
                <div class="col-10 mx-auto">
                    <label style="color:orange; font-size:x-large;">... รอโหลดสักครู่ ...</label><br /><br /><br /><br />
                    <CircleFade Color="orange" Size="100px" Center="true" />
                </div>
            </div>
        </div>
    </LoadingTemplate>
    <ContentTemplate>

        <div class="row">
            <div class="col-md-12 col-sm-12 col-12 mx-auto">
                <div class="row">
                    <div class="col-6">
                        @*    <Breadcrumb Mode="BreadcrumbMode.Auto">
                        <BreadcrumbItem>
                        <BreadcrumbLink To="Menu/MenuMaster/MASTER">@menuGroupCaption</BreadcrumbLink>
                        </BreadcrumbItem>
                        <BreadcrumbItem Active>
                        <BreadcrumbLink To="NewCate/NewCateDetail">@menuCaption</BreadcrumbLink>
                        </BreadcrumbItem>
                        </Breadcrumb>*@
                    </div>
                    @if (isShowNew) {
                        <div class="col-6 text-end">
                            <Button Color="Color.Success" @onclick="@NewDoc">
                                <i class="far fa-file fa-lg"></i>&nbsp;
                                สร้างหมวด
                            </Button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row pb-2">
            <div class="col-md-12 col-sm-12 col-12 mx-auto">

                <div class="row pt-2">
                    <div class="col-md-5 col-sm-12 col-12">
                        @*                        <div class="row">
                        <div class="col-md-12 text-end">

                        </div>
                        </div>*@

                        <div class="row pt-2">
                            <div class="col-12">
                                <TelerikGrid @ref="@grd"
                                             Data=@ListNewsCateHead
                                             Width="100%"
                                             Resizable="true"
                                             Pageable="true"
                                             PageSize=100
                                             RowDraggable="true"
                                             OnRowClick="@OnRowClickHandler"
                                             
                                             OnRowDrop="@((GridRowDropEventArgs<DPM_NewsCateKeywordHead> args) => ReOrder(args))">
                                    <GridColumns>
                                        <GridColumn Field=@nameof(DPM_NewsCateKeywordHead.Name) Width="200px" Title="หมวด" />
                                        <GridColumn Field=@nameof(DPM_NewsCateKeywordHead.Sort) Width="140px" Title="เรียง" DisplayFormat="{0:N0}" />

                                        <GridColumn Field="@nameof(DPM_NewsCateKeywordHead.IsActive)" Width="135px" Title="ใช้งาน" Editable="false" TextAlign="@ColumnTextAlign.Center">
                                            <Template>
                                                @{
                                                    var data = context as DPM_NewsCateKeywordHead;
                                                    @if (Convert.ToBoolean(data.IsActive)) {
                                                        <span class="k-badge k-badge-md k-badge-solid k-badge-rounded k-badge-success">ใช้งาน</span>

                                                    } else {
                                                        <span class="k-badge k-badge-md k-badge-solid k-badge-rounded k-badge-error">ไม่ใช้งาน</span>
                                                    }
                                                }
                                            </Template>
                                        </GridColumn>

                                    </GridColumns>
                                </TelerikGrid>

                               
                            </div>
                        </div>

                    </div>

                    <div class="col-md-7 col-sm-12 col-12">
                        <div class="card mt-2">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="row pt-2">
                                            <label>รหัสหมวด</label>
                                            <div class="col-12">
                                                <input type="text" class="form-control" @bind-value="dpmnewsService.DocSet.Head.CateID" readonly="@readonly_cateid" />
                                            </div>
                                        </div>

                                        <div class="row pt-2">
                                            <label>ชื่อหมวด </label>
                                            <div class="col-12">
                                                <TelerikTextBox   @bind-Value="@dpmnewsService.DocSet.Head.Name" Class="w-100"   />
                                                
                                            </div>
                                        </div>

                                        <div class="row pt-2">
                                            <label>ลำดับ </label>
                                            <div class="col-12">
                                                <TelerikTextBox   @bind-Value="@Sort" Class="w-100"  />
                                               
                                            </div>
                                        </div>

                                   

                                        @if (dpmnewsService.DocSet.Head.CateID != "") {
                                            <Accordion Class="pt-3">
                                                <Collapse Visible="@collapse1Visible">
                                                    <CollapseHeader>
                                                        <Heading Size="HeadingSize.Is5">
                                                            <Button Clicked="@(()=>collapse1Visible = !collapse1Visible)">แสดงรูปภาพ</Button>
                                                        </Heading>
                                                    </CollapseHeader>
                                                    <CollapseBody>
                                                        <div class="row">
                                                            <div class="col-12">
                                                                <SpinLoader IsLoading="isUploading">
                                                                    <LoadingTemplate>
                                                                        <div class="row">
                                                                            <div class="col-12 text-center" style="background-color: transparent; height: 100%; vertical-align: middle;">
                                                                                <br /><br />
                                                                                <div class="row pt-2">
                                                                                    <div class="col-10 mx-auto">
                                                                                        <label style="color:blue; font-size:x-small;">... Loading ...</label><br /><br /><br /><br />
                                                                                        <CircleFade Color="blue" Size="100px" Center="true" />

                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </LoadingTemplate>
                                                                    <ContentTemplate>

                                                                        <div class="row pb-1">
                                                                            <div class="col-12">
                                                                                <div class="card">
                                                                                    <div class="card-body">


                                                                                        <div class="row">
                                                                                            <div class="col-12">
                                                                                                <div class="file-input-zone">
                                                                                                    <InputFile OnChange="OnInputFileChanged"
                                                                                                           style="opacity:0;" accept="image/png, image/jpeg, image/gif,application/pdf">
                                                                                                    </InputFile>
                                                                                                </div>

                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="row pt-1">
                                                                                            <div class="col-6 mx-auto mx-0">
                                                                                                <a @onclick="@DownLoadImage">
                                                                                                    <img src=@ImageUrl style="width:100%; height:100%;" onerror="this.onerror=null; this.src='/assets/img/dpmlogo_circle.png'">
                                                                                                </a>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="row">
                                                                                            <div class="col-12 text-end">
                                                                                                <a class="btn btn-default" @onclick="@OnDeleteProfile"> <i class="far fa-trash-alt"></i></a>

                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                        @* End Profile*@
                                                                    </ContentTemplate>
                                                                </SpinLoader>
                                                            </div>
                                                        </div>
                                                    </CollapseBody>
                                                </Collapse>
                                            </Accordion>
                                        }

                                    </div>
                                </div>
                                <hr />
                                <div class="row pt-4 pb-2">
                                    <div class="col-md-6 col-sm-12 col-12">
                                         <TelerikCheckBox Id="chkIsNewUser" Value="@dpmnewsService.DocSet.Head.IsActive"></TelerikCheckBox>
                                                    
                                                    <span style="font-size:large;">ใช้งาน</span>
                                        
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-12 text-end">
                                        <a @onclick="@OnSave" class="btn btn-success w-50 text-white" style="height:40px;">
                                            บันทึก
                                        </a>
                                    </div>
                                </div>

                                <div class="row pt-4">
                                    <div class="col-md-12">
                                        <div class="row">
                                            <div class="col-md-12">
                                                <h4>
                                                    <span>เพิ่ม KeyWord</span>
                                                </h4>
                                            </div>
                                        </div>

                                        <div class="row pt-1">
                                            <div class="col-md-8">
                                                <label>keyword</label>
                                           
                                                <TelerikTextBox   @bind-Value="@KeyWord" Class="w-100"  />
                                            </div>
                                            @*        <div class="col-md-5 col-sm-12 col-12">
                                            <label>Remark</label>
                                            <DxTextBox @bind-Text="@Remark"
                                            BindValueMode="BindValueMode.OnInput" InputCssClass="w-100"
                                            SizeMode="SizeMode.Medium">
                                            </DxTextBox>
                                            </div>*@
                                            <div class="col-md-2 text-end">
                                                <label>&nbsp;</label>
                                                <a @onclick="@btnAdd" class="btn btn-success text-white w-100">
                                                    <i class="fas fa-plus-circle"></i>&nbsp;
                                                    เพิ่ม
                                                </a>
                                            </div>
                                        </div>

                                        <div class="row pt-3">
                                            <div class="col-12">
                                                <div style="overflow-x: auto; width: 100%">
                                                       <TelerikGrid Data=@dpmnewsService.DocSet.Line
                                                                     Pageable="true"
                                                                     Groupable="false"
                                                                     Sortable="true"
                                                                     Resizable="true"
                                                                     Reorderable="true"
                                                                     PageSize="20"
                                                                     @ref="@dxDataGrid"
                                                                     Navigable="true">
                                                           
                                                            <GridColumns>
                                                          
                                                                <GridColumn Field=@nameof(DPM_NewsCateKeywordLine.KeyWord) Title="Keyword" Width="130px" /> 
                                                                <GridColumn Title="ลบ" Editable="false" Width="75px">
                                                                    <Template>
                                                                        @{
                                                                            var data = context as DPM_NewsCateKeywordLine;
                                                                            <button class="btn btn-sm" @onclick="@(() => GoDeleteLine(data))"><i class="fa-solid fa-trash" style="font-size:20px"></i>  </button>
                                                                        }
                                                                    </Template>
                                                                </GridColumn>
                                                            </GridColumns>
                                                        </TelerikGrid>


 
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>




                </div>

            </div>
        </div>

    </ContentTemplate>
</SpinLoader>

@code {
    bool isLoading = true;
    bool isUploading = false;
    bool isShowNew = true;
    public bool readonly_cateid { get; set; } = false;
    public string SearchText { get; set; } = "";
    public string Sort { get; set; }
    public string ImageUrl { get; set; } = "";

    public string KeyWord { get; set; } = "";
    public string Remark { get; set; } = "";
    string menuCaption = "";
    string menuGroupCaption = "";
    bool ShowFilterRow = false;
    bool collapse1Visible = true;
         public TelerikGrid<DPM_NewsCateKeywordLine> dxDataGrid { get; set; }
    IEnumerable<DPM_NewsCateKeywordHead> ListNewsCateHead;
 
    List<FilesInfo> upload_file = new List<FilesInfo>();

    public TelerikGrid<DPM_NewsCateKeywordHead> grd { get; set; }

    protected override async Task OnInitializedAsync() {

        if (dpmnewsService.DocSet == null) {
            dpmnewsService.DocSet = DPMNewsService.NewTransaction("");
        }
        pageHistory.AddPageToHistory(nav.Uri);
        await Task.Run(() => login.CheckLogin());
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);



    }

    private void ReOrder(GridRowDropEventArgs<DPM_NewsCateKeywordHead> args) {
        var new_id = args.Item.CateID;
        var new_sort = args.Item.Sort;
        var old_id = args.DestinationItem.CateID;
        var old_sort = args.DestinationItem.Sort;



        if (old_sort > new_sort) {
            var reNumber_item = ListNewsCateHead.Where(o => o.Sort <= old_sort && o.Sort > new_sort && o.CateID != new_id).ToList();
            foreach (var i in reNumber_item) {
                i.Sort = i.Sort - 1;
            }
            var get_new = ListNewsCateHead.Where(o => o.CateID == new_id).FirstOrDefault();
            get_new.Sort = old_sort;
            //var get_old = ListNewsCateHead.Where(o => o.CateID == old.CateID).FirstOrDefault();
            //get_old.Sort = get_old.Sort - 1;

        } else {
            var reNumber_item = ListNewsCateHead.Where(o => o.Sort >= old_sort && o.Sort < new_sort && o.CateID != new_id).ToList();
            foreach (var i in reNumber_item) {
                i.Sort = i.Sort + 1;
            }

            var get_new = ListNewsCateHead.Where(o => o.CateID == new_id).FirstOrDefault();
            get_new.Sort = old_sort;


        }





        ListNewsCateHead = ListNewsCateHead.OrderBy(o => o.Sort).ToList();
        InvokeAsync(StateHasChanged);

        try {
            isLoading = true;
            DPMNewsService.ReOrder(ListNewsCateHead.ToList());
        } catch (Exception ex) {
             
        }finally{
            isLoading = false;
        }

    

        //foreach (var item in args.Items) {
        //    //InStockProducts.Remove(item);

        //}

        //  InsertItem(args, true);


    }



    async Task CheckPermission() {
        var menu = LogInService.GetMenuInfo(login.LoginInfo, "176");
        menuCaption = menu.Name;
        menuGroupCaption = LogInService.GetMenuGroup(login.LoginInfo, menu.GroupID).Name;
        if (!login.CanOpen(login.LoginInfo, "176")) {//176 ตั้งค่าหมวดข่าว
            nav.NavigateTo("NoPermissionPage");
        }
        if (!login.CanCreate(login.LoginInfo, "176")) {
            isShowNew = false;
        }
    }



    async void LoadData() {
        LoadDropDownList();
        ListNewsCateHead = DPMNewsService.ListDoc();
        BindData();
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    void LoadDropDownList() {

    }

    void BindData() {
        var h = dpmnewsService.DocSet.Head;

        if (!string.IsNullOrEmpty(h.CateID)) {
            readonly_cateid = true;
        } else {
            readonly_cateid = false;
        }
        Sort = h.Sort.ToString("n0");
    }

    private void SetPrimaryData() {
        var h = dpmnewsService.DocSet.Head;
        int xSort = 0;
        int.TryParse(Sort, out xSort);
        h.Sort = xSort;
    }

    bool ValidData() {
        var h = dpmnewsService.DocSet.Head;

        bool isvalid = true;
        string Errmsg = "";

        if (h.CateID == "") {
            Errmsg = "ระบุ รหัสหมวด";
            isvalid = false;
        }
        if (h.Name == "") {
            Errmsg = "ระบุ ชื่อหมวด";
            isvalid = false;
        }

        if (!isvalid) {
            Swal.FireAsync("", Errmsg, "error");
        }
        return isvalid;
    }

    void OnSave() {
        if (!ValidData()) {
            return;
        }
        Save();
    }

    async private void Save() {
        SetPrimaryData();
        var h = dpmnewsService.DocSet.Head;

        var rs = DPMNewsService.Save(h, login.LoginInfo);
        if (rs.Result != "ok") {
            await Swal.FireAsync("", rs.Message1, "error");
            return;
        } else {
            dpmnewsService.DocSet = dpmnewsService.GetDocSet(dpmnewsService.DocSet.Head.CateID, "");
            LoadData();
            await Swal.FireAsync("", "บันทึกสำเร็จ", "success");
            await InvokeAsync(StateHasChanged);
        }
    }

    void NewDoc() {
        dpmnewsService.DocSet = DPMNewsService.NewTransaction(login.LoginInfo.CurrentUser);
        LoadData();
    }

    //void GoToCateHead(DPM_NewsCateKeywordHead data) {
    //    dpmnewsService.DocSet = dpmnewsService.GetDocSet(data.CateID, "");
    //    ResetControl();
    //    LoadData();
    //    loadProfile();
    //    InvokeAsync(StateHasChanged);
    //}
    //protected void OnSelect(IEnumerable<DPM_NewsCateKeywordHead> data) {

    //    dpmnewsService.DocSet = dpmnewsService.GetDocSet(data.FirstOrDefault().CateID, "");
    //    ResetControl();
    //    LoadData();
    //    loadProfile();
    //    InvokeAsync(StateHasChanged);

    //}
    async Task OnRowClickHandler(GridRowClickEventArgs args)
    {
        var data = args.Item as DPM_NewsCateKeywordHead;
        dpmnewsService.DocSet = dpmnewsService.GetDocSet( data.CateID, "");
        ResetControl();
        LoadData();
        loadProfile();
        InvokeAsync(StateHasChanged);

        //var model = args.Item as SampleData;

        //ProjectData = await GetProjectData(model.Id);

        //if (args.EventArgs is KeyboardEventArgs keyboardEventArgs)
        //{
        //    Console.WriteLine($"The user clicked {keyboardEventArgs.Key} on row {model.Name}");
        //}
        //else if (args.EventArgs is MouseEventArgs mouseEventArgs)
        //{
        //    Console.WriteLine($"The user clicked {mouseEventArgs.ClientX} {mouseEventArgs.ClientY} on row {model.Name}");
        //}
    }
  

    #region ItemPrice
    bool ValidLineData() {
        var h = dpmnewsService.DocSet.Head;

        bool isvalid = true;
        string Errmsg = "";


        if (string.IsNullOrEmpty(KeyWord)) {
            Errmsg = "ระบุ KeyWord";
            isvalid = false;
        }

        if (!isvalid) {
            Swal.FireAsync("", Errmsg, "error");
        }
        return isvalid;
    }

    void btnAdd() {
        if (!ValidLineData()) {
            return;
        }

        var h = dpmnewsService.DocSet.Head;
        DPM_NewsCateKeywordLine cateline = DPMNewsService.NewLine(login.LoginInfo.CurrentUser);

        cateline.CateID = h.CateID;
        cateline.KeyWord = KeyWord;
        cateline.Remark = Remark;

        var rs = DPMNewsService.AddNewsCateKeywordLine(cateline);
        if (rs.Result != "ok") {
            Swal.FireAsync("Error", rs.Message1, "error");
            return;
        } else {
            dpmnewsService.DocSet = dpmnewsService.GetDocSet(dpmnewsService.DocSet.Head.CateID, "");
            ResetControl();
            LoadData();
           // Swal.FireAsync("", "เพิ่มสำเร็จ", "success");
            InvokeAsync(StateHasChanged);
        }
    }

    private void ResetControl() {
        KeyWord = "";
        Remark = "";
    }

    void GoDeleteLine(DPM_NewsCateKeywordLine data) {
        var rs = DPMNewsService.DeleteNewsCateKeywordLine(data.ID);
        if (rs.Result != "ok") {
            Swal.FireAsync("Error", rs.Message1, "error");
            return;
        } else {
            dpmnewsService.DocSet = dpmnewsService.GetDocSet(dpmnewsService.DocSet.Head.CateID, "");
            LoadData();
               dxDataGrid?.Rebind();
            //Swal.FireAsync("", "ลบรายการ สำเร็จ", "success");
            InvokeAsync(StateHasChanged);
        }
    }

    #endregion

    #region profile management

    async Task loadProfile() {
        string rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
        isUploading = true;

        var h = dpmnewsService.DocSet.Head;
        ImageUrl = FileGo.GetFileUrl(rcom, "", FileGo.Type_NewsCate, h.CateID);
        if (string.IsNullOrEmpty(ImageUrl)) {
            ImageUrl = "/assets/img/dpmlogo_circle.png";
        }
        isUploading = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task OnDeleteProfile() {
        try {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions {
                    Title = "Warning",
                    Text = $"ต้องการลบรูปใช่หรือไม่",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });


            if (string.IsNullOrEmpty(result.Value)) {
                return;
            }

            string rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
            //string com = login.LoginInfo.CurrentCompany.CompanyID;
            var h = dpmnewsService.DocSet.Head;
            string user = login.LoginInfo.CurrentUser;


            isUploading = true;
            var rr = await Task.Run(() => fileGo.DeleteFile(rcom, "", FileGo.Type_NewsCate, h.CateID, user));
            if (rr.Result == "ok") {
                await loadProfile();
            } else {
                await Swal.FireAsync("Error", rr.Message1, "error");
            }

        } catch {
        } finally {
            isUploading = false;
        }
    }

    async Task DownLoadImage() {
        try {
            string rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
            var h = dpmnewsService.DocSet.Head;
            string file_url = FileGo.GetFileUrl(rcom, "", FileGo.Type_NewsCate, h.CateID);
            if (!string.IsNullOrEmpty(file_url)) {
                nav.NavigateTo(file_url, true);
            }
        } catch {
        }
    }


    async Task OnInputFileChanged(InputFileChangeEventArgs e) {
        string rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
        isUploading = true;
        var files = e.GetMultipleFiles(maximumFileCount: 1); // get the files selected by the users
                                                             //var rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
                                                             //var com = login.LoginInfo.CurrentCompany.CompanyID;
                                                             //var docid = companyService.DocSet.ComInfo.CompanyID;
        var h = dpmnewsService.DocSet.Head;
        if (string.IsNullOrEmpty(h.CateID)) {
            await Swal.FireAsync("Error", "Save before upload", "error");
            return;
        }

        string user = login.LoginInfo.CurrentUser;
        try {
            foreach (var file in e.GetMultipleFiles(1)) {
                using var stream = file.OpenReadStream(maxAllowedSize: (1024 * 1024 * 15));
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
                //imgUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
                var nfile = FileGo.NewFilesInfo(FileGo.Type_NewsCate, rcom, "", h.CateID);
                nfile.data = Convert.ToBase64String(ms.ToArray());
                // nfile.data = buf;
                nfile.file_type = file.ContentType;
                nfile.fileName = file.Name;
                upload_file.Add(nfile);

            }
            await Upload();
        } catch (Exception ex) {
            await Swal.FireAsync("Error", ex.Message, "error");
        } finally {
            isUploading = false;
        }
    }

    async Task Upload() {
        try {
            var h = dpmnewsService.DocSet.Head;
            string rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
            string user = login.LoginInfo.CurrentUser;
            isUploading = true;
            var login_filego = FileGo.GetFileGoLogin();

            string dataEndpointUri = $"{login_filego.RootUrl}/api/xfiles/XFilesService/UploadFileToDB";
            I_BasicResult update_result = new I_BasicResult();
            var query = await Task.Run(() => clientService.Post<I_BasicResult>(dataEndpointUri, upload_file));
            if (query.StatusCode != "OK") {
                update_result.Result = "fail";
                update_result.Message1 = query.StatusCode;
            } else {
                update_result = (I_BasicResult)query.Result;
                if (update_result.Result == "fail") {
                    upload_file.Clear();
                    await Swal.FireAsync("Error", update_result.Message1, "error");
                } else {
                    //ShowMessage(true, "Upload Success");

                    var xfile_ref = FileGo.Convert2XFilesRef(upload_file, login.LoginInfo.CurrentUser);
                    var rr = FileGo.SaveXFileRef(xfile_ref);
                    var rrr = await Task.Run(() => fileGo.DeleteOldFileAfterSave(rcom, "", FileGo.Type_NewsCate, h.CateID, user));
                    await loadProfile();
                }
            }
        } catch {
        } finally {
            isUploading = false;
        }
    }
    #endregion

}
