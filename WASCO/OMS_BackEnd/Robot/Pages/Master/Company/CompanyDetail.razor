@page "/Master/Company/CompanyDetail"
@using Robot.Data.DA.Document
@using System.IO
@using Robot.Helper;
@using static Robot.Data.ML.I_Result
@inject CompanyService companyService

<style>


    .file-input-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: transparent;
        color: black;
        cursor: crosshair;
        position: relative;
        width: 32px;
        height: 32px;
        background-image: url('/assets/img/upload_logo.png');
    }

        .file-input-zone input[type=file] {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: crosshair;
        }

    .btn-link:hover {
        background-color: #e8f0fe;
    }

    .btn-link {
        background-color: #e8f0fe;
        text-decoration: none;
    }

    flex: 0 0 100%;
    }

    .col-auto > button[type=button] {
        width: 100% !important;
    }

    .k-state-disabled, .k-disabled, .k-widget[disabled], .k-disabled {
        background: #e9ecef !important;
        opacity: 1;
    }
</style>



<div class="row">
    <div class="col-md-6">
        @*     <Breadcrumb Mode="BreadcrumbMode.Auto">
        <BreadcrumbItem>
        <BreadcrumbLink To="Master/Company/CompanyList">@menuGroupCaption</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbItem>
        <BreadcrumbLink To="Master/Company/CompanyDetail">@menuCaption</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbItem Active>
        <BreadcrumbLink To="#">แก้ไข</BreadcrumbLink>
        </BreadcrumbItem>
        </Breadcrumb>*@
        <Button Color="Color.None" @onclick="@Back" Class="text-black">
            <i class="fas fa-reply-all"></i>&nbsp;
            <span>@menuCaption</span>
        </Button>
    </div>
    <div class="col-md-6 text-end">
        <TelerikButton Size="@(ThemeConstants.Button.Size.Medium)"
                       @onclick="@SaveDoc" Class=""
                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Success)">
            <i class="fa-solid fa-circle-check"></i>&nbsp; บันทึก
        </TelerikButton>&nbsp;&nbsp;
        @if (isShowNew) {
            <TelerikButton Size="@(ThemeConstants.Button.Size.Medium)"
                       @onclick="@NewDoc" Class=""
                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Info)">
                <i class="fas fa-plus-circle"></i>&nbsp; เพิ่ม
            </TelerikButton>
        }
    </div>
</div>
@if (companyService.DocSet != null) {
<Accordion Class="pt-3">
    <Collapse Visible="@collapse1Visible">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <Button Clicked="@(()=>collapse1Visible = !collapse1Visible)">ข้อมูลบริษัท/สาขา</Button>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
           
            <div class="row">
                <div Class="col-8">
                    <div class="row pt-2">
                        <div class="col-6">
                            <span>รหัสสาขา</span><span style="font-size: large; color: red">*</span>
                            <TelerikTextBox Placeholder="++NEW++" @bind-Value="@txtcompany_id" Enabled="@ReadEnableComID" />
                        </div>
                        <div class="col-6">
                            <span>เลขผู้เสียภาษี</span><span style="font-size: large; color: red">*</span>
                            <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.TaxID" />
                        </div>
                    </div>

                    <div class="row pt-2">
                        <div class="col-6">
                            <span>ชื่อ 1</span><span style="font-size: large; color: red">*</span>
                            <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.Name1" />
                        </div>
                        <div class="col-6">
                            <span>ชื่อ 2</span>
                            <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.Name2" />
                        </div>
                    </div>

                    <div class="row pt-2">
                        <div class="col-6">
                            <span>ที่อยู่เปิดบิล 1</span>
                            <TelerikTextArea @bind-Value="@companyService.DocSet.ComInfo.BillAddr1"
                                             AutoSize="true"
                                             Class="w-100">
                            </TelerikTextArea>
                        </div>
                        <div class="col-6">
                            <span>ที่อยู่เปิดบิล 2</span>
                            <TelerikTextArea @bind-Value="@companyService.DocSet.ComInfo.BillAddr2"
                                             AutoSize="true"
                                             Class="w-100">
                            </TelerikTextArea>
                        </div>
                    </div>
                    <div class="row pt-2">
                        <div class="col-6">
                            <span>ที่อยู่พิมพ์เอกสาร 1</span>
                            <TelerikTextArea @bind-Value="@companyService.DocSet.ComInfo.PrintHeader1"
                                             AutoSize="true"
                                             Class="w-100">
                            </TelerikTextArea>
                        </div>
                        <div class="col-6">
                            <span>ที่อยู่พิมพ์เอกสาร 2</span>
                            <TelerikTextArea @bind-Value="@companyService.DocSet.ComInfo.PrintHeader2"
                                             AutoSize="true"
                                             Class="w-100">
                            </TelerikTextArea>
                        </div>
                    </div>
                    <div class="row pt-2">
                        <div class="col-6">
                            <span>สาขา</span><span style="font-size: large; color: red">*</span>
                            <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.BrnCode" />
                        </div>
                        <div class="col-6">
                            <span>รหัสย่อ</span><span style="font-size: large; color: red">*</span>
                            <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.ComCode" />
                        </div>
                    </div>

                    <div class="row pt-2">
                        <div class="col-6">
                            <span>ต้นสังกัด</span>
                            <TelerikComboBox @bind-Value="@companyService.DocSet.ComInfo.RCompanyID"
                                             Data="@ComList"
                                             TextField="@nameof(CompanyInfo.Name1)"
                                             ValueField="@nameof(CompanyInfo.CompanyID)"
                                             Filterable="true"
                                             Width="100%">
                            </TelerikComboBox>
                        </div>
                        <div class="col-6">
                            <span>กลุ่ม</span>
                            <TelerikComboBox @bind-Value="@companyService.DocSet.ComInfo.GroupCode"
                                             Data="@ComGroupList"
                                             TextField="@nameof(CompanyInfo.Name1)"
                                             ValueField="@nameof(CompanyInfo.CompanyID)"
                                             Filterable="true"
                                             Width="100%">
                            </TelerikComboBox>
                        </div>
                    </div>

                    <div class="row pt-2">
                        <div class="col-6">
                            <span>สกุลเงิน</span>
                            <TelerikComboBox @bind-Value="@companyService.DocSet.ComInfo.Currency"
                                             Data="@cboCurrency"
                                             TextField="@nameof(CurrencyInfo.Name)"
                                             ValueField="@nameof(CurrencyInfo.CurrencyID)"
                                             Filterable="true"
                                             Width="100%">
                            </TelerikComboBox>
                        </div>
                    </div>
                </div>

                <div Class="col-4">
                    <SpinLoader IsLoading="isUploading">
                        <LoadingTemplate>
                            <div class="row">
                                <div class="col-12 text-center" style="background-color: transparent; height: 100%; vertical-align: middle;">
                                    <br /><br />
                                    <div class="row pt-2">
                                        <div class="col-10 mx-auto">
                                            <label style="color:blue; font-size:x-small;">... Loading ...</label><br /><br /><br /><br />
                                            <CircleFade Color="blue" Size="100px" Center="true" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </LoadingTemplate>
                        <ContentTemplate>
                            @if (companyService.DocSet.ComInfo.CompanyID != "") {
                                <div class="row pb-1">
                                    <div class="col-12">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="row">
                                                    <div class="col-12">
                                                        <div class="file-input-zone">
                                                            <InputFile OnChange="OnInputFileProfileChanged"
                                                                       style="opacity:0;" accept="image/png, image/jpeg">
                                                            </InputFile>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row pt-1">
                                                    <div class="col-10 mx-auto mx-0">
                                                        <a @onclick="@DownLoadImage">
                                                            <img src=@ImageUrl style="width:100%; height:100%;" onerror="this.onerror=null; this.src='/assets/img/pear.png'">
                                                        </a>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-12 text-end">
                                                        <a class="btn btn-default" @onclick="@OnDeleteProfile"> <i class="far fa-trash-alt"></i></a>
                                                    </div>
                                                </div>
                                                <div class="row" hidden>
                                                    <div class="col-12 text-end">
                                                        <a class="btn btn-default" @onclick="@TestApi"> Test</a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            @* End Profile*@
                        </ContentTemplate>
                    </SpinLoader>
                </div>
            </div>
         
        </CollapseBody>
    </Collapse>
</Accordion>

<Accordion Class="pt-3">
    <Collapse Visible="@collapseVisibleAddr">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <Button Clicked="@(()=>collapseVisibleAddr = !collapseVisibleAddr)">ข้อมูลการติดต่อ</Button>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            <div class="row pt-2">
                <div class="col-6">
                    <span>ค้นหาที่อยู่</span>
                    <TelerikComboBox Value="@SelectAddr"
                                     Data="@ListAddr"
                                     ScrollMode="@DropDownScrollMode.Virtual"
                                     ValueField="@(nameof(vw_ThaiPostAddress.FULLADDR))"
                                     TextField="@(nameof(vw_ThaiPostAddress.FULLADDR))"
                                     Width="100%" PageSize="10" ItemHeight="35"
                                     ValueChanged="@( (string city) => ValueChangeAddr(city) )"
                                     Filterable="true"
                                     FilterOperator="@StringFilterOperator.Contains">
                        <ComboBoxSettings>
                            <ComboBoxPopupSettings Width="550px" Height="300px"></ComboBoxPopupSettings>
                        </ComboBoxSettings>
                        <HeaderTemplate>
                            <div class="fw-bold py-2">&nbsp;&nbsp; ที่อยู่</div>
                        </HeaderTemplate>
                        <ItemTemplate>
                            <span>@($"{context.FULLADDR}")</span>
                        </ItemTemplate>
                    </TelerikComboBox>
                </div>
            </div>

            <div class="row pt-2">
                <div class="col-6">
                    <span>เลขที่ (House No.)</span>
                    <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.AddrNo" />
                </div>
                <div class="col-6">
                    <span>หมู่/ถนน (Village No. / Road)</span>
                    <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.AddrTanon" />
                </div>
            </div>

            <div class="row pt-2">
                <div class="col-6">
                    <span>รหัสไปรษณีย์ (Postal Code)</span>
                    <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.AddrPostCode" />
                </div>
                <div class="col-6">
                    <span>จังหวัด (Province)</span>
                    <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.AddrProvince" />
                </div>
            </div>

            <div class="row pt-2">
                <div class="col-6">
                    <span>เขต/อำเภอ (District / Area)</span>
                    <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.AddrAmphoe" />
                </div>
                <div class="col-6">
                    <span>จังหวัด (Province)</span>
                    <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.AddrTumbon" />
                </div>
            </div>

            <div class="row pt-2">
                <div class="col-6">
                    <span>เบอร์โทรศัพท์</span><span style="font-size: large; color: red">*</span>
                    <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.Mobile" />
                </div>
                <div class="col-6">
                    <span>Email</span>
                    <TelerikTextBox @bind-Value="@companyService.DocSet.ComInfo.Email" />
                </div>
            </div>
        </CollapseBody>
    </Collapse>
</Accordion>

    if (companyService.DocSet.ComInfo.CompanyID != "") {
        <div class="row pt-2">
            <div class="col-12">
                <div class="card shadow-sm  bg-white rounded">
                    <div class="card-header">
                        <h5>ลายเซ็นต์</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <div class="input-group mb-3">
                                    <div class="file-input-zone">
                                        <InputFile OnChange="OnInputFileSignatureChanged" style="opacity:0;" accept="image/png, image/jpeg, image/gif">
                                        </InputFile>

                                    </div>
                                    <small>อัพโหลดลายเซ็นต์</small>
                                </div>
                            </div>
                        </div>
                        @foreach (var f in companyService.DocSet.files) {
                            <div class="row pt-1">
                                <div class="col-11">
                                    <a class="btn btn-link" style="background-color : white; text-decoration:underline;" @onclick="@(() => DownLoadImage(f))">
                                        <i class="fas fa-cloud-download-alt"></i>&nbsp; @f.FileName
                                    </a>
                                </div>
                                <div class="col-1 text-end">
                                    <a class="text-decoration-none" @onclick="@(() => OnDeleteSignature(f))"> <i class="far fa-trash-alt"></i></a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}
 
<div class="demo-container">

    <TelerikLoaderContainer Size="@ThemeConstants.Loader.Size.Large"
                            Text="ระบบกำลังประมวลผล ....."
                            Visible="@isLoading"
                            LoaderPosition="@LoaderPosition.End"></TelerikLoaderContainer>
</div>

@code {
    bool isLoading = true;
    bool isUploading = false;
    bool isShowNew = true;
    bool isShowDelete = true;
    string menuCaption = "";
    string menuGroupCaption = "";
    public bool ReadEnableComID { get; set; } = true;
    bool collapse1Visible = true;
    bool collapseVisibleAddr = true;
    bool collapseDepartment = true;
    public string ImageUrl { get; set; } = "";

    public string SearchText { get; set; } = "";

    public string DepartmentID { get; set; } = "";
    public string DepartmentName { get; set; } = "";

    bool ShowFilterRow = false;

    public string txtcompany_id { get; set; } = "";
    IEnumerable<vw_ThaiPostAddress> ListAddr;
    public string SelectAddr { get; set; } = "";
    List<FilesInfo> upload_file = new List<FilesInfo>();

    public List<CompanyInfo> ComList = new List<CompanyInfo>();
    public List<CompanyInfo> ComGroupList = new List<CompanyInfo>();
    public List<CurrencyInfo> cboCurrency = new List<CurrencyInfo>();
 

    protected override async Task OnInitializedAsync() {

        await Task.Run(() => login.CheckLogin());
        await Task.Run(() => CheckIsRefresh());
        await Task.Run(LoadData);
        await LoadThaiAddr();
        await InvokeAsync(StateHasChanged);
    }
    async Task CheckIsRefresh() {
        var rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
        if (companyService.DocSet == null) {
            var comid = await sessionStorage.GetItemAsync<string>(CompanyService.sessionActiveId);
            if (!string.IsNullOrEmpty(comid)) {
                companyService.DocSet = companyService.GetDocSet(comid, rcom);
            } else {
                companyService.DocSet = companyService.NewTransaction(rcom);
                txtcompany_id = "";
                companyService.DocSet.ComInfo.CreatedBy = login.LoginInfo.CurrentUser;
            }
        }
    }
    public async void BindData() {
        var h = companyService.DocSet.ComInfo;
        //selected_rootCompany = h.RCompanyID;
        //selected_ComGroup = h.GroupCode;
        txtcompany_id = h.CompanyID;
        await loadProfile();
        await SetActiveControl();
    }

    async Task SetActiveControl() {
        var h = companyService.DocSet.ComInfo;

        if (h.CompanyID != "") {
            ReadEnableComID = false;
        } else {
            ReadEnableComID = true;
        }

        await CheckPermission();
    }
    async Task CheckPermission() {

        var menu = LogInService.GetMenuInfo(login.LoginInfo, "121");
        menuCaption = menu.Name;
        menuGroupCaption = LogInService.GetMenuGroup(login.LoginInfo, menu.GroupID).Name;

        var h = companyService.DocSet.ComInfo;
        if (h.CompanyID == "") {
            isShowDelete = false;
        }
        if (!login.CanCreate(login.LoginInfo, "121")) {//121 บริษัทและสาขา
            isShowNew = false;
        }
        if (!login.CanDelete(login.LoginInfo, "121")) { //121 บริษัทและสาขา
            isShowDelete = false;
        }
        if (!login.CanOpen(login.LoginInfo, "121")) {
            nav.NavigateTo("NoPermissionPage");
        }
    }

    async Task LoadData() {
        LoadDropDown();
        BindData();
      
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    void LoadDropDown() {
        var uirc = login.LoginInfo.UserInRCompany;
        var uic = login.LoginInfo.UserInCompany;
        ComList = CompanyService.ListCompany(uirc);
        ComGroupList = CompanyService.ListCompanyGroup(uic, uirc);
        cboCurrency = CurrencyInfoService.ListCurrencyInfo("");
    }

    bool ValidData() {
        var h = companyService.DocSet.ComInfo;

        bool isvalid = true;
        string Errmsg = "";
        string mobile = h.Mobile.Trim().Replace(".", "").Replace("-", "").Replace(" ", "").Replace("(", "").Replace(")", "");
        if (string.IsNullOrEmpty(txtcompany_id)) {
            Errmsg = "ระบุรหัสบริษัท";
            isvalid = false;
        }

        h.Mobile = mobile;
        if (h.Mobile == "") {
            Errmsg = "ระบุเบอร์";
            isvalid = false;
        }

        //if (!(mobile.Count() >= 9 && mobile.Count() <= 10)) {
        //    Errmsg = "ระบุเบอร์โทร ให้ครบ 10 หลัก";
        //    isvalid = false;
        //}

        if (h.Name1 == "") {
            Errmsg = "ระบุชื่อ 1";
            isvalid = false;
        }

        if (h.TaxID == "") {
            Errmsg = "ระบุเลขผู้เสียภาษี";
            isvalid = false;
        }
        if (h.RCompanyID == "") {
            Errmsg = "ระบุ ต้นสังกัด";
            isvalid = false;
        }
        //if (selected_ComGroup == "") {
        //    Errmsg = "ระบุ กลุ่ม";
        //    isvalid = false;
        //}

        if (!isvalid) {
            Swal.FireAsync("", Errmsg, "error");
        }
        return isvalid;
    }

    private bool PrepairDataSave() {
        var h = companyService.DocSet.ComInfo;
        var u = login.LoginInfo;
        bool isnew = h.CompanyID == "" ? true : false;

        if (isnew) {
            h.CreatedBy = login.LoginInfo.CurrentUser;

            if (!string.IsNullOrEmpty(txtcompany_id)) {
                //h.CompanyID = txtcom_id;
                companyService.DocSet.NeedRunNextID = false;
                h.CompanyID = txtcompany_id;
            }
        } else {
            h.ModifiedBy = login.LoginInfo.CurrentUser;
        }



        return isnew;
    }

    public async void SaveDoc() {
        if (!ValidData()) {
            return;
        }

        var rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
        var h = companyService.DocSet.ComInfo;

        var isnew = PrepairDataSave();
        var rs = CompanyService.Save(companyService.DocSet, isnew);

        if (rs.Result == "ok") {//save successufull

            companyService.DocSet = await Task.Run(() => companyService.GetDocSet(h.CompanyID, rcom));
            if (isnew) {
                await sessionStorage.SetItemAsync(CompanyService.sessionActiveId, h.CompanyID);
            }
            LoadData();
            await Swal.FireAsync("", "บันทึกสำเร็จ", "success");
        } else {
            if (isnew) {

                h.CompanyID = "";
            }
            await Swal.FireAsync("", rs.Message1, "error");
        }
    }

    async Task NewDoc() {
        var u = login.LoginInfo;
        var rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
        await sessionStorage.RemoveItemAsync(CompanyService.sessionActiveId);
        companyService.DocSet = companyService.NewTransaction(rcom);
        companyService.DocSet.ComInfo.CreatedBy = u.CurrentUser;
        txtcompany_id = "";
        await LoadData();
        await InvokeAsync(StateHasChanged);
    }

    public void ValueChangeAddr(string value) {
        var rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
        var com = login.LoginInfo.CurrentCompany.CompanyID;

        if (!string.IsNullOrEmpty(value)) {
            var addrid = value.ToString();

            var data = AddressService.GetViewThaiPostAddress(addrid);
            if (data != null) {
                companyService.DocSet.ComInfo.AddrProvince = data.PROVINCE_NAME;
                companyService.DocSet.ComInfo.AddrAmphoe = data.BORDER_NAME;
                companyService.DocSet.ComInfo.AddrTumbon = data.DISTRICT_NAME;
                companyService.DocSet.ComInfo.AddrPostCode = data.DISTRICT_POSTAL_CODE;
            }
        } else {
            SelectAddr = "";
        }
    }

    public void ChangeAddr(vw_ThaiPostAddress data) {

    }

    async public Task LoadThaiAddr() {
        ListAddr = await Task.Run(() => AddressService.ListThaiPostAddress());
    }

    #region profile management

    async Task loadProfile() {
        isUploading = true;

        var i = companyService.DocSet.ComInfo;
        ImageUrl = FileGo.GetThumbUrl(i.RCompanyID, i.CompanyID, FileGo.Type_CompanyProfile, i.CompanyID);
        if (string.IsNullOrEmpty(ImageUrl)) {
            ImageUrl = "/assets/img/applogo.png";
        }
        isUploading = false;
        await InvokeAsync(StateHasChanged);
    }
    async Task OnDeleteProfile() {
        try {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions {
                    Title = "Warning",
                    Text = $"ต้องการลบรูปใช่หรือไม่",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });

            if (string.IsNullOrEmpty(result.Value)) {
                return;
            }

            //string rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
            //string com = login.LoginInfo.CurrentCompany.CompanyID;
            var h = companyService.DocSet.ComInfo;
            string user = login.LoginInfo.CurrentUser;

            isUploading = true;
            var rr = await Task.Run(() => fileGo.DeleteFile(h.RCompanyID, h.CompanyID, FileGo.Type_CompanyProfile, h.CompanyID, user));
            if (rr.Result == "ok") {
                await loadProfile();
            } else {
                await Swal.FireAsync("Error", rr.Message1, "error");
            }
        } catch {
        } finally {
            isUploading = false;
        }
    }

    async Task DownLoadImage() {
        try {
            var i = companyService.DocSet.ComInfo;
            string file_url = FileGo.GetFileUrl(i.RCompanyID, i.CompanyID, FileGo.Type_CompanyProfile, i.CompanyID);
            if (!string.IsNullOrEmpty(file_url)) {
                nav.NavigateTo(file_url, true);
            }
        } catch {
        }
    }


    async Task TestApi() {
        var login_filego = FileGo.GetTestLogin();
        string dataEndpointUri = $"{login_filego.RootUrl}/api/Values/GetData";
        try {

            // string dataEndpointUri = $"http://192.168.1.200:765/api/Values/GetData";
            I_BasicResult update_result = new I_BasicResult();
       
            var query = await Task.Run(() => clientService.GetAllAsync<string>(dataEndpointUri,login_filego.JwtToken));
            if (query.StatusCode != "OK") {
                update_result.Result = "fail";
                update_result.Message1 = query.StatusCode;
                await Swal.FireAsync("ZZZ", query.StatusCode + " : " + dataEndpointUri, "success");
            } else {
                var o = (string)query.Result;
                await Swal.FireAsync("XXX", o + " : " + dataEndpointUri, "success");
            }
        } catch (Exception ex) {
            await Swal.FireAsync("YYY", ex.Message + " : " + dataEndpointUri, "success");
        } finally {
            isUploading = false;
        }
    }
    #endregion


    bool ValidLineData() {
        var h = companyService.DocSet.ComInfo;

        bool isvalid = true;
        string Errmsg = "";

        if (string.IsNullOrEmpty(DepartmentID)) {
            Errmsg = "ระบุ หมายเลขแผนก";
            isvalid = false;
        }

        if (string.IsNullOrEmpty(DepartmentName)) {
            Errmsg = "ระบุ ชื่อแผนก";
            isvalid = false;
        }

        if (!isvalid) {
            Swal.FireAsync("", Errmsg, "error");
        }
        return isvalid;
    }

   

   
  


    private void ResetControl() {
        DepartmentID = "";
        DepartmentName = "";
    }
    public void Back() {
        //@if (!string.IsNullOrEmpty(xpage)) {
        //    nav.NavigateTo(customerService.PreviousPageUrl);
        //} else {
        //    nav.NavigateTo($"Master/Company/CompanyList");
        //}
        nav.NavigateTo($"Master/Company/CompanyList");
    }
    #region upload
    async Task OnInputFileProfileChanged(InputFileChangeEventArgs e) {
        isUploading = true;
        var files = e.GetMultipleFiles(maximumFileCount: 1);
        var h = companyService.DocSet.ComInfo;
        if (string.IsNullOrEmpty(h.CompanyID)) {
            await Swal.FireAsync("Error", "Save before upload", "error");
            isLoading = false;
            StateHasChanged();
            return;
        }

        string user = login.LoginInfo.CurrentUser;
        try {
            upload_file = new List<FilesInfo>();
            foreach (var file in e.GetMultipleFiles(1)) {
                using var stream = file.OpenReadStream(maxAllowedSize: (1024 * 1024 * 15));
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);

                var nfile = FileGo.NewFilesInfo(FileGo.Type_CompanyProfile, h.RCompanyID, h.CompanyID, h.CompanyID);
                #region resize image
                System.Drawing.Image originalImage = System.Drawing.Image.FromStream(ms);
                string extension = System.IO.Path.GetExtension(file.Name);
                extension = extension.Replace(".", "");
                var imgx = ImageService.ResizeImage(originalImage, 500, 500);
                if (imgx == null) {
                    isUploading = false;
                    StateHasChanged();
                    await Swal.FireAsync("Error", "Resize image fail.", "error");
                    return;
                }
                MemoryStream resize_image_ms = new MemoryStream();
                if (extension.ToLower() == "jpg" || extension.ToLower() == "jpeg") {
                    imgx.Save(resize_image_ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                }
                if (extension.ToLower() == "gif") {
                    imgx.Save(resize_image_ms, System.Drawing.Imaging.ImageFormat.Gif);
                }

                if (extension.ToLower() == "png") {
                    imgx.Save(resize_image_ms, System.Drawing.Imaging.ImageFormat.Png);
                }
                #endregion
                nfile.data = Convert.ToBase64String(resize_image_ms.ToArray());
                // nfile.data = buf;
                nfile.file_type = file.ContentType;
                nfile.fileName = file.Name;
                upload_file.Add(nfile);

            }
            await Upload("profile");
        } catch (Exception ex) {
            await Swal.FireAsync("Error", ex.Message, "error");
        } finally {
            isUploading = false;
        }
    }
    async Task Upload(string type) {
        try {
            var h = companyService.DocSet.ComInfo;
            string user = login.LoginInfo.CurrentUser;
            isUploading = true;
            var login_filego = FileGo.GetFileGoLogin();

            string dataEndpointUri = $"{login_filego.RootUrl}/api/xfiles/XFilesService/UploadFileToDB";
            I_BasicResult update_result = new I_BasicResult();
            var token_filego = FileGo.GetFileGoLogin();
            var query = await Task.Run(() => clientService.Post<I_BasicResult>(dataEndpointUri, upload_file,token_filego.JwtToken));
            if (query.StatusCode != "OK") {
                update_result.Result = "fail";
                update_result.Message1 = query.StatusCode;
            } else {
                update_result = (I_BasicResult)query.Result;
                if (update_result.Result == "fail") {
                    upload_file.Clear();
                    await Swal.FireAsync("Error", update_result.Message1, "error");
                } else {
                    //ShowMessage(true, "Upload Success");

                    var xfile_ref = FileGo.Convert2XFilesRef(upload_file, login.LoginInfo.CurrentUser);
                    var rr = FileGo.SaveXFileRef(xfile_ref);
                    var rrr = await Task.Run(() => fileGo.DeleteOldFileAfterSave(h.RCompanyID, h.CompanyID, FileGo.Type_CompanyProfile, h.CompanyID, user));
                    if (type == "profile") {
                        await loadProfile();
                    }
                    if (type == "signature") {
                        companyService.DocSet = CompanyService.RefreshFile(companyService.DocSet);
                    }

                }
            }
        } catch {
        } finally {
            isUploading = false;
        }
    }
    async Task OnInputFileSignatureChanged(InputFileChangeEventArgs e) {
        isLoading = true;
        var files = e.GetMultipleFiles(maximumFileCount: 1);
        var h = companyService.DocSet.ComInfo;
        if (string.IsNullOrEmpty(h.CompanyID)) {
            await Swal.FireAsync("Error", "Save before upload", "error");
            isLoading = false;
            StateHasChanged();
            return;
        }

        string user = login.LoginInfo.CurrentUser;
        try {
            upload_file = new List<FilesInfo>();
            foreach (var file in e.GetMultipleFiles(1)) {
                using var stream = file.OpenReadStream(maxAllowedSize: (1024 * 1024 * 15));
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);

                var nfile = FileGo.NewFilesInfo(FileGo.Type_CompanySignatureAll, h.RCompanyID, h.CompanyID, h.CompanyID);
                #region resize image
                System.Drawing.Image originalImage = System.Drawing.Image.FromStream(ms);
                string extension =System.IO. Path.GetExtension(file.Name);
                extension = extension.Replace(".", "");
                var imgx = ImageService.ResizeImage(originalImage, 500, 500);
                if (imgx == null) {
                    isLoading = false;
                    StateHasChanged();
                    await Swal.FireAsync("Error", "Resize image fail.", "error");
                    return;
                }
                MemoryStream resize_image_ms = new MemoryStream();
                if (extension.ToLower() == "jpg" || extension.ToLower() == "jpeg") {
                    imgx.Save(resize_image_ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                }
                if (extension.ToLower() == "gif") {
                    imgx.Save(resize_image_ms, System.Drawing.Imaging.ImageFormat.Gif);
                }

                if (extension.ToLower() == "png") {
                    imgx.Save(resize_image_ms, System.Drawing.Imaging.ImageFormat.Png);
                }
                #endregion
                nfile.data = Convert.ToBase64String(resize_image_ms.ToArray());
                // nfile.data = buf;
                nfile.file_type = file.ContentType;
                nfile.fileName = file.Name;
                upload_file.Add(nfile);

            }
            await Upload("signature");
        } catch (Exception ex) {
            await Swal.FireAsync("Error", ex.Message, "error");
        } finally {
            isLoading = false;
        }
    }
    async Task DownLoadImage(vw_XFilesRef h) {
        try {
            string file_url = FileGo.GetFileUrl(h.FileID);
            if (!string.IsNullOrEmpty(file_url)) {
                nav.NavigateTo(file_url, true);
            }
        } catch {

        }
    }
    async Task OnDeleteSignature(vw_XFilesRef h) {
        try {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions {
                    Title = "Warning",
                    Text = $"ต้องการลบไฟล์ใช่หรือไม่",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });
            if (string.IsNullOrEmpty(result.Value)) {
                return;
            }

            //string rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
            //string com = login.LoginInfo.CurrentCompany.CompanyID;
            string user = login.LoginInfo.CurrentUser;


            isUploading = true;
            var rr = await Task.Run(() => fileGo.DeleteFile(h.RCompanyID, h.CompanyID, h.DocType, h.DocID, user));
            if (rr.Result == "ok") {
                companyService.DocSet = CompanyService.RefreshFile(companyService.DocSet);
                InvokeAsync(StateHasChanged);
            } else {
                await Swal.FireAsync("Error", rr.Message1, "error");
            }

        } catch {
        } finally {
            isUploading = false;
        }
    }
    #endregion
}
