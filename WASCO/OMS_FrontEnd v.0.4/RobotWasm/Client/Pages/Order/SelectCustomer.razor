@page "/Order/SelectCustomer"

@using RobotWasm.Client.Data.DA.Master
@using System.Text.Json
@using System.Text
@using RobotWasm.Shared.Data.DA;
@using RobotWasm.Shared.Data.ML.Master.Company;
@using RobotWasm.Shared.Data.ML.Shared
@using Blazorise
@using RobotWasm.Shared.Data.GaDB

<style>
    .card-top-menu {
        padding: 8px 10px 8px 10px;
        background-color: #3498db;
        border-radius: 0px 0px 15px 15px;
    }

    div.noSelect {
        -moz-user-select: none; /* Mozilla browsers */
        -khtml-user-select: none; /* WebKit browsers */
        user-select: none; /* Standard syntax */
    }
</style>

<div class="row card-top-menu">
    <a class="p-0 text-decoration-none text-white" @onclick="@GoBack">
        <div class="text-center">
            <div class="d-inline-block float-start"><i class="fa-solid fa-circle-chevron-left fa-2x"></i></div>
            <div class="d-inline-block pt-1"><span style="font-size:large;">เลือกลูกค้า</span></div>
        </div>
    </a>
</div>

<div class="row pt-3">
    <div class="col-lg-8 col-md-8 col-sm-12 mx-auto">
        <div class="input-group">
            <TelerikTextBox PlaceHolder="คำค้นหาลูกค้า" Class="box-sd-inputsearch form-control rounded" Value="@SearchText" ValueChanged="@OnTextChanged_ListCustomer"></TelerikTextBox>
        </div>
    </div>
</div>
<div class="row pt-2">
    <div class="col-lg-8 col-md-8 col-sm-12 mx-auto">
        <div class="card">
            <div class="card-body">
                <TelerikListView Data="@ListCustomer" Pageable="true" PageSize="8">
                    <Template>
                        <a class="p-0 text-decoration-none text-dark" @onclick="@(async () => await OnSelectCustomer(context))">
                            <div class="row noSelect">
                                <div class="col-md-9">
                                    <i class="fa-solid fa-circle-user" style="font-size:1.7em;"></i>&nbsp;&nbsp;&nbsp;
                                    <span style="font-size:small;">@context.NameDisplay</span> 
                                </div>
                                <div class="col-md-3 text-end">
                                    <span style="font-size:small;">@context.GroupID</span> 
                                </div>
                            </div>
                        </a>
                        <hr class="my-3" />
                    </Template>
                </TelerikListView>
            </div>
        </div>
    </div>
</div>

<div>
    <TelerikLoaderContainer Size="@ThemeConstants.Loader.Size.Large"
                            Text="ระบบกำลังประมวลผล ....."
                            Visible="@isLoading"
                            LoaderPosition="@LoaderPosition.End"></TelerikLoaderContainer>
</div>

@code {
    bool isLoading = false;
    List<CustomerInfo> ListCustomer = new List<CustomerInfo>();
    public string rcom { get; set; } = "";
    public string com { get; set; } = "";
    public string user { get; set; } = "";
    string SearchText = "";
    protected override async Task OnInitializedAsync() {
        isLoading = true;
        await Task.Run(() => login.CheckLogin());
        await Task.Run(() => CheckIsRefresh());
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);
    }
    public async void OnTextChanged_ListCustomer(object Search) {
        SearchText = Search == null ? "" : Search.ToString();
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);

    }
    async Task CheckIsRefresh() {
        rcom = login.LogInInfo.CurrentRootCompany.CompanyID;
        com = login.LogInInfo.CurrentCompany.CompanyID;
        user = login.LogInInfo.CurrentUser;
        var userfullname = login.LogInInfo.CurrentUserInfo.FullName;
        if (_soService.DocSet == null) {
            var docid = await sessionStorage.GetItemAsync<string>(Globals.SessionActive_SOID);
            if (!string.IsNullOrEmpty(docid)) {
                _soService.DocSet = await Task.Run(() => _soService.GetDocSet(docid, rcom, com));
            } else {
                _soService.DocSet = await Task.Run(() => SOFuncService.NewTransaction(rcom, com, "SO1", user, userfullname));
            }
        }
    }

    async void LoadData() {
        rcom = login.LogInInfo.CurrentRootCompany.CompanyID;
        com = login.LogInInfo.CurrentCompany.CompanyID;
        var brand = await sessionStorage.GetItemAsync<string>(Globals.SessionActive_BrandID);
        ListCustomer = await _customerService.ListCustomerInfo(rcom, com, brand, SearchText);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task SetActiveControl() {
        await CheckPermission();
    }
    async Task CheckPermission() {
        //var menu_info = UserService.GetMenuInfo(login.LogInInfo, "5001");
        //var Permissionmenu = login.LogInInfo.UserInMenu.Where(o => o.MenuID == menu_info.MenuID).FirstOrDefault();
    }

    async Task OnSelectCustomer(CustomerInfo select_data) {
        _soService.DocSet.Head.CustID = select_data.CustomerID;
        _soService.DocSet.Head.CustName = select_data.FullNameTh;
        _soService.DocSet.Head.TermID = select_data.PaymentTermID;
        _soService.DocSet.Head.VatTypeID = select_data.TaxTypeID;
        _soService.DocSet.Head.IsLockPrice = Convert.ToBoolean(select_data.IsLockPrice);
        _soService.DocSet.Head.VatRate = await Task.Run(() => _customerService.GetTaxRate(select_data.RCompanyID, "SALE", select_data.TaxTypeID));
        nav.NavigateTo($"Order/OrderDetail", false);
    }

    void GoBack() {
        nav.NavigateTo("Order/OrderDetail");
    }
}
