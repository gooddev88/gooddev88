@page "/ChangePassword"
@page "/ChangePassword/{user}"
@page "/ChangePassword/{user}/{expire}"
@using System.IO


<style>
    .btn-link:hover {
        color: #ff00e0;
    }

    .btn-ChangePassword {
        border-radius: 2.3rem;
        background-image: linear-gradient( 19deg, #EA9409 0%, #EEC71A 100%);
        color: black;
        width: 100%;
    }

    .samll {
        font-size: smaller;
    }

    body {
        overflow: auto;
    }

    .fix-content {
        padding-top: 80px;
        display: flex;
        justify-content: center;
        align-content: center;
        height: 500px;
        width: 100%;
    }

    .report-button-wrapper {
        width: 100%;
        text-align: center;
    }

    .loader-indicator {
        margin-left: 5px;
    }
</style>




<div class="container-fluid" style="background-color: #21D4FD; background-image: linear-gradient( 19deg, #21D4FD 0%, #B721FF 100%); padding-bottom: 200px;">

    <div class="row">
        <div class="col-xl-4 col-lg-7 col-md-8 col-sm-9 pt-150 col-11 mx-auto my-auto">
            <div class="card rounded" style="border-radius: 1.25rem !important;">
                <div class="card-body">
                    <div class="row pb-4 pt-4">
                        <div class="col-md-12 text-center">
                            <div><h3 class="fw-bold">Change password</h3></div>
                        </div>
                    </div>
                    <div class="row pt-2" style="font-size:medium;">
                        <div class="col-md-12">
                            <span class="font-weight-bold">Username</span>
                            <input type="text" class="form-control" id="username" placeholder="Input UserName" @bind="@userName">
                        </div>
                    </div>
                    <div class="row pt-2" style="font-size:medium;">
                        <div class="col-md-12">
                            <span class="font-weight-bold">Password</span>
                            <input type="password" class="form-control" id="password1" placeholder="Input current password" @bind="@password">
                        </div>
                    </div>
                    <div class="row pt-2" style="font-size:medium;">
                        <div class="col-md-12">
                            <span class="font-weight-bold">New Password</span>
                            <input type="password" class="form-control" id="password2" placeholder="Input new password" @bind="@password1">
                        </div>
                    </div>
                    <div class="row pt-2" style="font-size:medium;">
                        <div class="col-md-12">
                            <span class="font-weight-bold">New Password again</span>
                            <input type="password" class="form-control" id="password3" placeholder="Input new password again" @bind="@password2">
                        </div>
                    </div>
                    <div class="row pt-1">
                        <div class="col-12 text-end">
                            <a class="btn-link text-decoration-none" @onclick="@OnBack">Back to Login page</a>
                        </div>
                    </div>
                    <div class="row pt-4 pb-2">
                        <div class="col-md-12">
                            <button type="button" @onclick="@OnChangePassword"
                                    class="btn btn-block btn-lg btn-ChangePassword">
                                <h4 class="pt-1">Change password</h4>
                            </button>
                        </div>
                    </div>
                    <div class="row pt-2 px-4" hidden>
                        <div class="col-md-12">
                            <p>
                                <span style="font-size:large;color:dimgrey"> Password policy is required</span>
                                <span style="font-size:small;color:dimgrey">
                                    <br> At least one lower case letter
                                    <br> At least one upper case letter
                                    <br> At least special character
                                    <br> At least one number
                                    <br> At least 8 characters length
                                </span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="demo-container">
    <TelerikLoaderContainer Size="@ThemeConstants.Loader.Size.Large"
                            Text="ระบบกำลังประมวลผล ....."
                            Visible="@isLoading"
                            LoaderPosition="@LoaderPosition.End"></TelerikLoaderContainer>
</div>

@code {
    [Parameter] public string user { get; set; }
    [Parameter] public string? expire { get; set; }
    public string userName { get; set; }
    public string password { get; set; }
    public string password1 { get; set; } = "";
    public string password2 { get; set; } = "";
    bool isLoading = true;

    protected override async Task OnInitializedAsync() {
        userName = user == null ? "" : user;
        isLoading = false;
        if (!string.IsNullOrEmpty(expire)) {
            await Swal.FireAsync("Warnig", "Password has expired, please change a new password.", "info");
        }
    }

    async void OnChangePassword() {
        if (password1 == "" && password2 == "") {
            await Swal.FireAsync("", "The password does not match.", "error");
            return;
        }

        if (password1 != password2) {
            await Swal.FireAsync("", "The password does not match.", "error");
            return;
        }
        isLoading = true;
        var r = await Task.Run(() => _userService.ChangePassword(userName, password, password1));
        await InvokeAsync(StateHasChanged);
        if (r.Result == "ok") {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
            nav.NavigateTo($"Login/{user}/yes", true);
        } else {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
            // await Swal.FireAsync("", r.Message1, "error");
            await Swal.FireAsync(new SweetAlertOptions {
                    Title = "Error!",
                    Html = r.Message1,

                    Icon = SweetAlertIcon.Error,
                    ShowCloseButton = true,
                });
            //          await Swal.FireAsync({
            //              title: 'Hello!',
            //text: 'Welcome to SweetAlert2',
            //icon: 'success',
            //confirmButtonText: 'OK'
            //  });
        }
    }

    void OnBack() {
        nav.NavigateTo($"Login/{user}/yes", false);
    }

}
