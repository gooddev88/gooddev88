// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using RobotWasm.Shared.Data.GaDB;

namespace RobotWasm.Server.Data.GaDB 
{
    public partial class GAEntities : DbContext
    {
      


        private readonly IConfiguration Configuration;
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
            //optionsBuilder.UseSqlServer(Configuration["GAEntities:ConnectionString"]);
            optionsBuilder.UseSqlServer(Globals.GAEntitiesConn);
        }
        public GAEntities() { }
        //public GAEntities(IConfiguration configuration)
        //{ 
        //    Configuration = configuration;
        //}

        public GAEntities(DbContextOptions<GAEntities> options)
            : base(options) {
        }


        public virtual DbSet<Addr_Amphoe> Addr_Amphoe { get; set; }
        public virtual DbSet<Addr_Country> Addr_Country { get; set; }
        public virtual DbSet<Addr_District> Addr_District { get; set; }
        public virtual DbSet<Addr_Province> Addr_Province { get; set; }
        public virtual DbSet<BankInfo> BankInfo { get; set; }
        public virtual DbSet<BookBankInfo> BookBankInfo { get; set; }
        public virtual DbSet<CalenWeekName> CalenWeekName { get; set; }
        public virtual DbSet<CompanyInfo> CompanyInfo { get; set; }
        public virtual DbSet<Config> Config { get; set; }
        public virtual DbSet<CreditTerm> CreditTerm { get; set; }
        public virtual DbSet<CurrencyInfo> CurrencyInfo { get; set; }
        public virtual DbSet<CustomerBranch> CustomerBranch { get; set; }
        public virtual DbSet<CustomerInfo> CustomerInfo { get; set; }
        public virtual DbSet<DashBoard> DashBoard { get; set; }
        public virtual DbSet<DocPrint> DocPrint { get; set; }
        public virtual DbSet<DocPrintInCom> DocPrintInCom { get; set; }
        public virtual DbSet<DocTypeInfo> DocTypeInfo { get; set; }
        public virtual DbSet<ExchangeRate> ExchangeRate { get; set; }
        public virtual DbSet<IDGenerator> IDGenerator { get; set; }
        public virtual DbSet<ItemBarcode> ItemBarcode { get; set; }
        public virtual DbSet<ItemInfo> ItemInfo { get; set; }
        public virtual DbSet<Link> Link { get; set; }
        public virtual DbSet<LineGroupInfo> LineGroupInfo { get; set; }
        public virtual DbSet<LocationInfo> LocationInfo { get; set; }
        public virtual DbSet<LogInCrossAppReq> LogInCrossAppReq { get; set; }
        public virtual DbSet<LoginLog> LoginLog { get; set; }
        public virtual DbSet<LoginSessionLog> LoginSessionLog { get; set; }
        public virtual DbSet<MasterTypeHead> MasterTypeHead { get; set; }
        public virtual DbSet<MasterTypeLine> MasterTypeLine { get; set; }
        public virtual DbSet<OINVHead> OINVHead { get; set; }
        public virtual DbSet<OINVLine> OINVLine { get; set; }
        public virtual DbSet<OPaymentType> OPaymentType { get; set; }
        public virtual DbSet<ORCPayLine> ORCPayLine { get; set; }
        public virtual DbSet<OSOHead> OSOHead { get; set; }
        public virtual DbSet<OSOLine> OSOLine { get; set; }
        public virtual DbSet<OSOLot> OSOLot { get; set; }
		public virtual DbSet<PromotionPattern> PromotionPattern { get; set; }
		public virtual DbSet<PromotionItem> PromotionItem { get; set; }
		public virtual DbSet<Promotions> Promotions { get; set; } 
		public virtual DbSet<STKBal> STKBal { get; set; }
        public virtual DbSet<STKItemBal> STKItemBal { get; set; }
        public virtual DbSet<STKMove> STKMove { get; set; }
        public virtual DbSet<TaxInfo> TaxInfo { get; set; }
        public virtual DbSet<ThaiPostAddress> ThaiPostAddress { get; set; }
        public virtual DbSet<TransactionLog> TransactionLog { get; set; }
        public virtual DbSet<UploadLog> UploadLog { get; set; }
        public virtual DbSet<UserGroupInBoard> UserGroupInBoard { get; set; }
        public virtual DbSet<UserGroupInCompany> UserGroupInCompany { get; set; }
        public virtual DbSet<UserGroupInDocStep> UserGroupInDocStep { get; set; }
        public virtual DbSet<UserGroupInfo> UserGroupInfo { get; set; }
        public virtual DbSet<UserGroupPermission> UserGroupPermission { get; set; }
        public virtual DbSet<UserInBoard> UserInBoard { get; set; }
        public virtual DbSet<UserInCompany> UserInCompany { get; set; }
        public virtual DbSet<UserInDocStep> UserInDocStep { get; set; }
        public virtual DbSet<UserInGroup> UserInGroup { get; set; }
        public virtual DbSet<UserInRCom> UserInRCom { get; set; }
        public virtual DbSet<UserInfo> UserInfo { get; set; }
        public virtual DbSet<UserLogInHistory> UserLogInHistory { get; set; }
        public virtual DbSet<UserMenu> UserMenu { get; set; }
        public virtual DbSet<UserPermission> UserPermission { get; set; }
        public virtual DbSet<V_Query> V_Query { get; set; }
        public virtual DbSet<XFileLocation> XFileLocation { get; set; }
        public virtual DbSet<XFilesRef> XFilesRef { get; set; }
        public virtual DbSet<a_amphoe> a_amphoe { get; set; }
        public virtual DbSet<a_community> a_community { get; set; }
        public virtual DbSet<a_mm> a_mm { get; set; }
        public virtual DbSet<a_province> a_province { get; set; }
        public virtual DbSet<a_tambol> a_tambol { get; set; }
        public virtual DbSet<mail_sender> mail_sender { get; set; }
        public virtual DbSet<vw_CompanyInfo> vw_CompanyInfo { get; set; }
        public virtual DbSet<vw_CustomerInfo> vw_CustomerInfo { get; set; }
        public virtual DbSet<vw_DocTypeInfo> vw_DocTypeInfo { get; set; }
        public virtual DbSet<vw_EmpInfo> vw_EmpInfo { get; set; }
        public virtual DbSet<vw_ItemInfo> vw_ItemInfo { get; set; }
     public virtual DbSet<vw_ItemInfoWithPhotoAndStock> vw_ItemInfoWithPhotoAndStock { get; set; }
        public virtual DbSet<vw_ListDate> vw_ListDate { get; set; }
        public virtual DbSet<vw_LocationInfo> vw_LocationInfo { get; set; }
        public virtual DbSet<vw_MasterTypeLine> vw_MasterTypeLine { get; set; }    
        public virtual DbSet<vw_OINVHead> vw_OINVHead { get; set; }
        public virtual DbSet<vw_OINVLine> vw_OINVLine { get; set; }
        public virtual DbSet<vw_OSOHead> vw_OSOHead { get; set; }
        public virtual DbSet<vw_OSOLine> vw_OSOLine { get; set; }
        public virtual DbSet<vw_OSOLot> vw_OSOLot { get; set; } 
        public virtual DbSet<vw_PromotionItem> vw_PromotionItem { get; set; } 
   public virtual DbSet<vw_ItemStockPromotionWithPhoto> vw_ItemStockPromotionWithPhoto { get; set; } 
     public virtual DbSet<vw_PromotionItemWithPattern> vw_PromotionItemWithPattern { get; set; } 
        public virtual DbSet<vw_PermissionGroupInMenu> vw_PermissionGroupInMenu { get; set; }
        public virtual DbSet<vw_PermissionInBoard> vw_PermissionInBoard { get; set; }
        public virtual DbSet<vw_PermissionInCompany> vw_PermissionInCompany { get; set; }
        public virtual DbSet<vw_PermissionInMenu> vw_PermissionInMenu { get; set; }
        public virtual DbSet<vw_STKBal> vw_STKBal { get; set; }
        public virtual DbSet<vw_STKBalInUnitConvert> vw_STKBalInUnitConvert { get; set; }
        public virtual DbSet<vw_STKMove> vw_STKMove { get; set; }
     public virtual DbSet<vw_STKItemBal> vw_STKItemBal { get; set; }
        public virtual DbSet<vw_ThaiPostAddress> vw_ThaiPostAddress { get; set; }
        public virtual DbSet<vw_UIC> vw_UIC { get; set; }
        public virtual DbSet<vw_UIM> vw_UIM { get; set; }
        public virtual DbSet<vw_UserGroupInfo> vw_UserGroupInfo { get; set; }
        public virtual DbSet<vw_UserInBoard> vw_UserInBoard { get; set; }
        public virtual DbSet<vw_PermissionInLoc> vw_PermissionInLoc { get; set; }
        public virtual DbSet<vw_UserInGroup> vw_UserInGroup { get; set; }
        public virtual DbSet<vw_UserInRCom> vw_UserInRCom { get; set; }
        public virtual DbSet<vw_UserInfo> vw_UserInfo { get; set; }
        public virtual DbSet<vw_UserInfoMini> vw_UserInfoMini { get; set; }
        public virtual DbSet<vw_XFilesRef> vw_XFilesRef { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder) {
            modelBuilder.Entity<Addr_Amphoe>(entity =>
            {
                entity.Property(e => e.AmphoeID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AmphoeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CountryID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ProvinceID)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Addr_Country>(entity =>
            {
                entity.HasIndex(e => e.CountryID, "IX_Addr_Country")
                    .HasFillFactor(90);

                entity.Property(e => e.ContinentID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrencyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Addr_District>(entity =>
            {
                entity.HasIndex(e => new { e.PostCode, e.DistrictID, e.AmphoeID, e.ProvinceID }, "IX_M_Addr_District")
                    .HasFillFactor(90);

                entity.Property(e => e.AmphoeID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AmphoeIDEng).HasMaxLength(100);

                entity.Property(e => e.CountryID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DistrictID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DistrictIDEng).HasMaxLength(100);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProvinceID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProvinceIDEng).HasMaxLength(100);

                entity.Property(e => e.RegionID).HasMaxLength(100);
            });

            modelBuilder.Entity<Addr_Province>(entity =>
            {
                entity.Property(e => e.CountryID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ProvinceID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProvinceName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BankInfo>(entity =>
            {
                entity.HasKey(e => e.BankCode)
                    .HasName("PK_Bank");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name_EN)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("เลขที่บัญชี");

                entity.Property(e => e.Name_TH)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("เลขที่บัญชี");

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.SwiftCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<BookBankInfo>(entity =>
            {
                entity.HasKey(e => new { e.BookID, e.RCompanyID, e.CompanyID });

                entity.Property(e => e.BookID).HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.AccGroup)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AcctType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("1.เงินฝากออมทรัพย์ (Saving Account)\r\n2.เงินฝากประจำ (Fixed Deposit Account)\r\n3.เงินฝากกระแสรายวัน (Current Account)");

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasComment("ชื่อธนาคาร มาจาก MasterType");

                entity.Property(e => e.BookDesc)
                    .HasMaxLength(120)
                    .HasComment("ชื่อธนาคาร มาจาก MasterType");

                entity.Property(e => e.BookNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("เลขที่บัญชี");

                entity.Property(e => e.BookOwner)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RefID).HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุการวางบิล");

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.UploadTemplateID).HasMaxLength(30);
            });

            modelBuilder.Entity<CalenWeekName>(entity =>
            {
                entity.Property(e => e.DayWeekID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("MastypeTypeLine : FIX INCOME TYPE");

                entity.Property(e => e.DayWeekTH)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("MastypeTypeLine : FIX INCOME TYPE");
            });

            modelBuilder.Entity<CompanyInfo>(entity =>
            {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID });

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasComment("Company+Brn ");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrFull2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTanon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ถนน");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BrnCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("CompanyType");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsWH).HasComment("เป็นศูนย์กระจายพัสดุ");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.NameEn1)
                    .HasMaxLength(150)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.NameEn2)
                    .HasMaxLength(150)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PrintHeader1).HasMaxLength(800);

                entity.Property(e => e.PrintHeader2).HasMaxLength(800);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุลูกค้า");

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุลูกค้า");

                entity.Property(e => e.SalePersonID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxCalType)
                    .HasMaxLength(50)
                    .HasComment("Exclude / Include");

                entity.Property(e => e.TaxGroupP).HasMaxLength(50);

                entity.Property(e => e.TaxGroupS).HasMaxLength(50);

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'HQ')")
                    .HasComment("GROUP/COMPANY/BRANCH");
            });

            modelBuilder.Entity<Config>(entity =>
            {
                entity.Property(e => e.ConfigID).HasMaxLength(30);

                entity.Property(e => e.ConfigName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ValueNumber1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ValueNumber2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ValueString1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValueString2)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CreditTerm>(entity =>
            {
                entity.Property(e => e.AccType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.TermDesc)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.TermID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UseIn)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<CurrencyInfo>(entity =>
            {
                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.CurrencyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DateRate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Symbol).HasMaxLength(50);

                entity.Property(e => e.TodayRate).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<CustomerBranch>(entity =>
            {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.CustomerID, e.BrnCode });

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerID).HasMaxLength(30);

                entity.Property(e => e.BrnCode).HasMaxLength(10);

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.BankCode).HasMaxLength(30);

                entity.Property(e => e.BillMemo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("EDIT เดิม = ContactPersonBill");

                entity.Property(e => e.BookIBankD)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BrnDesc)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Currency).HasMaxLength(30);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Geolocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("กลุ่มลูกค้า/ประเภทร้านค้า (TITLE) join MasterType : cust_group");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.Name3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.PaymentTermID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.PersonTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเภทบุคคล = นิติบุคคล/บุคคลธรรมดา");

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipMemo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("EDIT BillingRefDoc+BillingCondition");

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(N'HQ')")
                    .HasComment("HQ/BRN");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<CustomerInfo>(entity =>
            {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.CustomerID })
                    .HasName("PK_Customers");

                entity.HasIndex(e => e.CompanyID, "IX_M_Customers")
                    .HasFillFactor(90);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerID).HasMaxLength(50);

                entity.Property(e => e.AccID_Creditor).HasMaxLength(50);

                entity.Property(e => e.AccID_Debtor).HasMaxLength(50);

                entity.Property(e => e.AccID_Wht).HasMaxLength(50);

                entity.Property(e => e.Acc_Side)
                    .HasMaxLength(50)
                    .HasComment("Debtor / Creditor\r\nลูกค้า / ผู้ขาย");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.AreaID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankCode).HasMaxLength(50);

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BillContact)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("EDIT เดิม = ContactPersonBill");

                entity.Property(e => e.BillMemo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("EDIT BillingRefDoc+BillingCondition");

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookIBankID).HasMaxLength(50);

                entity.Property(e => e.BrnCode).HasMaxLength(10);

                entity.Property(e => e.BrnDesc).HasMaxLength(100);

                entity.Property(e => e.Building)
                    .HasMaxLength(200)
                    .HasComment("อาคาร");

                entity.Property(e => e.CardExpireDate).HasColumnType("datetime");

                entity.Property(e => e.CardIssue)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPerson).HasMaxLength(200);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FloorNo)
                    .HasMaxLength(100)
                    .HasComment("ชั้นที่");

                entity.Property(e => e.FullNameEn)
                    .IsRequired()
                    .HasMaxLength(401)
                    .HasComputedColumnSql("(([NameEN1]+' ')+[NameEN2])", false);

                entity.Property(e => e.FullNameTh)
                    .IsRequired()
                    .HasMaxLength(401)
                    .HasComputedColumnSql("(([NameTH1]+' ')+[NameTH2])", false);

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.Geolocation).HasMaxLength(150);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("กลุ่มลูกค้า/ประเภทร้านค้า (TITLE) join MasterType : cust_group");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lang).HasMaxLength(10);

                entity.Property(e => e.LineID).HasMaxLength(60);

                entity.Property(e => e.Marriage).HasMaxLength(60);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NameEn1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.NameEn2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.NameEn3)
                    .HasMaxLength(200)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.NameTh1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.NameTh2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.NameTh3)
                    .HasMaxLength(200)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.Nationality).HasMaxLength(60);

                entity.Property(e => e.Occupation).HasMaxLength(60);

                entity.Property(e => e.OrgType).HasMaxLength(50);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentGrade).HasMaxLength(10);

                entity.Property(e => e.PaymentMethod)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("NEW");

                entity.Property(e => e.PaymentTermID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.PersonTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเภทบุคคล = นิติบุคคล/บุคคลธรรมดา");

                entity.Property(e => e.Point).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ProductGroupID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("NEW");

                entity.Property(e => e.Race).HasMaxLength(60);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Road)
                    .HasMaxLength(200)
                    .HasComment("ถนน");

                entity.Property(e => e.RoomNo)
                    .HasMaxLength(100)
                    .HasComment("ห้องที่");

                entity.Property(e => e.SalePersonID).HasMaxLength(50);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Soi)
                    .HasMaxLength(200)
                    .HasComment("ตรอก/ซอย");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubGroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment(" join MasterType : cust_subgroup");

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxTypeID).HasMaxLength(30);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.TitleEn)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TitleTh)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'HQ')")
                    .HasComment("HQ/BRN");

                entity.Property(e => e.Village)
                    .HasMaxLength(200)
                    .HasComment("หมู่บ้าน");

                entity.Property(e => e.Yaek)
                    .HasMaxLength(200)
                    .HasComment("แยก");
            });

            modelBuilder.Entity<DashBoard>(entity =>
            {
                entity.Property(e => e.DashBoardID).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Page)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Url).HasMaxLength(100);
            });

            modelBuilder.Entity<DocPrint>(entity =>
            {
                entity.HasKey(e => new { e.RComID, e.ComID, e.DocID, e.LineNum, e.DocPrintID });

                entity.Property(e => e.RComID).HasMaxLength(30);

                entity.Property(e => e.ComID).HasMaxLength(30);

                entity.Property(e => e.DocID).HasMaxLength(50);

                entity.Property(e => e.DocPrintID).HasMaxLength(50);

                entity.Property(e => e.DocDescription)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.PrintBy)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.SubDocType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DocPrintInCom>(entity =>
            {
                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocPrintID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocTypeDesc)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<DocTypeInfo>(entity =>
            {
                entity.HasKey(e => new { e.DocTypeID, e.ParentID });

                entity.Property(e => e.DocTypeID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApplyToComLevel)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("Company Group/Compnay/Branch");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("This Status For which company");

                entity.Property(e => e.DigitRunning)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocCate)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocTypeCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Icon).HasMaxLength(200);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsAutoID)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PrefixNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RefID).HasMaxLength(30);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceTable).HasMaxLength(30);
            });

            modelBuilder.Entity<ExchangeRate>(entity =>
            {
                entity.HasKey(e => new { e.CompanyID, e.HomeCurrency, e.Currency, e.RateDate, e.RateType });

                entity.Property(e => e.CompanyID).HasMaxLength(30);

                entity.Property(e => e.HomeCurrency).HasMaxLength(30);

                entity.Property(e => e.Currency).HasMaxLength(30);

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateType).HasMaxLength(30);

                entity.Property(e => e.Bank)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 10)");
            });

            modelBuilder.Entity<IDGenerator>(entity =>
            {
                entity.HasKey(e => new { e.RComID, e.ComID, e.Prefix, e.Year, e.Month, e.MacNo, e.FuncID })
                    .HasName("PK_IdGenerator");

                entity.Property(e => e.RComID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Prefix).HasMaxLength(50);

                entity.Property(e => e.Year).HasMaxLength(4);

                entity.Property(e => e.Month).HasMaxLength(2);

                entity.Property(e => e.MacNo).HasMaxLength(30);

                entity.Property(e => e.FuncID).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LatestDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ItemBarcode>(entity =>
            {
                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(120);
            });

            modelBuilder.Entity<ItemInfo>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.ItemCode, e.RCompanyID, e.CompanyID })
                    .HasName("PK_Items");

                entity.Property(e => e.ItemID).HasMaxLength(50);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Company+Brn ");

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccID_Purchase).HasMaxLength(50);

                entity.Property(e => e.AccID_Sale).HasMaxLength(50);

                entity.Property(e => e.Acc_Side)
                    .HasMaxLength(50)
                    .HasComment("SALE / PURCHASE\r\nขาย / ซื้อ");

                entity.Property(e => e.BrandID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CateID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Dimension).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Group1ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Group2ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Group3ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsKeepStock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Express Code");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StkUnitID).HasMaxLength(50);

                entity.Property(e => e.TaxGroupID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("");

                entity.Property(e => e.TaxTypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("ITEM / SERVICE / EXPENSE");

                entity.Property(e => e.UnitID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("NEW");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<Link>(entity =>
            {
                entity.Property(e => e.AppLink).HasMaxLength(1000);

                entity.Property(e => e.AuthenType).HasMaxLength(100);

                entity.Property(e => e.BaseUrl).HasMaxLength(1000);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Domain).HasMaxLength(100);

                entity.Property(e => e.FileExtension).HasMaxLength(1000);

                entity.Property(e => e.FileName).HasMaxLength(1000);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.LinkName).HasMaxLength(50);

                entity.Property(e => e.LinkType).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(100);

                entity.Property(e => e.Port).HasMaxLength(50);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Token).HasMaxLength(100);

                entity.Property(e => e.Username).HasMaxLength(100);

                entity.Property(e => e.VirtualPath).HasMaxLength(1000);
            });

            modelBuilder.Entity<LocationInfo>(entity =>
            {
                entity.HasKey(e => new { e.LocID, e.RCompanyID, e.CompanyID })
                    .HasName("PK_Locations");

                entity.Property(e => e.LocID).HasMaxLength(30);

                entity.Property(e => e.RCompanyID).HasMaxLength(30);

                entity.Property(e => e.CompanyID).HasMaxLength(30);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LocTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("MAIN/SUB");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("MAIN/SUB");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<LogInCrossAppReq>(entity =>
            {
                entity.HasKey(e => e.ReqID);

                entity.Property(e => e.ReqID).HasMaxLength(150);

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CallBackUrl)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ExpiryTime).HasColumnType("datetime");

                entity.Property(e => e.ForwardToUrl)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReqTime).HasColumnType("datetime");

                entity.Property(e => e.UseTime).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<LoginLog>(entity =>
            {
                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Fuction).HasMaxLength(50);

                entity.Property(e => e.IP)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LoginTime).HasColumnType("datetime");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.RequestTime).HasColumnType("datetime");

                entity.Property(e => e.SessionID).HasMaxLength(100);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("SUCCESS,FAIL");

                entity.Property(e => e.Token).HasMaxLength(100);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<LoginSessionLog>(entity =>
            {
                entity.HasKey(e => e.LogInID);

                entity.Property(e => e.LogInID).HasMaxLength(150);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Data).IsRequired();

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastReqDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<MasterTypeHead>(entity =>
            {
                entity.HasKey(e => e.MasterTypeID)
                    .HasName("PK_MasterTypeHeader");

                entity.Property(e => e.MasterTypeID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UseFor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserAddNew).HasComment("ให้ User สามารถเพิ่มเองได้");
            });

            modelBuilder.Entity<MasterTypeLine>(entity =>
            {
                entity.Property(e => e.Description1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Description2)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description3)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description4)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsSysData).HasDefaultValueSql("((0))");

                entity.Property(e => e.MasterTypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentValue)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefIDL2).HasMaxLength(50);

                entity.Property(e => e.RefIDL3).HasMaxLength(50);

                entity.Property(e => e.ValueNUM).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ValueTXT)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OINVHead>(entity =>
            {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.INVID });

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasComment("สาขา");

                entity.Property(e => e.INVID).HasMaxLength(50);

                entity.Property(e => e.AccGroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseNetTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ราคาสุทธิก่อนส่วนลด");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillToCustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BillingDate).HasColumnType("datetime");

                entity.Property(e => e.BillingID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustAddr1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustAddr2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustBrnID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustBrnName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.INVPendingAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsReverse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิก่อน VAT");

                entity.Property(e => e.NetTotalAmtIncVat)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิรวม VAT");

                entity.Property(e => e.NetTotalVatAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("มูลค่า VAT");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PayDueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.Period).HasMaxLength(50);

                entity.Property(e => e.PrintDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyOrder)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyShip)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.RCAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RCID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateExchange)
                    .HasColumnType("decimal(18, 12)")
                    .HasComment("0");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RemarkRC).HasMaxLength(1000);

                entity.Property(e => e.Remark_Delete).HasMaxLength(1000);

                entity.Property(e => e.SODate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SOInfo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipFrLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipFrSubLocID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TermID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OINVLine>(entity =>
            {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.INVID, e.LineNum });

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.INVID).HasMaxLength(50);

                entity.Property(e => e.BaseTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ราคาสุทธิก่อนส่วนลด");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsStockItem)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemAccGroupID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemCateID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemGroupID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemTypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemTypeName)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Location in ACCPAC");

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OntopDiscAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("มูลค่าส่วนลดท้ายบิล");

                entity.Property(e => e.OntopDiscPer)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("เปอร์เซ็นต์ส่วนลดท้ายบิล");

                entity.Property(e => e.POID).HasMaxLength(50);

                entity.Property(e => e.Packaging)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("CANCEL");

                entity.Property(e => e.PackagingNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PointID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("NONE / WEIGHT / DIRECT");

                entity.Property(e => e.PointName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasComment("NONE / WEIGHT / DIRECT");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PriceIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyOrder)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyShip)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SOLineNum).HasComment("วันที่ขนส่ง");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipLineNum).HasComment("วันที่ขนส่ง");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WUnit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<OPaymentType>(entity =>
            {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.Code });

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.AccID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DRCR)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ORCPayLine>(entity =>
            {
                entity.HasIndex(e => new { e.RCID, e.LineNum, e.CompanyID, e.RCompanyID }, "IX_ORCPayLine")
                    .HasFillFactor(90);

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่หน้าเช็ค");

                entity.Property(e => e.ChqDepositDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ฝากเช็ค");

                entity.Property(e => e.ChqExpired).HasColumnType("datetime");

                entity.Property(e => e.ChqReturnDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่คืนเช็ค");

                entity.Property(e => e.ChqReturnReason).HasMaxLength(30);

                entity.Property(e => e.ClearingDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่โอนเงิน / วันที่หน้าเช็ค / วันที่รับเงินสด / กรณีโอนจ่ายสดรูดบัตรจะเป็นวันที่เดียวกับวันที่ PayDate");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.CompletedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustBankBranch)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("สาขาธนาคารหน้าเช็ค / บช ที่ลูกค้าโอน");

                entity.Property(e => e.CustBankCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Join กับตาราง M_Bank");

                entity.Property(e => e.CustBankName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("สาขาธนาคารหน้าเช็ค / บช ที่ลูกค้าโอน");

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("มาจาก BranchID ในตาราง CustomerBranch");

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(N'SALE/FIN')");

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Default ให้เป็นค่าว่างไว้ก่อน");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PayAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนเงินสดที่รับ / จำนวนเงินโอน / ตัวเลขหน้า chq");

                entity.Property(e => e.PayBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayByCate)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayByDesc)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayByType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ชำระ / รับที่รับเช็ด / วันที่โอน");

                entity.Property(e => e.PayMemo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayToBankCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PayToBookID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PayToBookName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PaymentRefNo)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasComment("เลขที่ CHQ / เลขบัญชีที่โอน");

                entity.Property(e => e.RCDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.RCID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Join MasterType");

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateExchange)
                    .HasColumnType("decimal(18, 12)")
                    .HasComment("0");

                entity.Property(e => e.StatementDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขึ้นเงินได้ (มียอดเข้า Statement / เงินสามารถใช้ได้)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Join MasterType");

                entity.Property(e => e.TaxBaseAmt)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("ฐานภาษีหัก ณ ที่จ่าย");

                entity.Property(e => e.TaxRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("อัตราหัก ณ ที่จ่าย");

                entity.Property(e => e.WHTDesc)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขอ้างอิงหัก ณ ทีจ่าย");

                entity.Property(e => e.WHTRefNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขอ้างอิงหัก ณ ทีจ่าย");
            });

            modelBuilder.Entity<OSOHead>(entity =>
            {
                entity.HasKey(e => new { e.OrdID, e.RComID, e.ComID })
                    .HasName("PK_OSaleOrderHead_1");

                entity.Property(e => e.OrdID).HasMaxLength(50);

                entity.Property(e => e.RComID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.ComID)
                    .HasMaxLength(50)
                    .HasComment("สาขา");

                entity.Property(e => e.AccGroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AmtInvoice).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AmtInvoicePending).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AmtShipPending).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BaseNetTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ราคาสุทธิก่อนส่วนลด");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillToCustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustAddr1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustAddr2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustBrnID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustBrnName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustEmail)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustMobile)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVDate).HasColumnType("datetime");

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิก่อน VAT");

                entity.Property(e => e.NetTotalAmtIncVat)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิรวม VAT");

                entity.Property(e => e.NetTotalVatAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("มูลค่า VAT");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrdDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PayDueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.PrintDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyInvoice)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyInvoicePending)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyReturn)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyShip)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyShipPending)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateExchange)
                    .HasColumnType("decimal(18, 12)")
                    .HasComment("0");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipFrLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipFrSubLocID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TermID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OSOLine>(entity =>
            {
                entity.HasKey(e => new { e.OrdID, e.LineNum, e.RComID, e.ComID })
                    .HasName("PK_OSaleOrderLine_1");

                entity.Property(e => e.OrdID).HasMaxLength(50);

                entity.Property(e => e.RComID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.ComID)
                    .HasMaxLength(50)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.AmtInvoicePending).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AmtShipPending).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BaseTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ราคาสุทธิก่อนส่วนลด");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsStockItem)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemAccGroupID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemCateID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemGroupID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemTypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemTypeName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Location in ACCPAC");

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OntopDiscAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("มูลค่าส่วนลดท้ายบิล");

                entity.Property(e => e.OntopDiscPer)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("เปอร์เซ็นต์ส่วนลดท้ายบิล");

                entity.Property(e => e.OrdDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Packaging)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("CANCEL");

                entity.Property(e => e.PackagingNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PointID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("NONE / WEIGHT / DIRECT");

                entity.Property(e => e.PointName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasComment("NONE / WEIGHT / DIRECT");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PriceIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyInvoice)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyInvoicePending)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyShip)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyShipPending)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipLineNum).HasComment("วันที่ขนส่ง");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WUnit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<TaxInfo>(entity =>
            {
                entity.HasKey(e => new { e.RComID, e.TaxTypeID, e.Type })
                    .HasName("PK_TaxInfo_1");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.TaxTypeID).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("SALE / PURCHASE");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.TaxName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<ThaiPostAddress>(entity =>
            {
                entity.Property(e => e.BORDER_NAME).HasMaxLength(80);

                entity.Property(e => e.BORDER_POSTAL_CODE).HasMaxLength(30);

                entity.Property(e => e.DISTRICT_NAME).HasMaxLength(80);

                entity.Property(e => e.DISTRICT_POSTAL_CODE).HasMaxLength(30);

                entity.Property(e => e.PROVINCE_NAME).HasMaxLength(80);

                entity.Property(e => e.REGION_ID).HasMaxLength(30);
            });

            modelBuilder.Entity<TransactionLog>(entity =>
            {
                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.ActionType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.ChangeValue)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("สาขา");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("สาขา");

                entity.Property(e => e.TableID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.TransactionID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UploadLog>(entity =>
            {
                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FucnID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.UPloadID)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.Property(e => e.UploadResult)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserGroupInBoard>(entity =>
            {
                entity.HasKey(e => new { e.RComID, e.UserGroupID, e.DashBoardID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.DashBoardID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserGroupInCompany>(entity =>
            {
                entity.HasKey(e => new { e.RCompanyID, e.UserGroupID, e.CompanyID });

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserGroupInDocStep>(entity =>
            {
                entity.Property(e => e.StepID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.UserGroupID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserGroupInfo>(entity =>
            {
                entity.HasKey(e => new { e.RComID, e.UserGroupID })
                    .HasName("PK_UserGroup");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LineToken)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserGroupPermission>(entity =>
            {
                entity.HasKey(e => new { e.RComID, e.UserGroupID, e.MenuID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.MenuID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserInBoard>(entity =>
            {
                entity.HasKey(e => e.Username);

                entity.Property(e => e.Username).HasMaxLength(30);

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserInCompany>(entity =>
            {
                entity.HasKey(e => new { e.UserName, e.RCompanyID, e.CompanyID });

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserInDocStep>(entity =>
            {
                entity.Property(e => e.StepID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserInGroup>(entity =>
            {
                entity.HasKey(e => new { e.RComID, e.UserName, e.UserGroupID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserInRCom>(entity =>
            {
                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<UserInfo>(entity =>
            {
                entity.HasKey(e => e.Username);

                entity.Property(e => e.Username).HasMaxLength(30);

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuthenType)
                    .HasMaxLength(20)
                    .HasComment("DB/LDAP");

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(50);

                entity.Property(e => e.DefaultMenu).HasMaxLength(20);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101)
                    .HasComputedColumnSql("(([FirstName]+' ')+[LastName])", false);

                entity.Property(e => e.FullName_En)
                    .HasMaxLength(101)
                    .HasComputedColumnSql("(([FirstName_En]+' ')+[LastName_En])", false);

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsNewUser)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.JobLevel).HasMaxLength(50);

                entity.Property(e => e.JobStartDate)
                    .HasColumnType("datetime")
                    .HasComment("");

                entity.Property(e => e.JobType).HasMaxLength(50);

                entity.Property(e => e.JwtRefreshToken).HasMaxLength(300);

                entity.Property(e => e.JwtToken).HasMaxLength(300);

                entity.Property(e => e.JwtTokenExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.RelateID)
                    .HasMaxLength(30)
                    .HasComment("VENDORID / CUSTOMERID");

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.SubDepartmentID).HasMaxLength(50);

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.Title_En).HasMaxLength(50);

                entity.Property(e => e.UseTimeStamp).HasDefaultValueSql("((1))");

                entity.Property(e => e.UserType)
                    .HasMaxLength(20)
                    .HasComment("USER / CUSTOMER /VENDOR");
            });

            modelBuilder.Entity<UserLogInHistory>(entity =>
            {
                entity.HasIndex(e => e.Username, "IX_UserLogInHistory")
                    .HasFillFactor(90);

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IP).HasMaxLength(30);

                entity.Property(e => e.LogInDate).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserMenu>(entity =>
            {
                entity.HasKey(e => e.MenuID);

                entity.Property(e => e.MenuID).HasMaxLength(30);

                entity.Property(e => e.App)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CaptionCreatePermission).HasMaxLength(200);

                entity.Property(e => e.CaptionDeletePermission).HasMaxLength(200);

                entity.Property(e => e.CaptionEditPermission).HasMaxLength(200);

                entity.Property(e => e.CaptionOpenPermission).HasMaxLength(200);

                entity.Property(e => e.CaptionPrintPermission).HasMaxLength(200);

                entity.Property(e => e.Desc1).HasMaxLength(200);

                entity.Property(e => e.Desc2).HasMaxLength(200);

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.GroupSort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsToggleGroupmenu)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MenuCode).HasMaxLength(30);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentID).HasMaxLength(30);

                entity.Property(e => e.Remark).HasMaxLength(150);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.SubGroupSort).HasDefaultValueSql("((1))");

                entity.Property(e => e.TypeID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<UserPermission>(entity =>
            {
                entity.HasKey(e => new { e.RComID, e.Username, e.MenuID })
                    .HasName("PK_UserPermission_1");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);

                entity.Property(e => e.MenuID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<V_Query>(entity =>
            {
                entity.HasKey(e => e.QueryID);

                entity.Property(e => e.QueryID).HasMaxLength(50);

                entity.Property(e => e.Command).IsRequired();

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(600);
            });

            modelBuilder.Entity<XFileLocation>(entity =>
            {
                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DBName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.DBServer)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.JwtRefreshToken).HasMaxLength(300);

                entity.Property(e => e.JwtToken).HasMaxLength(300);

                entity.Property(e => e.JwtTokenExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.LoginName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LoginPass)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PathType)
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(N'URL / FILEPATH')");

                entity.Property(e => e.RootPath).HasMaxLength(200);

                entity.Property(e => e.RootPathID).HasMaxLength(40);

                entity.Property(e => e.RootUrl).HasMaxLength(200);

                entity.Property(e => e.RootUrlPublic).HasMaxLength(200);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<XFilesRef>(entity =>
            {
                entity.Property(e => e.AppID).HasMaxLength(30);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DBName).HasMaxLength(80);

                entity.Property(e => e.DBServer).HasMaxLength(120);

                entity.Property(e => e.DocCate)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("TASK / DOC");

                entity.Property(e => e.DocID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasComment("TASK / DOC");

                entity.Property(e => e.FileExt).HasMaxLength(20);

                entity.Property(e => e.FileID)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.FilePath).HasMaxLength(1000);

                entity.Property(e => e.FileType)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasComment("IMG / FILE");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OriginFileExt).HasMaxLength(20);

                entity.Property(e => e.OriginFileName).HasMaxLength(200);

                entity.Property(e => e.OriginFilePath).HasMaxLength(1000);

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.RootPathID).HasMaxLength(40);

                entity.Property(e => e.SourceTable)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Ref to table source");

                entity.Property(e => e.SubUrl).HasMaxLength(200);
            });

            modelBuilder.Entity<a_amphoe>(entity =>
            {
                entity.Property(e => e.acode).HasMaxLength(255);

                entity.Property(e => e.aname).HasMaxLength(1000);

                entity.Property(e => e.pcode).HasMaxLength(255);

                entity.Property(e => e.pname).HasMaxLength(1000);
            });

            modelBuilder.Entity<a_community>(entity =>
            {
                entity.Property(e => e.acode).HasMaxLength(1000);

                entity.Property(e => e.aname).HasMaxLength(255);

                entity.Property(e => e.apt_code).HasMaxLength(255);

                entity.Property(e => e.apt_name).HasMaxLength(1000);

                entity.Property(e => e.apt_type).HasMaxLength(255);

                entity.Property(e => e.commu_name).HasMaxLength(1000);

                entity.Property(e => e.last_modified).HasColumnType("datetime");

                entity.Property(e => e.pcode).HasMaxLength(1000);

                entity.Property(e => e.pname).HasMaxLength(255);
            });

            modelBuilder.Entity<a_mm>(entity =>
            {
                entity.Property(e => e.acode).HasMaxLength(255);

                entity.Property(e => e.aname).HasMaxLength(1000);

                entity.Property(e => e.comm_code).HasMaxLength(255);

                entity.Property(e => e.comm_name).HasMaxLength(1000);

                entity.Property(e => e.comm_status).HasMaxLength(255);

                entity.Property(e => e.lat).HasMaxLength(255);

                entity.Property(e => e.lcode).HasMaxLength(255);

                entity.Property(e => e.lname).HasMaxLength(1000);

                entity.Property(e => e.log_).HasMaxLength(255);

                entity.Property(e => e.long_).HasMaxLength(255);

                entity.Property(e => e.ltype).HasMaxLength(255);

                entity.Property(e => e.mcode).HasMaxLength(255);

                entity.Property(e => e.mname).HasMaxLength(1000);

                entity.Property(e => e.mno).HasMaxLength(255);

                entity.Property(e => e.mstatus).HasMaxLength(255);

                entity.Property(e => e.mtype).HasMaxLength(255);

                entity.Property(e => e.pcode).HasMaxLength(255);

                entity.Property(e => e.pname).HasMaxLength(1000);

                entity.Property(e => e.rcode).HasMaxLength(255);

                entity.Property(e => e.remark).HasMaxLength(255);

                entity.Property(e => e.rname).HasMaxLength(1000);

                entity.Property(e => e.tcode).HasMaxLength(255);

                entity.Property(e => e.tname).HasMaxLength(1000);

                entity.Property(e => e.tqm).HasMaxLength(255);
            });

            modelBuilder.Entity<a_province>(entity =>
            {
                entity.Property(e => e.pcode).HasMaxLength(255);

                entity.Property(e => e.pname).HasMaxLength(1000);

                entity.Property(e => e.type_p).HasMaxLength(255);

                entity.Property(e => e.type_soilder).HasMaxLength(255);
            });

            modelBuilder.Entity<a_tambol>(entity =>
            {
                entity.Property(e => e.acode).HasMaxLength(255);

                entity.Property(e => e.aname).HasMaxLength(1000);

                entity.Property(e => e.pcode).HasMaxLength(255);

                entity.Property(e => e.pname).HasMaxLength(1000);

                entity.Property(e => e.tcode).HasMaxLength(255);

                entity.Property(e => e.tname).HasMaxLength(1000);
            });

            modelBuilder.Entity<mail_sender>(entity =>
            {
                entity.Property(e => e.fucntion).HasMaxLength(50);

                entity.Property(e => e.mail_user).HasMaxLength(500);

                entity.Property(e => e.password).HasMaxLength(100);

                entity.Property(e => e.remark).HasMaxLength(1000);

                entity.Property(e => e.sender_name).HasMaxLength(1000);

                entity.Property(e => e.smtp).HasMaxLength(100);
            });

            modelBuilder.Entity<vw_CompanyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CompanyInfo");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrFull2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTanon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BrnCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ComCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NameEn1).HasMaxLength(150);

                entity.Property(e => e.NameEn2).HasMaxLength(150);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PrintHeader1).HasMaxLength(800);

                entity.Property(e => e.PrintHeader2).HasMaxLength(800);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SalePersonID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TaxCalType).HasMaxLength(50);

                entity.Property(e => e.TaxGroupP).HasMaxLength(50);

                entity.Property(e => e.TaxGroupPValue).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TaxGroupS).HasMaxLength(50);

                entity.Property(e => e.TaxGroupSValue).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeName).HasMaxLength(256);
            });

            modelBuilder.Entity<vw_CustomerInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerInfo");

                entity.Property(e => e.AccID_Creditor).HasMaxLength(50);

                entity.Property(e => e.AccID_Debtor).HasMaxLength(50);

                entity.Property(e => e.AccID_Wht).HasMaxLength(50);

                entity.Property(e => e.Acc_Side).HasMaxLength(50);

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AreaID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BankCode).HasMaxLength(50);

                entity.Property(e => e.BankName).HasMaxLength(100);

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BillContact)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BillMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BrnCode).HasMaxLength(10);

                entity.Property(e => e.BrnDesc).HasMaxLength(100);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContactPerson).HasMaxLength(200);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CustAge)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FullNameEn)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.FullNameTh)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GenderName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Geolocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Lang)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Line)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.LineID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Marriage)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NameDisplay)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.NameEn1)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NameEn2)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NameEn3)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NameTh1)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NameTh2)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NameTh3)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NameTitleTh)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Nationality)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Occupation)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.OrgType).HasMaxLength(50);

                entity.Property(e => e.OrgTypeName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentGrade).HasMaxLength(10);

                entity.Property(e => e.PaymentMethod)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentTermID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.PaymentTermValue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PersonTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Point).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ProductGroupID).HasMaxLength(30);

                entity.Property(e => e.RCompany)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Race)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SalePersonID).HasMaxLength(50);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubGroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubGroupName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TaxTypeID).HasMaxLength(30);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TitleEN)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TitleTh)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<vw_DocTypeInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DocTypeInfo");

                entity.Property(e => e.ApplyToComLevel)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ApplyToComLevelName).HasMaxLength(256);

                entity.Property(e => e.ComanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DigitRunning)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocCate)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocTypeCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PrefixNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<vw_EmpInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpInfo");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AuthenType)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(50);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.FullName_En).HasMaxLength(101);

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.JobLevel).HasMaxLength(50);

                entity.Property(e => e.JobStartDate).HasColumnType("datetime");

                entity.Property(e => e.JobType).HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RelateID).HasMaxLength(30);

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.UserType).HasMaxLength(20);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.WorkAge).HasMaxLength(4000);

                entity.Property(e => e.XStatus)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_ItemInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemInfo");

                entity.Property(e => e.AccID_Purchase).HasMaxLength(50);

                entity.Property(e => e.AccID_Sale).HasMaxLength(50);

                entity.Property(e => e.BrandID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CateID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CateName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Dimension).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Group1ID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Group1Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Group2ID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Group2Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Group3ID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Group3Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.NameDisplay)
                    .IsRequired()
                    .HasMaxLength(403);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StkUnitID).HasMaxLength(50);

                entity.Property(e => e.TaxGroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TaxGroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TaxTypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.UnitID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorID).HasMaxLength(50);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<vw_ListDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ListDate");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DayWeek).HasMaxLength(4000);
            });

            modelBuilder.Entity<vw_LocationInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LocationInfo");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LocName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LocTypeName).HasMaxLength(256);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.XStatus)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_OINVHead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_OINVHead");

                entity.Property(e => e.AccGroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseNetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillToCustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BillingDate).HasColumnType("datetime");

                entity.Property(e => e.BillingID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CustAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CustBrnID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustBrnName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocTypeName)
                    .IsRequired()
                    .HasMaxLength(103);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.INVDate).HasColumnType("datetime");

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.INVPendingAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalVatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PayDueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyOrder).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyShip).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCDate).HasColumnType("datetime");

                entity.Property(e => e.RCID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateExchange).HasColumnType("decimal(18, 12)");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark_Delete).HasMaxLength(1000);

                entity.Property(e => e.SODate).HasColumnType("datetime");

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SOInfo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipDate).HasColumnType("datetime");

                entity.Property(e => e.ShipFrLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipFrSubLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TermID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_OINVLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_OINVLine");

                entity.Property(e => e.BaseTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.DiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.INVDate).HasColumnType("datetime");

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemAccGroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemCateID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemGroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ItemTypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemTypeName).HasMaxLength(60);

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Packaging)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PackagingNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PointID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PointName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PriceIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyOrder).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyShip).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCDate).HasColumnType("datetime");

                entity.Property(e => e.RCID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.WUnit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<vw_OSOHead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_OSOHead");

                entity.Property(e => e.AccGroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AmtInvoice).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AmtInvoicePending).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AmtShipPending).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BaseNetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillToCustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CustAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CustBrnID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustBrnName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustEmail).HasMaxLength(100);

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustMobile).HasMaxLength(100);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.INVDate).HasColumnType("datetime");

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalVatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrdDate).HasColumnType("datetime");

                entity.Property(e => e.OrdID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PayDueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyInvoice).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyInvoicePending).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyReturn).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyShip).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyShipPending).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateExchange).HasColumnType("decimal(18, 12)");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipDate).HasColumnType("datetime");

                entity.Property(e => e.ShipFrLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipFrSubLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TermID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_PermissionGroupInMenu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PermissionGroupInMenu");

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.MenuCode).HasMaxLength(30);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.UserGroupId)
                    .IsRequired()
                    .HasMaxLength(50);
            });
          

            modelBuilder.Entity<vw_PermissionInBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInBoard");

                entity.Property(e => e.BoardName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BoardPage)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BoardUrl).HasMaxLength(100);

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });
     modelBuilder.Entity<vw_PermissionInLoc>(entity =>
            {
                entity.HasKey(e => e.RN);


            });
            modelBuilder.Entity<vw_PermissionInCompany>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInCompany");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_PermissionInMenu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInMenu");

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CaptionCreatePermission).HasMaxLength(200);

                entity.Property(e => e.CaptionDeletePermission).HasMaxLength(200);

                entity.Property(e => e.CaptionEditPermission).HasMaxLength(200);

                entity.Property(e => e.CaptionOpenPermission).HasMaxLength(200);

                entity.Property(e => e.CaptionPrintPermission).HasMaxLength(200);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.MenuCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuDesc1)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.MenuDesc2)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MenuType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.TypeID).HasMaxLength(30);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_ThaiPostAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ThaiPostAddress");

                entity.Property(e => e.BORDER_NAME).HasMaxLength(80);

                entity.Property(e => e.DISTRICT_NAME).HasMaxLength(80);

                entity.Property(e => e.DISTRICT_POSTAL_CODE).HasMaxLength(30);

                entity.Property(e => e.FULLADDR).HasMaxLength(282);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.PROVINCE_NAME).HasMaxLength(80);
            });

            modelBuilder.Entity<vw_UIC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UIC");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UIM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UIM");

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UserGroupInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserGroupInfo");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserGroupID)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UserInBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserInBoard");

                entity.Property(e => e.BoardUrl).HasMaxLength(100);

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Page)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserInGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserInGroup");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserGroupId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserInRCom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserInRCom");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(50);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName_En).HasMaxLength(101);

                entity.Property(e => e.Gender).HasMaxLength(30);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.JobStartDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.RComName)
                    .IsRequired()
                    .HasMaxLength(301);

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.UserFullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UserInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserInfo");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AuthenType)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(50);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.FullName_En).HasMaxLength(101);

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.JobLevel).HasMaxLength(50);

                entity.Property(e => e.JobStartDate).HasColumnType("datetime");

                entity.Property(e => e.JobType).HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.RelateID).HasMaxLength(30);

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.SubDepartmentID).HasMaxLength(50);

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.UserType).HasMaxLength(20);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.WorkAge).HasMaxLength(4000);

                entity.Property(e => e.XStatus)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_UserInfoMini>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserInfoMini");

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.FullName_En).HasMaxLength(101);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_XFilesRef>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_XFilesRef");

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DBName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.DBServer)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.DocCate)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FileExt).HasMaxLength(20);

                entity.Property(e => e.FileID)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.FilePath).HasMaxLength(1000);

                entity.Property(e => e.FileType)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.FullPathAndFile).HasMaxLength(1422);

                entity.Property(e => e.FullUrlAndFile).HasMaxLength(629);

                entity.Property(e => e.JwtRefreshToken).HasMaxLength(300);

                entity.Property(e => e.JwtToken).HasMaxLength(300);

                entity.Property(e => e.JwtTokenExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OriginFileExt).HasMaxLength(20);

                entity.Property(e => e.OriginFileName).HasMaxLength(200);

                entity.Property(e => e.OriginFilePath).HasMaxLength(1000);

                entity.Property(e => e.PathType).HasMaxLength(40);

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.RootPath).HasMaxLength(200);

                entity.Property(e => e.RootPathID).HasMaxLength(40);

                entity.Property(e => e.RootUrl).HasMaxLength(200);

                entity.Property(e => e.RootUrlPublic).HasMaxLength(200);

                entity.Property(e => e.SourceTable)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubUrl).HasMaxLength(200);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}