@page "/Order/SO/ORDERPrintList"

@using Robot.Data.DA.HR;
@using Robot.Data.ML;
@using System.Text.Json;
@using Robot.PrintOut.OMS.SO101;
@using static Robot.Data.ML.I_Result;
@using static Robot.Data.DA.Order.SO.SOService;


<style>
    .rowexpire {
        color: red;
    }

    thead tr {
        background-color: #f3f3f3 !important;
        color: black !important;
        text-align: left !important;
    }

    th, td {
        padding: 12px 15px !important;
    }

    tbody tr:nth-of-type(even) {
        background-color: #f3f3f3 !important;
    }

    tbody tr:last-of-type {
        border-bottom: 2px solid #08a1a1 !important;
    }

    .table-active.bg-primary {
        background-color: #08a1a1 !important;
        color: #ffffff !important;
    }

</style>


<div class="row pt-3">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col-md-3">
                        <h4>
                            <a @onclick="Back">
                                <i class="fas fa-reply-all"></i>&nbsp;@menuCaption

                            </a>
                        </h4>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12 pt-4">
                        <div class="row">
                            <div class="col-md-2 col-12 pt-1">
                                <span>วันที่ยกเลิกตั้งแต่</span>
                                <TelerikDatePicker @bind-Value="@Filter.DateFrom"
                                                   Format="dd/MM/yyyy">
                                </TelerikDatePicker>
                            </div>
                            <div class="col-md-2 col-12 pt-1">
                                <span>ถึงวันที่</span>
                                <TelerikDatePicker @bind-Value="@Filter.DateTo"
                                                   Format="dd/MM/yyyy">
                                </TelerikDatePicker>
                            </div>

                            <div class="col-md-3 pt-4">
                                <div class="input-group">
                                    <input type="text" class="form-control form-control-sm" placeholder="คำค้นหา" @bind-value="@Filter.SearchText">
                                    <TelerikButton @onclick="@SearchAction" ThemeColor="@(ThemeConstants.Button.ThemeColor.Info)">ค้นหา</TelerikButton>
                                </div>
                            </div>

                            <div class="col-2 pt-4 text-start">
                                <div class="mt-sm">
                                    <TelerikCheckBox Id="chkIsActive" @bind-Value="@Filter.ShowIsPrint"></TelerikCheckBox>
                                    <label for="chkIsActive">แสดงที่ปริ้นแล้ว</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="row pt-1">
    <div class="col-md-12">
        <TelerikGrid Data=@DocList
                     Pageable="true"
                     Class="small"
                     Groupable="true"
                     Sortable="true"
                     Resizable="true"
                     Reorderable="true"
                     PageSize="20"
                     OnRowRender="@OnRowRenderColor"
                     Navigable="true">
            <GridAggregates>
                <GridAggregate Field=@nameof(vw_OSOHead.SalesName) Aggregate="@GridAggregateType.Count" />
                <GridAggregate Field=@nameof(vw_OSOHead.BaseNetTotalAmtIncVat) Aggregate="@GridAggregateType.Sum" />
            </GridAggregates>
            <GridColumns>


                <GridColumn Field="@nameof(vw_OSOHead.OrdID)" Title="ปริ้น" Editable="false" Width="80px">
                    <Template>
                        @{
                            var data = context as vw_OSOHead;
                            <button class="btn btn-sm" @onclick="@(() => OpenPrintORDER(data))">
                                <i class="fa-solid fa-print" style="font-size:20px"></i>
                            </button>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(vw_OSOHead.SalesName) Title="เซล" Width="180px" />
                <GridColumn Field=@nameof(vw_OSOHead.OrdID) Title="เลขออเดอร์" Width="150px" />
                <GridColumn Field=@nameof(vw_OSOHead.OrdDate) Title="วันที่" DisplayFormat="{0:dd/MM/yyyy}" Width="150px" />
                <GridColumn Field=@nameof(vw_OSOHead.CustName) Title="ชื่อลูกค้า" Width="150px" />
                <GridColumn Field=@nameof(vw_OSOHead.NetTotalAmtIncVat) Title="ยอดรวมVat" DisplayFormat="{0:N2}" Width="150px" />
                <GridColumn Field=@nameof(vw_OSOHead.Status) Title="สถานะ" Width="150px" />
                <GridColumn Field=@nameof(vw_OSOHead.ItemDiscAmtIncVat) Title="ส่วนลดทั้งหมด" DisplayFormat="{0:N2}" Width="150px" />
                <GridColumn Field=@nameof(vw_OSOHead.IsPrint) Title="สถานะการปริ้น" Width="150px" />
                <GridColumn Field=@nameof(vw_OSOHead.PrintDate) Title="วันที่ปริ้น" Width="150px" DisplayFormat="{0:dd/MM/yyyy}" />
                <GridColumn Field=@nameof(vw_OSOHead.BaseNetTotalAmtIncVat) Title="ยอดรวม" DisplayFormat="{0:N2}" Width="150px" />
                <GridColumn Field=@nameof(vw_OSOHead.ModifiedBy) Title="ยกเลิกโดย" DisplayFormat="{0:dd/MM/yyyy  HH:mm:ss}" Width="180px" />
                <GridColumn Field=@nameof(vw_OSOHead.ModifiedDate) Title="วันที่ยกเลิก" Width="150px" />


            </GridColumns>
        </TelerikGrid>


    </div>
</div>

<TelerikWindow Class="telerik-pop" @bind-State="@State" Centered="true"
@bind-Visible=@isPopupPrint Modal="true">
    <WindowTitle>
        <strong>Print</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <Robot.PrintOut.OMSView.XPreview printid="@printid" export="1"></Robot.PrintOut.OMSView.XPreview>
    </WindowContent>
</TelerikWindow>

<div class="demo-container">
    <TelerikLoaderContainer Size="@ThemeConstants.Loader.Size.Large"
                            Text="ระบบกำลังประมวลผล ....."
                            Visible="@isLoading"
                            LoaderPosition="@LoaderPosition.End"></TelerikLoaderContainer>
</div>
@code {
    [Parameter] public string topic { get; set; } = "";
    bool isLoading = true;
    bool isShowNew = true;
    bool collapse1Visible = true;

    public WindowState State { get; set; } = WindowState.Maximized;
    public bool isPopupPrint { get; set; } = false;
    public string printid { get; set; }

    string menuCaption = "";
    string menuGroupCaption = "";
    I_SODocFiterSet Filter = SOService.NewFilterSet();
    List<vw_OSOHead> DocList = new List<vw_OSOHead>();
    protected override async Task OnInitializedAsync() {

        await Task.Run(LoadDropDownList);
        Filter = await Task.Run(() => _soService.GetSessionFiterSet());
        if (Filter == null) {
            Filter = SOService.NewFilterSet();
        }

        await Task.Run(() => login.CheckLogin());

        pageHistory.AddPageToHistory(nav.Uri);

        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);
    }

    async Task SetActiveControl() {
        await CheckPermission();
    }
    async Task LoadDropDownList() {
        //ListLoc = InventoryService.ListLoc();

    }


    async void LoadData() {
        SetDefaultFilter();
        DocList = SOService.ListPrintOrder(Filter);


        await SetActiveControl();
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    async Task CheckPermission() {
        var menu = LogInService.GetMenuInfo(login.LoginInfo, "661");
        menuCaption = menu.Name;
        menuGroupCaption = LogInService.GetMenuGroup(login.LoginInfo, menu.GroupID).Name;
        if (!login.CanOpen(login.LoginInfo, "661")) {

            nav.NavigateTo("NoPermissionPage");
        }
        if (!login.CanCreate(login.LoginInfo, "661")) {
            isShowNew = false;
        }
    }


    private void SetDefaultFilter() {
        Filter.Status = "WAIT";
        _soService.SetSessionFiterSet(Filter);
    }

    async void SearchAction() {
        isLoading = true;
        await Task.Run(LoadData);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    public void Back() {
        nav.NavigateTo("Dashboard/StartBoard");
    }

    //async void OpenPrintORDER(vw_OSOHead select_data) {
    //    var rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
    //    var com = login.LoginInfo.CurrentCompany.CompanyID;
    //    await sessionStorage.SetItemAsync(SOService.SessionActive_SOID, select_data.OrdID);
    //    _soService.DocSet = SOService.GetDocSet(select_data.OrdID, rcom, com);
    //    var r = await Task.Run(() => RunReport.Convert2PrintData(_soService.DocSet, "SO101", login.LoginInfo.CurrentUser));
    //    if (r.Result == "ok") {
    //        printid = r.Message2;
    //        isPopupPrint = true;
    //        using (GAEntities db = new GAEntities()) {
    //            select_data.IsPrint = true;
    //            select_data.PrintDate = DateTime.Now.Date;
    //            db.SaveChanges();
    //        I_BasicResult s_result = new I_BasicResult();
    //            s_result = await Task.Run(() => SOService.SaveSO(_soService.DocSet, "update"));
    //        }


    //        await InvokeAsync(StateHasChanged);
    //    } else {
    //        await Swal.FireAsync("Error", r.Message1, "error");
    //    }

    //    await InvokeAsync(StateHasChanged);
    //}

    async void OpenPrintORDER(vw_OSOHead select_data) {
        try {
            isLoading = true;
            await InvokeAsync(StateHasChanged);
            var rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
            var com = login.LoginInfo.CurrentCompany.CompanyID;
            await sessionStorage.SetItemAsync(SOService.SessionActive_SOID, select_data.OrdID);
            _soService.DocSet = SOService.GetDocSet(select_data.OrdID, rcom, com);
            var r = await Task.Run(() => RunReport.Convert2PrintData(_soService.DocSet, "SO101", login.LoginInfo.CurrentUser));

            if (r.Result == "ok") {
                printid = r.Message2; 
                isPopupPrint = true;
                var rr = SOService.SetPrint(select_data.RComID, select_data.ComID, select_data.OrdID);
                isLoading = false;
                if (rr.Result == "fail") {
                    await Swal.FireAsync("Error", rr.Message1, "error");
                }  
            } else {
                await Swal.FireAsync("Error", r.Message1, "error");
            }
            await InvokeAsync(StateHasChanged);
        } catch (Exception) {

            throw;
        } finally {
            isLoading = false;
            await InvokeAsync(StateHasChanged);

        }

    }


    void OnRowRenderColor(GridRowRenderEventArgs args) {
        var item = args.Item as vw_OSOHead;
        if (item.IsPrint == true) {

            args.Class = "rowexpire";

        }
        // args.Class = item.status == "rowexpire" ? "rowexpire" : "rownormal";
    }
}
