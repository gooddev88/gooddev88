@page "/Login"
@page "/Login/{user}"
@page "/Login/{user}/{changepass}"

@using RobotWasm.Shared.Data.ML.Login
@using Telerik.Blazor
@using Telerik.Blazor.Components
@inject LoginService login


@*@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@inject IJSRuntime jsRuntime
@implements IAsyncDisposable*@
 


<style>
    .fix-content {
        padding-top: 80px;
        display: flex;
        justify-content: center;
        align-content: center;
        height: 500px;
        width:100%;
    }

    .report-button-wrapper {
        width: 100%;
        text-align: center;
    }

    .loader-indicator {
        margin-left: 5px;
    }
</style>
 

<div class="container-fluid" style="background-color: #21D4FD; background-image: linear-gradient( 19deg, #21D4FD 0%, #B721FF 100%); padding-bottom: 100%;">
@*
    Welcome to your new app.
    <button type="button" @onclick="GetGeolocation">Get Current Position</button>
    <button type="button" @onclick="WatchPosition">Watch position</button>
    <button type="button" @onclick="StopWatch">Stop watch</button>




    @if (currentPosition != null)
    {
        <div>
            Current position :
            <ul>
                <li>Latitude : @currentPosition.Coords.Latitude </li>
                <li>Longitude : @currentPosition.Coords.Longitude </li>
                <li>Altitude : @currentPosition.Coords.Altitude </li>
                <li>Accuracy : @currentPosition.Coords.Accuracy </li>
                <li>Altitude Accuracy : @currentPosition.Coords.AltitudeAccuracy </li>
                <li>Heading : @currentPosition.Coords.Heading </li>
                <li>Speed : @currentPosition.Coords.Speed </li>
            </ul>
        </div>
    }

    Position History :
    @foreach (var item in positioHistory)
    {
        <div>
            -----
            <ul>
                <li>Latitude : @item.Coords.Latitude </li>
                <li>Longitude : @item.Coords.Longitude </li>
                <li>Altitude : @item.Coords.Altitude </li>
                <li>Accuracy : @item.Coords.Accuracy </li>
                <li>Altitude Accuracy : @item.Coords.AltitudeAccuracy </li>
                <li>Heading : @item.Coords.Heading </li>
                <li>Speed : @item.Coords.Speed </li>
            </ul>
        </div>
    }*@


    <div class="row">
        <div class="col-xl-4 col-lg-7 col-md-8 col-sm-9 pt-150 col-11 mx-auto my-auto">
            <div class="card rounded" style="border-radius: 1.25rem !important;">
                <div class="card-body">
                    <div class="row pb-4 pt-4">
                        <div class="col-md-12 text-center">
                            @*<div class="pb-2 pt-2"><img src="/assets/img/logo.png" style="width: 300px;" /></div>*@
                            <div class="pb-2 pt-2"><img src="/img/wasco_logo.png" style="width: 100px;" /></div>
                            <div><h5 class="font-weight-bold">ล็อกอินเข้าสู่ระบบ</h5></div>
                        </div>
                    </div>
                    <div class="row pt-2" style="font-size:medium;">
                        <div class="col-md-12">
                            <span class="font-weight-bold">Username</span>
                            <input type="text" class="form-control" id="username" placeholder="กรุณากรอกชื่อผู้ใช้" @bind="@username">
                        </div>
                    </div>
                    <div class="row pt-2" style="font-size:medium;">
                        <div class="col-md-12">
                            <span class="font-weight-bold">Password</span>
                            <input type="password" class="form-control" id="password1" placeholder="กรุณากรอกรหัสผ่าน" @bind="@password">
                        </div>
                    </div>
                    <div class="row pt-4 pb-2">
                        <div class="col-md-12">
                                 <TelerikButton  Class="w-100" Size="@ThemeConstants.Button.Size.Large"  
                                        Rounded="@ThemeConstants.Button.Rounded.Full"
                                    ThemeColor="@(ThemeConstants.Button.ThemeColor.Error)" 
                                    OnClick="DoLogin" Enabled="@(!Visible)">
                                    เข้าระบบ
                                    <TelerikLoader Class="loader-indicator" ThemeColor="light" Visible="@Visible"></TelerikLoader>
                                </TelerikButton>
                                @if (!string.IsNullOrWhiteSpace(MessageButton)) {
                                    <p>@MessageButton</p>
                                }
                       
                      @*      <button type="button" @onclick="(() => DoLogin())"
                                    class="btn btn-block btn-lg" style="background-image: linear-gradient( 19deg, #EA9409 0%, #EEC71A 100%); color: black; width: 100%">
                                <i class="fas fa-sign-in-alt fa-2x"></i> &nbsp; เข้าระบบ
                            </button>*@
                        </div>
                    </div>
                    <div class="row pl-2">
                        <div class="col-6">
                 @*           <TelerikCheckBox Id="chkIsActive" @bind-Value="@rememberMe"></TelerikCheckBox>
                            <label for="rememberMe">จำไว้</label>*@
                        </div>
                        <div class="col-6 text-end">
                            <a class="btn-link text-decoration-none" @onclick="@OnChangePassword">เปลี่ยนรหัสผ่าน</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter] public string user { get; set; }
    [Parameter] public string changepass { get; set; }
    string username = "";
    string password = "";

    bool Visible { get; set; }
    string MessageButton { get; set; }

    bool rememberMe { get; set; } = true;
    private bool _processing = true;

    async Task DoLogin() {
        MessageButton = "กำลังเข้าสู่ระบบ";
        Visible = true;

        MessageButton = "";
        LoginRequest n = new LoginRequest { UserName = username, Password = password, Apps = "", RememberMe = true };
        var lgoin_data = await Task.Run(() => login.DoLogin(n));
        Visible = false;
        await sessionStorage.SetItemAsync(Globals.SessionComeFrom, "");
        if (lgoin_data.LoginResult=="ok") {
            var result = await Task.Run(() => _filego.LoginApiFileGo());
     
            //if (lgoin_data.UserInRCompany.Count > 1)
            //{
            //    nav.NavigateTo("Login/ChangeRCom");
            //}
            //if (lgoin_data.LoginResult == "new")
            //{

            //}else
            //{

            //}

            nav.NavigateTo("/");
            return;
        } else if (lgoin_data.LoginResult == "new") {
            //if (lgoin_data.CurrentUserInfo.IsNewUser == true) {
            //  //  nav.NavigateTo("Login");
            //    nav.NavigateTo("ChangePassword");
            //    return;
            //}
            nav.NavigateTo($"ChangePassword/{username}");
            return;
        } else {
            await Swal.FireAsync("Warnig", "The username or password is incorrect.", "info");
        }
    }
 
    async void OnChangePassword() {
        nav.NavigateTo($"ChangePassword/{username}");
    }

    #region gps
    //private WindowNavigatorGeolocation geolocationWrapper;
    //private GeolocationPosition currentPosition;
    //private List<GeolocationPosition> positioHistory = new List<GeolocationPosition>();
    //private IAsyncDisposable geopositionWatcher;
    //#endregion
    //protected override async Task OnInitializedAsync()
    //{
    //    #region gps
    //    var window = await jsRuntime.Window();
    //    var navigator = await window.Navigator();
    //    geolocationWrapper = navigator.Geolocation;
    //    #endregion  
        
    //}

    //public async Task GetGeolocation()
    //{
    //    currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
    //        {
    //            EnableHighAccuracy = true,
    //            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
    //            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
    //        })).Location;
    //}

    //public async Task WatchPosition()
    //{
    //    geopositionWatcher = await geolocationWrapper.WatchPosition(async (p) => {
    //        positioHistory.Add(p.Location);
    //        StateHasChanged();
    //    }
    //    );
    //}

    //public async Task StopWatch()
    //{
    //    await geopositionWatcher.DisposeAsync();
    //    geopositionWatcher = null;
    //}

    //public async ValueTask DisposeAsync()
    //{
    //    await StopWatch();
    //}
    #endregion
}
