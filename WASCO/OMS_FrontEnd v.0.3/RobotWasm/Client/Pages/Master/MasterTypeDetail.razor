@page "/Master/MasterTypeDetail"

@using System.Text.Json
@using System.Text
@using RobotWasm.Shared.Data.ML.FileGo
@using RobotWasm.Shared.Data.ML.Shared
@using static RobotWasm.Shared.Data.ML.Master.MasterType.I_MasterTypeSet
@using Blazorise
@using RobotWasm.Shared.Data.TFEDBF;

<style>

    .k-button-solid-error, .k-button-solid-error:hover, .k-button-solid-error.k-hover {
        border-color: #FF396F;
        background-color: #FF396F;
    }

    .k-state-disabled, .k-disabled, .k-widget[disabled], .k-disabled {
        background: #e9ecef !important;
        opacity: 1;
    }

    .k-window {
        left: 0pxi !important;
        width: 0pxi !important;
        height: 600pxi !important;
        min-width: 120pxi !important;
        min-height: 100pxi !important;
    }

</style>


@if (!isLoading) {

            <TelerikWindow Class="telerik-pop col-md-6 col-sm-8 col-11 mx-auto" Centered="true"
                        Modal="true" @bind-Visible="@isPopupMain">
            <WindowTitle>
                <strong>INFO</strong>
            </WindowTitle>
            <WindowActions>
                @*<WindowAction Name="Close" />*@
            </WindowActions>
            <WindowContent>

                <div class="row">
            <div class="col-12">
                <h3>@Caption</h3>
            </div>
        </div>
                
        <div class="row pt-3">
            <div class="col-12">
                <span>หัวข้อเอกสารเผยแพร่</span>
                <TelerikTextBox PlaceHolder="" @bind-Value="@valuetxt" Enabled="@enabled_valuetxt" />
            </div>
        </div>

        <div class="row pt-3">
            <div class="col-12">
                <span>คำอธิบาย</span>
                <TelerikTextArea @bind-Value="@_masterTypeService.DocSet.lineAtive.desc1"
                                 AutoSize="true"
                                 Class="w-100"
                                 PlaceHolder="">
                </TelerikTextArea>
            </div>
        </div>

        <div class="row pt-3">
            <div class="col-12 text-end">
                <TelerikButton Size="@(ThemeConstants.Button.Size.Large)"
                               @onclick="@OnSave" Class="px-4 py-2"
                               ThemeColor="@(ThemeConstants.Button.ThemeColor.Success)">
                    <i class="fa-solid fa-floppy-disk ga-lg"></i>&nbsp; บันทึก/แก้ไข
                </TelerikButton>&nbsp;&nbsp;
                <TelerikButton Size="@(ThemeConstants.Button.Size.Large)"
                               @onclick="@OnClose"
                               ThemeColor="@(ThemeConstants.Button.ThemeColor.Error)">
                    <i class="fa-solid fa-rectangle-xmark"></i>&nbsp; ปิด
                </TelerikButton>
                
            </div>
        </div>

            </WindowContent>
        </TelerikWindow>

                        <TelerikDialog @bind-Visible="@dialog_Visible" Class="col-2" ShowCloseButton="false" Title="">
    <DialogContent>
        <div class="text-center">
            @if (Error_dialog == "error")
            {
                    <i style="color:#f27474;" class="fa-regular fa-circle-xmark fa-3x"></i>
                }else {
                    <i style="color:#37b400;" class="fa-regular fa-circle-check fa-3x"></i>
                }
                <br /><br />
        <span style="text-align: center;">@Caption_dialog</span>
        </div>
    </DialogContent>
    <DialogButtons>
        @*<TelerikButton OnClick="@(() => { dialog_Visible = false; })">No</TelerikButton>*@
        <TelerikButton ThemeColor="@(ThemeConstants.Button.ThemeColor.Success)" OnClick="@(() => { dialog_Visible = false; })">OK</TelerikButton>
    </DialogButtons>
</TelerikDialog>

    <div class="col-md-10 col-sm-12 col-12 mx-auto pb-3">
        <div class="row">
            <div class="col-md-6 col-12 pt-2">
                <TelerikButton Size="@(ThemeConstants.Button.Size.Large)"
                           @onclick="@Back" Class="px-3" FillMode="@(ThemeConstants.Button.FillMode.Solid)"
                           ThemeColor="@(ThemeConstants.Button.ThemeColor.Base)">
                    <span style="font-size: medium;"><i class="fa-solid fa-circle-chevron-left"></i>&nbsp;&nbsp;&nbsp;@menuCaption</span>
                </TelerikButton>
            </div>
            <div class="col-md-6 col-12 pt-2 text-end">
                <TelerikButton Size="@(ThemeConstants.Button.Size.Large)"
                           @onclick="@NewDoc" Class="px-3"
                           ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">
                    <i class="fa-solid fa-file fa-lg"></i>&nbsp; สร้างหมวดหมู่
                </TelerikButton>
            </div>
        </div>

        <div class="row pt-3">
            <div class="col-md-12">
                <TelerikTextBox PlaceHolder="คำค้นหา" FillMode="@(ThemeConstants.TextBox.FillMode.Outline)" ValueChanged="@OnTextChanged_Search"></TelerikTextBox>
            </div>
        </div>

        <div class="row pt-2">
            <div class="col-12">
                <TelerikGrid Data=@DocList
                         Pageable="true"
                         Groupable="false"
                         Sortable="true"
                         Resizable="true"
                         Reorderable="true"
                         PageSize="30"
                         Navigable="true">
                    <GridColumns>
                        <GridColumn Field="@nameof(y_master_type_line.value_txt)" Title="แก้ไข" Editable="false" Width="90px">
                            <Template>
                                @{
                                    var data = context as y_master_type_line;
                                <button class="btn btn-sm" @onclick="@(() => Edit(data))"><i class="fa-solid fa-pen-to-square" style="font-size:20px"></i></button>
                            }
                        </Template>
                    </GridColumn>
                        <GridColumn Field="@nameof(y_master_type_line.value_txt)" Title="หมวดหมู่เอกสารเผยแพร่" Width="180px" />
                        <GridColumn Field="@nameof(y_master_type_line.desc1)" Title="คำอธิบาย" Width="250px" />
                    @if (isShowDelete) {
                        <GridColumn Title="ลบ" Editable="false" Width="75px">
                            <Template>
                                @{
                                        var data = context as y_master_type_line;
                                    <div class="text-center">
                                    <button class="btn btn-sm" @onclick="@(() => DeleteLine(data))"><i class="fa-solid fa-trash" style="font-size:20px"></i>  </button>
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                    }
                </GridColumns>
            </TelerikGrid>
        </div>
    </div>

</div>

} else {
    <div class="loader-container">
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {

    private bool isLoading = false;
    bool collapse1Visible = true;

    string Caption = "";
    public bool isPopupMain { get; set; } = false;

    //dialog
    private bool dialog_Visible { get; set; } = false;
    string Caption_dialog = "";
    string Error_dialog = "";

    string menuCaption = "";
    public bool enabled_valuetxt { get; set; } = true;
    public string valuetxt { get; set; } = "";
    private bool isShowDelete = true;

    string SearchText = "";
    string Username = "";
    public string Size { get; set; } = ThemeConstants.CheckBox.Size.Medium;

    public TelerikGrid<y_master_type_line> dxDataGrid { get; set; }
    IEnumerable<y_master_type_line> DocList;

    protected override async Task OnInitializedAsync() {
        isLoading = true;
        await Task.Run(() => CheckIsRefresh());
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);
        await Task.Run(LoadGrdMasterType);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task CheckIsRefresh() {
        try {
            if (_masterTypeService.DocSet == null) {
                string docid = await sessionStorage.GetItemAsync<string>(Globals.ActiveID_Valuetxt);
                if (!string.IsNullOrEmpty(docid)) {
                    _masterTypeService.DocSet = await _masterTypeService.GetDocSet(docid);
                } else {
                    _masterTypeService.DocSet = MasterTypeService.NewTransaction();
                }
            }
        } catch (Exception ex) {
            var xx = ex.Message;
        }

    }

    protected async Task LoadData() {
        //Username = await _localStorage.GetItemAsync<string>(Globals.AuthUsername);
        BindData();
        await CheckPermission();
    }

    async Task CheckPermission() {
        var menu = UserService.GetMenuInfo(login.LogInInfo, "431");
        menuCaption = menu.Name;
        var Permissionmenu = login.LogInInfo.UserInMenu.Where(o => o.MenuID == "431").FirstOrDefault();
        if (!Convert.ToBoolean(Permissionmenu.IsDelete)) {
            isShowDelete = true;
        }
    }

    async Task LoadGrdMasterType() {
        DocList = await _masterTypeService.ListDoc(SearchText);
    }

    async Task SearchAction() {
        await Task.Run(LoadGrdMasterType);
    }

    public async void BindData() {
        var h = _masterTypeService.DocSet.lineAtive;
        if (!string.IsNullOrEmpty(h.value_txt)) {
            valuetxt = h.value_txt;
            enabled_valuetxt = false;
        }else {
            enabled_valuetxt = true;
        }

        await InvokeAsync(StateHasChanged);
    }


    bool ValidData() {
        var h = _masterTypeService.DocSet.lineAtive;
        bool isvalid = true;
        string Errmsg = "";

        if (valuetxt == "") {
            Errmsg = "!! ระบุ หมวดหมู่เอกสารเผยแพร่";
            isvalid = false;
        }

        if (h.desc1 == "") {
            Errmsg = "ระบุ คำอธิบาย";
            isvalid = false;
        }

        if (!isvalid) {
            //Swal.FireAsync("", Errmsg, "error");
            Caption_dialog = Errmsg;
            Error_dialog = "error";
            dialog_Visible = true;
        }
        return isvalid;
    }

    protected bool PrepairDataSave() {
        var h = _masterTypeService.DocSet.lineAtive;

        bool isnew = h.value_txt == "" ? true : false;

        if (isnew) {
            h.value_txt = valuetxt;
        }

        return isnew;
    }

    public async void OnSave() {
        if (!ValidData()) {
            return;
        }

        var h = _masterTypeService.DocSet.lineAtive;
        var isnew = PrepairDataSave();
        string strPayload = JsonSerializer.Serialize(_masterTypeService.DocSet);
        string url = $"api/MasterType/SaveMaster";
        var response = await Http.PostAsJsonAsync(url, strPayload);
        var status = response.StatusCode;
        if (status.ToString().ToLower() != "ok") {
        } else {
            var r = response.Content.ReadFromJsonAsync<I_BasicResult>().Result;
            if (r.Result == "fail") {
                //await Swal.FireAsync("", r.Message1, "error");
                Caption_dialog = r.Message1;
                Error_dialog = "error";
                dialog_Visible = true;
            } else {
                _masterTypeService.DocSet = await _masterTypeService.GetDocSet(h.value_txt);
                await sessionStorage.SetItemAsync(Globals.ActiveID_Valuetxt, h.value_txt);
                BindData();
                Caption_dialog = "บันทึกข้อมูลสำเร็จ";
                Error_dialog = "success";
                dialog_Visible = true;
                await InvokeAsync(StateHasChanged); 
            }
        }
    }

    public async void OnTextChanged_Search(object Search) {
        if (Search != null) {
            SearchText = Search.ToString();
            await Task.Run(() => SearchAction());
        }
    }

    public async void OnClose() {
        isPopupMain = false;
        await Task.Run(LoadGrdMasterType);
        await InvokeAsync(StateHasChanged);
    }

    async void Edit(y_master_type_line data) {
        Caption = "แก้ไขเอกสาร";
        isPopupMain = true;
        _masterTypeService.DocSet = await _masterTypeService.GetDocSet(data.value_txt);
        BindData();
        //nav.NavigateTo($"Master/MasterTypeDetail", false);
        await InvokeAsync(StateHasChanged);
    }

    async void DeleteLine(y_master_type_line data) {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions {
                Title = "Warning",
                Text = $"ยืนยันการลบเอกสาร",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No"
            });
        if (string.IsNullOrEmpty(result.Value)) {
            return;
        }

        var rs = await _masterTypeService.DeleteDoc(data.value_txt);
        if (rs.Result == "ok") {
            dxDataGrid?.Rebind();
        } else {
            await Swal.FireAsync("", rs.Message1, "error");
        }
        await Task.Run(LoadGrdMasterType);
        await InvokeAsync(StateHasChanged);
    }

    async Task NewDoc() {
        Caption = "เพิ่มเอกสาร";
        isPopupMain = true;
        valuetxt = "";
        await sessionStorage.RemoveItemAsync(Globals.ActiveID_Valuetxt);
        _masterTypeService.DocSet = MasterTypeService.NewTransaction();
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);
    }

    async void Back() {
        nav.NavigateTo($"Menu/MenuSIDE/400", false);
        await InvokeAsync(StateHasChanged);
    }

}
