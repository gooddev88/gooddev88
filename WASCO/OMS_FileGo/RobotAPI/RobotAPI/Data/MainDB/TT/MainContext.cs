// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
namespace RobotAPI.Data.MainDB.TT {
    public partial class MainContext : DbContext {

        private readonly IConfiguration Configuration;
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
            //optionsBuilder.UseSqlServer(Configuration["GAEntities:ConnectionString"]);
            optionsBuilder.UseSqlServer(Globals.MainContextConn);
        }
        public MainContext() { }


        public MainContext(DbContextOptions<MainContext> options)
            : base(options) {
        }

        public virtual DbSet<CompanyInfo> CompanyInfo { get; set; }
        public virtual DbSet<UserGroupInBoard> UserGroupInBoard { get; set; }
        public virtual DbSet<UserGroupInCompany> UserGroupInCompany { get; set; }
        public virtual DbSet<UserGroupInDocStep> UserGroupInDocStep { get; set; }
        public virtual DbSet<UserGroupInfo> UserGroupInfo { get; set; }
        public virtual DbSet<UserGroupPermission> UserGroupPermission { get; set; }
        public virtual DbSet<UserInBoard> UserInBoard { get; set; }
        public virtual DbSet<UserInCompany> UserInCompany { get; set; }
        public virtual DbSet<UserInDocStep> UserInDocStep { get; set; }
        public virtual DbSet<UserInGroup> UserInGroup { get; set; }
        public virtual DbSet<UserInRCom> UserInRCom { get; set; }
        public virtual DbSet<UserInfo> UserInfo { get; set; }
        public virtual DbSet<UserLogInHistory> UserLogInHistory { get; set; }
        public virtual DbSet<UserMenu> UserMenu { get; set; }
        public virtual DbSet<UserPermission> UserPermission { get; set; }
        public virtual DbSet<vw_PermissionGroupInMenu> vw_PermissionGroupInMenu { get; set; }
        public virtual DbSet<vw_PermissionInBoard> vw_PermissionInBoard { get; set; }
        public virtual DbSet<vw_PermissionInCompany> vw_PermissionInCompany { get; set; }
        public virtual DbSet<vw_PermissionInMenu> vw_PermissionInMenu { get; set; }
        public virtual DbSet<vw_UIC> vw_UIC { get; set; }
        public virtual DbSet<vw_UIM> vw_UIM { get; set; }
        public virtual DbSet<vw_UserGroupInDocStep> vw_UserGroupInDocStep { get; set; }
        public virtual DbSet<vw_UserGroupInfo> vw_UserGroupInfo { get; set; }
        public virtual DbSet<vw_UserInBoard> vw_UserInBoard { get; set; }
        public virtual DbSet<vw_UserInDocStep> vw_UserInDocStep { get; set; }
        public virtual DbSet<vw_UserInGroup> vw_UserInGroup { get; set; }
        public virtual DbSet<vw_UserInRCom> vw_UserInRCom { get; set; }
        public virtual DbSet<vw_UserInfo> vw_UserInfo { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder) {
            modelBuilder.Entity<CompanyInfo>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID });

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasComment("Company+Brn ");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrFull2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTanon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ถนน");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BrnCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("CompanyType");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsWH).HasComment("เป็นศูนย์กระจายพัสดุ");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.NameEn1)
                    .HasMaxLength(150)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.NameEn2)
                    .HasMaxLength(150)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุลูกค้า");

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุลูกค้า");

                entity.Property(e => e.SalePersonID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxCalType)
                    .HasMaxLength(50)
                    .HasComment("Exclude / Include");

                entity.Property(e => e.TaxGroupP).HasMaxLength(50);

                entity.Property(e => e.TaxGroupS).HasMaxLength(50);

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'HQ')")
                    .HasComment("GROUP/COMPANY/BRANCH");
            });
            modelBuilder.Entity<UserGroupInBoard>(entity => {
                entity.HasKey(e => new { e.RComID, e.UserGroupID, e.DashBoardID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.DashBoardID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserGroupInCompany>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.UserGroupID, e.CompanyID });

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserGroupInDocStep>(entity => {
                entity.Property(e => e.StepID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.UserGroupID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserGroupInfo>(entity => {
                entity.HasKey(e => new { e.RComID, e.UserGroupID })
                    .HasName("PK_UserGroup");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LineToken)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserGroupPermission>(entity => {
                entity.HasKey(e => new { e.RComID, e.UserGroupID, e.MenuID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.MenuID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserInBoard>(entity => {
                entity.HasKey(e => e.Username);

                entity.Property(e => e.Username).HasMaxLength(30);

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserInCompany>(entity => {
                entity.HasKey(e => new { e.UserName, e.RCompanyID, e.CompanyID });

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserInDocStep>(entity => {
                entity.Property(e => e.StepID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserInGroup>(entity => {
                entity.HasKey(e => new { e.RComID, e.UserName, e.UserGroupID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserInRCom>(entity => {
                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<UserInfo>(entity => {
                entity.HasKey(e => e.Username);

                entity.Property(e => e.Username).HasMaxLength(30);

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuthenType)
                    .HasMaxLength(20)
                    .HasComment("DB/LDAP");

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(50);

                entity.Property(e => e.DefaultMenu).HasMaxLength(20);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101)
                    .HasComputedColumnSql("(([FirstName]+' ')+[LastName])", false);

                entity.Property(e => e.FullName_En)
                    .HasMaxLength(101)
                    .HasComputedColumnSql("(([FirstName_En]+' ')+[LastName_En])", false);

                entity.Property(e => e.Gender).HasMaxLength(30);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsNewUser)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.JobStartDate)
                    .HasColumnType("datetime")
                    .HasComment("");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RelateID)
                    .HasMaxLength(30)
                    .HasComment("VENDORID / CUSTOMERID");

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.UseTimeStamp).HasDefaultValueSql("((1))");

                entity.Property(e => e.UserType)
                    .HasMaxLength(20)
                    .HasComment("USER / CUSTOMER /VENDOR");
            });

            modelBuilder.Entity<UserLogInHistory>(entity => {
                entity.HasIndex(e => e.Username, "IX_UserLogInHistory")
                    .HasFillFactor(90);

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IP).HasMaxLength(30);

                entity.Property(e => e.LogInDate).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserMenu>(entity => {
                entity.HasKey(e => e.MenuID);

                entity.Property(e => e.MenuID).HasMaxLength(30);

                entity.Property(e => e.App)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CaptionCreatePermission).HasMaxLength(200);

                entity.Property(e => e.CaptionDeletePermission).HasMaxLength(200);

                entity.Property(e => e.CaptionEditPermission).HasMaxLength(200);

                entity.Property(e => e.CaptionOpenPermission).HasMaxLength(200);

                entity.Property(e => e.CaptionPrintPermission).HasMaxLength(200);

                entity.Property(e => e.Desc1).HasMaxLength(200);

                entity.Property(e => e.Desc2).HasMaxLength(200);

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.GroupSort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsToggleGroupmenu)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MenuCode).HasMaxLength(30);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentID).HasMaxLength(30);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.SubGroupSort).HasDefaultValueSql("((1))");

                entity.Property(e => e.TypeID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<UserPermission>(entity => {
                entity.HasKey(e => new { e.RComID, e.Username, e.MenuID })
                    .HasName("PK_UserPermission_1");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(30);

                entity.Property(e => e.MenuID).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_PermissionGroupInMenu>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_PermissionGroupInMenu");

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.MenuCode).HasMaxLength(30);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.UserGroupId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_PermissionInBoard>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInBoard");

                entity.Property(e => e.BoardName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BoardPage)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BoardUrl).HasMaxLength(100);

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_PermissionInCompany>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInCompany");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_PermissionInMenu>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInMenu");

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CaptionCreatePermission).HasMaxLength(200);

                entity.Property(e => e.CaptionDeletePermission).HasMaxLength(200);

                entity.Property(e => e.CaptionEditPermission).HasMaxLength(200);

                entity.Property(e => e.CaptionOpenPermission).HasMaxLength(200);

                entity.Property(e => e.CaptionPrintPermission).HasMaxLength(200);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.MenuCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuDesc1)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.MenuDesc2)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MenuType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.TypeID).HasMaxLength(30);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UIC>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UIC");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UIM>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UIM");

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UserGroupInDocStep>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserGroupInDocStep");

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.StepDescription)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.StepID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.UserGroupID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserGroupInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserGroupInfo");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserGroupID)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UserInBoard>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInBoard");

                entity.Property(e => e.BoardUrl).HasMaxLength(100);

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Page)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserInDocStep>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInDocStep");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepDescription)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.StepID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserInGroup>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInGroup");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserGroupId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserInRCom>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInRCom");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(50);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName_En).HasMaxLength(101);

                entity.Property(e => e.Gender).HasMaxLength(30);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.JobStartDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.RComName)
                    .IsRequired()
                    .HasMaxLength(301);

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.UserFullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UserInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInfo");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AuthenType)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(50);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.FullName_En).HasMaxLength(101);

                entity.Property(e => e.Gender).HasMaxLength(30);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.JobStartDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RelateID).HasMaxLength(30);

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.UserType).HasMaxLength(20);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.WorkAge).HasMaxLength(4000);

                entity.Property(e => e.XStatus)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}