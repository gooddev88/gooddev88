@using RobotWasm.Client.Data.ML.HighChart
@using RobotWasm.Client.Pages.DPMBoard.CustomBoard.Widgets.ThMap
@using RobotWasm.Shared.Data.ML.DPMBaord.BoardData.BoardParam
@using System.Globalization
@using RobotWasm.Shared.Data.ML.DPMBaord.BoardData.Widget
@using RobotWasm.Shared.Data.ML.DPMBaord.BoardData.Widget.G10
@inject IJSRuntime jSRuntime;



<style>
    .highcharts-figure,
    .highcharts-data-table table {
        min-width: 100%;
        max-width: 100%;
        margin: 1em auto;
    }

    #container {
        height: 400px;
    }

    .highcharts-data-table table {
        font-family: Verdana, sans-serif;
        border-collapse: collapse;
        border: 1px solid #ebebeb;
        margin: 10px auto;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .highcharts-data-table caption {
        padding: 1em 0;
        font-size: 1.2em;
        color: #555;
    }

    .highcharts-data-table th {
        font-weight: 600;
        padding: 0.5em;
    }

    .highcharts-data-table td,
    .highcharts-data-table th,
    .highcharts-data-table caption {
        padding: 0.5em;
    }

    .highcharts-data-table thead tr,
    .highcharts-data-table tr:nth-child(even) {
        background: #f8f8f8;
    }

    .highcharts-data-table tr:hover {
        background: #f1f7ff;
    }
</style>


<h6>@widgetDesc</h6>

<div class="row">
    <div class="col-6">
     
                        <div class="row pt-2">
                            <div class="col-12">
                                <TelerikGrid @ref="@grd"
                             Data=@xBranch
                                             Width="100%"
                                             Resizable="true"
                                             Pageable="false" 
                                             RowDraggable="false"
                                             OnRowClick="@OnRowClickHandler" >
                                    <GridColumns> 
                                        <GridColumn Field=@nameof(WG202Data.Branch.LOCATE_NAME) Width="140px" Title="หน่วย"  />
                                         
                                    </GridColumns>
                                </TelerikGrid>

                               
                            </div>
                        </div>
    </div>
    <div class="col-6 text-center">
        @if (xData == null) {
            <p>ไม่มีข้อมูล</p>
        } else {
            @if (xData.Count == 0) {
                <p>ไม่มีข้อมูล</p>
            }
        }

        <div id="div_wg202"></div>

    </div>
</div>
@if (isLoading) {
    <div class="loader-container">
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}
<div class="row text-end">
    <div class="col-12">
        <small style="color:gray">wg202</small>
    </div>
</div>
@code {

    [Parameter] public string BoardID { get; set; }
    private bool isLoading = false;

    public TelerikGrid<WG202Data.Branch> grd { get; set; }
    string location_select = "";
    string location_select_name = "";
    public custom_widget_master this_widget = new custom_widget_master();
    public string widgetDesc { get; set; }
    WG202Data.DocSet? xDoc;
    List<WG202Data.DataRow> xData = new List<WG202Data.DataRow>();
    List<WG202Data.Branch> xBranch = new List<WG202Data.Branch>();
    private IJSObjectReference _jsModule;

    protected override async Task OnInitializedAsync() {
        //this_widget = _customBoardService.BoardDocset.CustomWidgets.Where(o => o.widget_id == "wg101").FirstOrDefault(); ;
        this_widget = await Task.Run(() => _customBoardService.GetWidgetInfo("wg202"));
        widgetDesc = /*this_widget.widget_id + " " + */this_widget.widget_desc;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {

            try {
                _jsModule = await jSRuntime.InvokeAsync<IJSObjectReference>("import", "./chart/g10/wg202.js");
                if (BoardID != null) {
                    await CreateChart();
                }
            } catch (Exception) {

            }
        }
    }

    async Task OnRowClickHandler(GridRowClickEventArgs args) {
        var data = args.Item as WG202Data.Branch;
        location_select = data.CENTER_ID;
        location_select_name = data.LOCATE_NAME;
        CreateChart();
        //dpmnewsService.DocSet = dpmnewsService.GetDocSet(data.CateID, "");
        //ResetControl();
        //LoadData();
        //loadProfile();
        //InvokeAsync(StateHasChanged); 
    }


    private async Task CreateChart() {
        try {
            isLoading = true;
            //if (xDoc==null) {
             
            //}
             xDoc = await Task.Run(() => _g10Service.GetWG202Data(""));
            isLoading = false;
            if (xDoc.branchs.Count == 0) {
                return;
            }
           xData = xDoc.rows.Where(o => o.unit_code == location_select).ToList();
            xBranch = xDoc.branchs.OrderBy(o=>o.CENTER_ID).ToList();
            var Series = new List<SeriesElement>();
            var bar = new SeriesElement();
            //  bar.Color = SeriesElement.RandomColor();
            bar.Data = new List<object>();
            bar.Name = location_select_name;
            bar.ColorByPoint = true;
            foreach (var d in xData) {

                var datum = new Datum();
                datum.Name = d.stuff_name;
                datum.Y = Convert.ToInt32(d.remain);

                bar.Data.Add(datum);
            }
            Series.Add(bar);
            //var x = new XAxis(AxisType.Category);

            var txt = new Title { text = "" };
            var chart = new ChartData();
            chart.title = txt;
            chart.series = Series;
            await _jsModule.InvokeVoidAsync("wg202", chart);

            await InvokeAsync(StateHasChanged);
        } catch (Exception) {

        }finally{
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }

    }
}


