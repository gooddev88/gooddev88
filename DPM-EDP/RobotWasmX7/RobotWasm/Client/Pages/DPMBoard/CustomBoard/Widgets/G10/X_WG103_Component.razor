@inject IJSRuntime jSRuntime;
@using RobotWasm.Shared.Data.ML.DPMBaord.BoardData.Widget.G10
@using Telerik.Blazor

<style>
    .telerik-chart {
    width: 100%;
    height: 100%;
}

</style>
<h6>@widgetDesc</h6>
<TelerikChart class="telerik-chart">
    
    <ChartTooltip Visible="true"></ChartTooltip>
    <ChartLegend Position="ChartLegendPosition.Bottom"></ChartLegend>

    <ChartSeriesItems>
        <ChartSeries Type="ChartSeriesType.Line"
                     Name="จำนวนครั้งที่เกิดเหตุ"
                     Data="@XData"
                     Width="2"
                     DashType="@DashType.DashDot"
                     Field="@nameof(ModelData.Series1)">
                         <ChartSeriesLabels Visible="true" Format="{0} ครั้ง"  ></ChartSeriesLabels>
        </ChartSeries>      
    </ChartSeriesItems>

    <ChartCategoryAxes>
        <ChartCategoryAxis Categories="@Categories">
                   <ChartCategoryAxisLabels Step="7">
                <ChartCategoryAxisLabelsRotation Angle="-0" />
            </ChartCategoryAxisLabels>
        </ChartCategoryAxis>
    </ChartCategoryAxes>

    <ChartValueAxes>
        <ChartValueAxis AxisCrossingValue="@AxisCrossingValue">
            <ChartValueAxisLabels Format="{0}" ></ChartValueAxisLabels>
        </ChartValueAxis>
    </ChartValueAxes>

</TelerikChart>

@code {
    [Parameter] public string BoardID { get; set; }


    public string MySeriesTemplate = "# if (value != 0) { # #=value# #}#";

    bool isLoading = false;
    public string  widgetDesc { get; set; }
    public  custom_widget_master this_widget = new custom_widget_master();
    public List<ModelData> XData = new List<ModelData>();
    public string[] Categories = new string[] { "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011" };
    public object[] AxisCrossingValue = new object[] { -10 };

    public class ModelData {
        public double Series1 { get; set; }
    }

    protected override async Task OnInitializedAsync() {
        isLoading = true;
           this_widget = await Task.Run(() => _customBoardService.GetWidgetInfo("wg103"));
       // this_widget =  _customBoardService.BoardDocset.CustomWidgets.Where(o => o.widget_id == "wg103").FirstOrDefault(); ;
        widgetDesc = this_widget.widget_desc;
        List<WG103Data> query = await Task.Run(() => _g10Service.GetWG103Data(BoardID));
        Categories = query.Select(o => o.TimeRange).ToArray();
        foreach (var q in query) {
            XData.Add(new ModelData { Series1 = q.Count_Result });
        }
        await InvokeAsync(StateHasChanged);
    } 
 }


