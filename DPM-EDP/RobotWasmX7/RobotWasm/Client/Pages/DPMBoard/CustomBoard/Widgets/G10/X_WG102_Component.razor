@inject IJSRuntime jSRuntime;
@using RobotWasm.Shared.Data.ML.DPMBaord.BoardData.Widget.G10
@using Telerik.Blazor

<style>
    .telerik-chart {
        width: 100%;
        height: 100%;
    }

</style>

<h6>@widgetDesc</h6>

<TelerikRootComponent>
    <TelerikChart Width="100%" Height="100%">
   @*         <ChartTitle Text="@widgetDesc"></ChartTitle>*@
    <ChartTooltip Visible="true"></ChartTooltip>
        <ChartTooltip Visible="true"></ChartTooltip>
        <ChartLegend Visible="true" Position="ChartLegendPosition.Right"></ChartLegend>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Bar" Data="@xData" 
                                    ColorField="@nameof(MyChartDataModel.Color)"
                                    
                         Field="@nameof(MyChartDataModel.ItemValue)" 
                         CategoryField="@nameof(MyChartDataModel.Category)" >
                            <ChartSeriesLabels Visible="true" Format="{0} ราย" ></ChartSeriesLabels>
                         </ChartSeries>
                         
        </ChartSeriesItems>
    </TelerikChart>
</TelerikRootComponent>

@code {
    [Parameter] public string BoardID { get; set; }


    bool isLoading = false;
    public string widgetDesc { get; set; }
    public custom_widget_master this_widget = new custom_widget_master();
    public List<MyChartDataModel> xData = new List<MyChartDataModel>();

    public class MyChartDataModel {
        public string Category { get; set; }
        public double ItemValue { get; set; }
        public string Color { get; set; }
    }




    protected override async Task OnInitializedAsync() {
        isLoading = true;
        //this_widget = _customBoardService.BoardDocset.CustomWidgets.Where(o => o.widget_id == "wg102").FirstOrDefault(); ;
         this_widget = await Task.Run(() => _customBoardService.GetWidgetInfo("wg102"));
        widgetDesc = /*this_widget.widget_id+" "+*/this_widget.widget_desc;
        List<WG102Data> query = await Task.Run(() => _g10Service.GetWG102Data(BoardID));
      
        int i = 0;

        foreach (var q in query) {
            string color = "#3E00FF";
            if (i == 2) {
                color = "#643BE3";
            }
            if (i == 3) {
                color = "#A289EF";
            }
            MyChartDataModel n = new MyChartDataModel();
            n.Category = q.Province;
            n.ItemValue = q.Count_Result;
            n.Color = color;

            i++;
            xData.Add(n);
        }
        await InvokeAsync(StateHasChanged);

    }
 }


