@using Microsoft.Extensions.Configuration
@using RobotWasm.Shared.Data.ML.ApiMaster
@using RobotWasm.Shared.Data.ML.DPMBaord.CIMS
@using Telerik.Blazor
@using Telerik.Blazor.Components

<style>
        .lds-dual-ring {
        display: inline-block;
        width: 80px;
        height: 80px;
    }

    .lds-dual-ring:after {
        content: " ";
        display: block;
        width: 64px;
        height: 64px;
        margin: 8px;
        border-radius: 50%;
        border: 6px solid #fff;
        border-color: #fff transparent #fff transparent;
        animation: lds-dual-ring 1.2s linear infinite;
    }

    @@keyframes lds-dual-ring {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .k-loader-container, .k-loader-container-overlay{
        position:fixed !important;
    }

    .demo-container {
        /*position: relative;*/
        height: 300px;
        width: 75%;
        margin: 0 auto;
    }

    .loader-container-heading {
        padding-top: 25px;
    }

    .order-summary-row {
        line-height: 2;
    }

    .kd-demo-heading {
        text-transform: none;
        width: 200px;
        margin: 0 auto;
        font-size: 17px;
        color: #555;
        padding-bottom:0.5em;
    }

    .k-loader-container {
        z-index: 1;
    }
</style>
<div class="row">
    <div class="col-md-12">
        <h4>Shelter</h4>
        <h5>ข้อมูลศูนย์พักพิง Shelter Information.</h5>
    </div>
</div>
<hr />

        <TelerikLoaderContainer Visible="@isLoading">
            <Template>
                <div class="lds-dual-ring"></div>
            </Template>
        </TelerikLoaderContainer>

    <div class="row">
 
        <div class="col-12 text-end">
        <TelerikButton Size="@(ThemeConstants.Button.Size.Medium)"
                       @onclick="@BtnLoad"
                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">โหลดข้อมูล</TelerikButton>
            </div>
    </div>
    <div class="row pt-2">
        <div class="col-md-12">
              <TelerikGrid Data="@ndata" 
                             Pageable="true" Sortable="true" Resizable="true" Reorderable="false" Groupable="false">
                        <GridToolBar>
                            <GridCommandButton Command="ExcelExport" Icon="file-excel">Export to Excel</GridCommandButton>
                            <label class="k-checkbox-label"><TelerikCheckBox @bind-Value="@ExportAllPages" /> Export All Pages</label>
                            <span class="k-toolbar-spacer"></span> @* add this spacer to keep the searchbox on the right *@
                            <GridSearchBox />
                        </GridToolBar>
                        <GridExport>
                            <GridExcelExport FileName="telerik-grid-export" AllPages="@ExportAllPages" OnBeforeExport="@OnBeforeExcelExport" />
                        </GridExport>
                        <GridColumns>
                            <GridColumn Field="@(nameof(Shelter.address))" Title="address" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.amphoe))" Title="amphoe" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.amphurcode))" Title="amphurcode" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.available))" Title="available" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.capacity))" Title="capacity" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.dataid))" Title="dataid" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.electric))" Title="electric" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.entrydate))" Title="entrydate" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.havewater))" Title="havewater" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.image_attachment_1))" Title="image_attachment_1" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.image_attachment_2))" Title="image_attachment_2" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.image_attachment_3))" Title="image_attachment_3" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.image_description_1))" Title="image_description_1" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.image_description_2))" Title="image_description_2" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.image_description_3))" Title="image_description_3" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.label))" Title="label" Width="200px" />
                            <GridColumn Field="@(nameof(Shelter.latitude))" Title="latitude" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.longitude))" Title="longitude" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.map_label))" Title="map_label" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.noti_pcc))" Title="noti_pcc" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.originator_incident_name))" Title="originator_incident_name" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.originator_position))" Title="originator_position" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.poc_agency))" Title="poc_agency" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.poc_name))" Title="poc_name" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.poc_phone))" Title="poc_phone" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.postalcode))" Title="postalcode" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.province))" Title="province" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.provincecode))" Title="provincecode" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.resident_est))" Title="resident_est" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.rest_room))" Title="rest_room" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.shelter_area))" Title="shelter_area" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.shelter_id))" Title="shelter_id" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.shelter_types))" Title="shelter_types" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.shelter_types_specific))" Title="shelter_types_specific" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.sheltertype))" Title="sheltertype" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.status))" Title="status" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.subscribername))" Title="subscribername" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.tambol))" Title="tambol" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.tamboncode))" Title="tamboncode" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.to_ecg))" Title="to_ecg" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.to_pcc))" Title="to_pcc" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.type))" Title="type" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.water_drink))" Title="water_drink" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.water_type))" Title="water_type" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.water_used))" Title="water_used" Width="150px" />
                            <GridColumn Field="@(nameof(Shelter.waterwork))" Title="waterwork" Width="150px" />
                        </GridColumns>
                    </TelerikGrid>
        </div>
    </div>

@code {
    [Inject] public IJSRuntime JsInterop { get; set; }
    [Inject] public IConfiguration config { get; set; }

    bool ExportAllPages { get; set; } = true;
    public List<string> ExportColumns { get; set; } = new List<string>();
    public bool CancelExport { get; set; }
    public string search { get; set; } = "";
    public Shelter data_set { get; set; }
    public List<Shelter> ndata { get; set; }
    bool isLoading = false;

    //bool VisibleLoaded { get; set; }

    protected override async Task OnInitializedAsync() {
        //await LoadData();
    }

    private void OnSearch(object input) {
        if (ndata != null) {
            ndata = ndata.Where(o =>
         (
            o.label.ToLower().Contains(search)
            || o.amphoe.ToLower().Contains(search)
             || search == ""
         )
     ).ToList();
        }
    }

    async private Task LoadData() {
        try {
            isLoading = true;
            var res = await Http.GetAsync($"api/ApiMaster/GetApiInfo?apiid=Shelter");
            var conn = JsonSerializer.Deserialize<vw_api_master>(await res.Content.ReadAsStringAsync(), new JsonSerializerOptions {
                    PropertyNameCaseInsensitive = true,
                    ReferenceHandler = ReferenceHandler.Preserve
                });
            string url = $"{conn.base_url}{conn.api_url}?province={11}";
            var query = await Task.Run(() => _clientService.GetAllAsync<List<Shelter>>(url));
            if (query.StatusCode != "OK") {
                return;
            }
            ndata = (List<Shelter>)query.Result;
            ndata = ndata.Take(100).ToList();
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        } catch (Exception ex) {
            var rr = ex.Message;
        } finally {
            isLoading = false;
        }
    }

    async void BtnLoad() {
        await LoadData();
    }

    public void OnBeforeExcelExport(GridBeforeExcelExportEventArgs args) {
        if (ExportColumns.Any()) {
            args.Columns = args.Columns.Where(col => ExportColumns.Contains(col.Field)).ToList();
        }

        args.IsCancelled = CancelExport;
    }

}
