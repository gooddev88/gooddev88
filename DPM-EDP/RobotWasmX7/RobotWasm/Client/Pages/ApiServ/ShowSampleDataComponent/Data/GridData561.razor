@using Microsoft.Extensions.Configuration
@using RobotWasm.Shared.Data.ML.ApiMaster
@using RobotWasm.Shared.Data.ML.DPMBaord.Data
@using Telerik.Blazor
@using Telerik.Blazor.Components

<style>
        .lds-dual-ring {
        display: inline-block;
        width: 80px;
        height: 80px;
    }

    .lds-dual-ring:after {
        content: " ";
        display: block;
        width: 64px;
        height: 64px;
        margin: 8px;
        border-radius: 50%;
        border: 6px solid #fff;
        border-color: #fff transparent #fff transparent;
        animation: lds-dual-ring 1.2s linear infinite;
    }

    @@keyframes lds-dual-ring {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .k-loader-container, .k-loader-container-overlay{
        position:fixed !important;
    }

    .demo-container {
        /*position: relative;*/
        height: 300px;
        width: 75%;
        margin: 0 auto;
    }

    .loader-container-heading {
        padding-top: 25px;
    }

    .order-summary-row {
        line-height: 2;
    }

    .kd-demo-heading {
        text-transform: none;
        width: 200px;
        margin: 0 auto;
        font-size: 17px;
        color: #555;
        padding-bottom:0.5em;
    }

    .k-loader-container {
        z-index: 1;
    }
</style>
<div class="row">
    <div class="col-md-12">
        <h4>DATA561</h4>
        <h5>อาสาสมัคร</h5>
    </div>
</div>
<hr />

        <TelerikLoaderContainer Visible="@isLoading">
            <Template>
                <div class="lds-dual-ring"></div>
            </Template>
        </TelerikLoaderContainer>

    <div class="row">
        <div class="col-12 text-end">
        <TelerikButton Size="@(ThemeConstants.Button.Size.Medium)"
                       @onclick="@BtnLoad"
                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">โหลดข้อมูล</TelerikButton>
            </div>
    </div>
    <div class="row pt-2">
        <div class="col-md-12">
              <TelerikGrid Data="@ndata"
                             Pageable="true" Sortable="true" Resizable="true" Reorderable="true" Groupable="false">
                        <GridToolBar>
                            <GridCommandButton Command="ExcelExport" Icon="file-excel">Export to Excel</GridCommandButton>
                            <label class="k-checkbox-label"><TelerikCheckBox @bind-Value="@ExportAllPages" /> Export All Pages</label>
                            <span class="k-toolbar-spacer"></span> @* add this spacer to keep the searchbox on the right *@
                            <GridSearchBox />
                        </GridToolBar>
                        <GridExport>
                            <GridExcelExport FileName="telerik-grid-export" AllPages="@ExportAllPages" OnBeforeExport="@OnBeforeExcelExport" />
                        </GridExport>
                        <GridColumns>
 

                <GridColumn Field="@(nameof(dpm_volunteer.code))" Title="code" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.name))" Title="name" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.type))" Title="type" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.address))" Title="address" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.province_id))" Title="province_id" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.province_name))" Title="province_name" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.amphur_id))" Title="amphur_id" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.amphur_name))" Title="amphur_name" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.district_id))" Title="district_id" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.district_name))" Title="district_name" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.tel))" Title="tel" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.fax))" Title="fax" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.email))" Title="email" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.latitude))" Title="latitude" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.longitude))" Title="longitude" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.vol_id))" Title="vol_id" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.center_id))" Title="center_id" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.register_date))" Title="register_date" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.vol_id_card))" Title="vol_id_card" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.prefix))" Title="prefix" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.vol_firstname))" Title="vol_firstname" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.vol_lastname))" Title="vol_lastname" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.vol_birth_date))" Title="vol_birth_date" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.contact_address))" Title="contact_address" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.contact_moo))" Title="contact_moo" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.contact_soi))" Title="contact_soi" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.contact_road))" Title="contact_road" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.contact_province_id))" Title="contact_province_id" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.province_name1))" Title="province_name1" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.contact_amphur_id))" Title="contact_amphur_id" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.amphur_name1))" Title="amphur_name1" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.contact_district_id))" Title="contact_district_id" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.district_name1))" Title="district_name1" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.contact_tel))" Title="contact_tel" Width="100px" />
                <GridColumn Field="@(nameof(dpm_volunteer.id))" Title="id" Width="100px" />
            </GridColumns>
                    </TelerikGrid>
        </div>
    </div>

@code {
    [Inject] public IJSRuntime JsInterop { get; set; }
    [Inject] public IConfiguration config { get; set; }

    bool ExportAllPages { get; set; } = true;
    public List<string> ExportColumns { get; set; } = new List<string>();
    public bool CancelExport { get; set; }
    public string search { get; set; } = "x";
    public Data561Set.DocSet data_set { get; set; }
    public List<dpm_volunteer> ndata { get; set; }
    bool isLoading = false;

    //bool VisibleLoaded { get; set; }

    protected override async Task OnInitializedAsync() {
        //await LoadData();
    }

    private void OnSearch(object input) {
     //   if (data_set != null) {
     //       ndata = data_set.rows.Where(o =>
     //    (
     //        o.province.ToLower().Contains(search)
     //        || o.village.ToLower().Contains(search)
     //        || o.district.ToLower().Contains(search)
     //        || o.subdistrict.ToLower().Contains(search)
     //        || search == ""
     //    )
     //).ToList();
     //   }
    }

    async private Task LoadData() {
        try {
            isLoading = true;
            var res = await Http.GetAsync($"api/ApiMaster/GetApiInfo?apiid=data561");
            var conn = JsonSerializer.Deserialize<vw_api_master>(await res.Content.ReadAsStringAsync(), new JsonSerializerOptions {
                    PropertyNameCaseInsensitive = true,
                    ReferenceHandler = ReferenceHandler.Preserve
                });
            string url = $"{conn.base_url}{conn.api_url}?search={search}";
            var query = await Task.Run(() => _clientService.GetAllAsync<Data561Set.DocSet>(url));
            if (query.StatusCode != "OK") {
                        isLoading = false;
                return;
            }
            data_set = (Data561Set.DocSet)query.Result;
            ndata = data_set.rows;
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        } catch (Exception ex) {
            var rr = ex.Message;
        } finally {
            isLoading = false;
        }
    }

    async void BtnLoad() {
        await LoadData();
    }

    public void OnBeforeExcelExport(GridBeforeExcelExportEventArgs args) {
        if (ExportColumns.Any()) {
            args.Columns = args.Columns.Where(col => ExportColumns.Contains(col.Field)).ToList();
        }

        args.IsCancelled = CancelExport;
    }

}
