@page "/Master/UserList"
@page "/Master/UserList/{x}"

@using RobotWasm.Client.Data.DA.UserGroup
@using System.Text.Json
@using System.Text
@using RobotWasm.Shared.Data.ML.Shared
<style>
</style>

@if (!isLoading) {

        <div class="row">
                        <div class="col-6 pt-2">
                <TelerikButton Size="@(ThemeConstants.Button.Size.Medium)"
                           @onclick="@Back" Class="px-3" FillMode="@(ThemeConstants.Button.FillMode.Solid)"
                           ThemeColor="@(ThemeConstants.Button.ThemeColor.Base)">
                    <span style="font-size: medium;"><i class="fa-solid fa-circle-chevron-left"></i>&nbsp;&nbsp;&nbsp;@menuCaption</span>
                </TelerikButton>
            </div>
            <div class="col-6 text-end pt-2">
            <TelerikButton Size="@(ThemeConstants.Button.Size.Medium)"
                       @onclick="@NewDoc" Class=""
                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Tertiary)">
                <i class="fa-solid fa-circle-plus"></i>&nbsp; เพิ่มผู้ใช้งานระบบ
            </TelerikButton>
            </div>
        </div>

    <div class="row pt-3">
        <div class="col-4">
            <div class="input-group">
                <input type="text" class="form-control form-control-sm" placeholder="คำค้นหา" @bind-value="@SearchText">
                <TelerikButton @onclick="@SearchAction" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">ค้นหา</TelerikButton>
            </div>
        </div>
    </div>


        <div class="row pt-2">
            <div class="col-md-12">
                <TelerikGrid Data=@DocList
                             Pageable="true"
                             Groupable="false"
                             Sortable="true"
                             Resizable="true"
                             Reorderable="true"
                             PageSize="30"
                             Navigable="true">
                    <GridToolBar>
                        <GridCommandButton Command="ExcelExport" Icon="file-excel">Export to Excel</GridCommandButton>
                        <label class="k-checkbox-label"><TelerikCheckBox @bind-Value="@ExportAllPages" />Export All Pages</label>
                    </GridToolBar>

                    <GridExport>
                        <GridExcelExport FileName="telerik-grid-export" AllPages="@ExportAllPages" />
                    </GridExport>
                    <GridColumns>
                        <GridColumn Field="@nameof(user_info.username)" Title="แก้ไข" Editable="false" Width="80px">
                            <Template>
                                @{
                                    var data = context as user_info;
                                    <button class="btn btn-sm" @onclick="@(() => Edit(data))"><i class="fa-solid fa-pen-to-square" style="font-size:20px"></i></button>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(user_info.username)" Title="username" Width="160px" />
                        <GridColumn Field="@nameof(user_info.first_name)" Title="ชื่อ" Width="200px" />
                        <GridColumn Field="@nameof(user_info.last_name)" Title="นามสกุล" Width="200px" />
                        <GridColumn Field="@nameof(user_info.email)" Title="อีเมล์" Width="180px" />
                        @*<GridColumn Field="@nameof(vw_usergroup_info.Sort)" Title="จัดเรียง" DisplayFormat="{0:N0}" Width="150px" />*@
                        <GridColumn Field=@nameof(user_info.created_date) Title="วันที่สร้าง" Width="150px" DisplayFormat="{0:dd/MM/yyyy HH:mm}" />
                        <GridColumn Field=@nameof(user_info.created_by) Title="สร้างโดย" Width="150px" />
                        @if (isDelete) {
                        <GridColumn Title="ลบ" Editable="false" Width="75px">
                            <Template>
                                @{
                                    var data = context as user_info;
                                    <div class="text-center">
                                    <button class="btn btn-sm" @onclick="@(() => DeleteLine(data))"><i class="fa-solid fa-trash" style="font-size:20px"></i>  </button>
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                    }
                    </GridColumns>
                </TelerikGrid>
            </div>
        </div>

    } else {
    <div class="loader-container">
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {
    [Parameter] public string x { get; set; }
    bool isLoading = false;
    string menuCaption = "";
    string menuGroupCaption = "";
    public string SearchText { get; set; } = "";
    bool ExportAllPages { get; set; } = true;
    private bool isDelete = true;
    List<user_info> DocList = new List<user_info>();

    protected override async Task OnInitializedAsync() {
        await Task.Run(() => login.CheckLogin());
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);
    }

    async void LoadData() {
        SetActiveControl();
        DocList = await _userService.ListDoc(SearchText);
        List<string> exclude = new List<string>{"X"};
        if (!string.IsNullOrEmpty(x)) {            
            DocList = DocList.Where(o => exclude.Contains(o.username)).ToList();
        }else {
            DocList = DocList.Where(o => !exclude.Contains(o.username)).ToList();
        }
        isLoading = false;
        await SetActiveControl();
        await InvokeAsync(StateHasChanged);
    }

    async Task SetActiveControl() {
        await CheckPermission();
    }
    async Task CheckPermission() {
        var menu = UserService.GetMenuInfo(login.LogInInfo, "901");
        menuCaption = menu.menu_name;
        menuGroupCaption = UserService.GetMenuGroup(login.LogInInfo, menu.group_id).menu_name;
        var Permissionmenu = login.LogInInfo.UserInMenu.Where(o => o.MenuID == "901").FirstOrDefault();
        if (!Convert.ToBoolean(Permissionmenu.IsDelete))
        {
            isDelete = false;
        }
    }

    async void Edit(user_info select_data) {
        isLoading = true;
        await sessionStorage.SetItemAsync(Globals.ActiveID_USER,select_data.username);
        _userService.DocSet = await Task.Run(()=> _userService.GetDocSet(select_data.username));
        nav.NavigateTo($"Master/UserDetail", false);
        await InvokeAsync(StateHasChanged);
        isLoading = false;
    }

    async void NewDoc() {
        await sessionStorage.RemoveItemAsync(Globals.ActiveID_USER);
        _userService.DocSet = UserService.NewTransaction();
        nav.NavigateTo($"Master/UserDetail", false);
        await InvokeAsync(StateHasChanged);
    }

    async void SearchAction() {
        isLoading = true;
        await Task.Run(LoadData);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

        async void Back() {
        nav.NavigateTo($"Menu/MenuSIDE/400", false);
        await InvokeAsync(StateHasChanged);
    }

        async void DeleteLine(user_info data)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Warning",
                Text = $"ยืนยันการลบผู้ใช้งาน",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No"
            });
        if (string.IsNullOrEmpty(result.Value))
        {
            return;
        }

        var rs = await _userService.DeleteUser(data.username);
        var r = await _logTranService.CreateTransLog(data.username,login.LogInInfo.CurrentUser, "ผู้ใช้งานระบบ", "ลบผู้ใช้งานระบบ");
        isLoading = true;
        if (rs.Result == "ok")
        {
            await Task.Run(LoadData);
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            await Swal.FireAsync("", rs.Message1, "error");
        }
    }

}
