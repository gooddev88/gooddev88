@using Blazorise.Localization
@using RobotWasm.Client.Pages
@using Microsoft.AspNetCore.Components.Authorization
@using RobotWasm.Client.Pages.Login
@using Blazorise
@using RobotWasm.Shared.Data.GaDB

@inherits LayoutComponentBase

<style>
    .container-lg {
        max-width: 1460px;
    }

    .d-none {
        display: inline-block !important;
    }

    .bg-dark {
        background-color: #FFC700 !important;
    }

    .Tangerine-Yellow {
        background-color: #FFC700 !important;
        color: black !important;
    }

    .b-bar-vertical-inline.b-bar-dark
    .b-bar-link:hover,
    .b-bar-vertical-popout.b-bar-dark
    .b-bar-link:hover, .b-bar-vertical-small.b-bar-dark
    .b-bar-link:hover {
        color: black !important;
    }

    .b-bar-vertical-inline.b-bar-dark
    .b-bar-dropdown-menu
    .b-bar-dropdown-item:hover,
    .b-bar-vertical-popout.b-bar-dark
    .b-bar-dropdown-menu .b-bar-dropdown-item:hover,
    .b-bar-vertical-small.b-bar-dark .b-bar-dropdown-menu
    .b-bar-dropdown-item:hover {
        color: black !important;
    }

    button.dropdown-toggle {
        color: black !important;
    }

        button.dropdown-toggle:hover {
            background-color: transparent !important;
            color: black !important;
        }

    /*input search*/
    .input-elevated {
        font-size: 16px;
        line-height: 1.5;
        border: none;
        /* background: #FFFFFF;
                                background-image: url("img/search.svg");
                                background-repeat: no-repeat;
                                background-position: 10px 10px;
                                background-size: 20px 20px;*/
        box-shadow: 0 2px 4px 0 rgba(0,0,0,0.08);
        border-radius: 5px;
        text-align: center;
        /*width: 300px;*/
        padding: .5em 1em .5em 1em;
    }

        .input-elevated::placeholder {
            color: #838D99;
        }

        .input-elevated:focus {
            outline: none;
            box-shadow: 0 4px 10px 0 rgba(0,0,0,0.16);
        }

    .bg-Lightgray {
        background-color: #ededf5 !important;
    }
</style>

@*<AuthorizeView>
    <Authorized>*@

@*<NavMenu/>*@

<Layout Sider Class="b-docs">

    <LayoutSider>
        <LayoutSiderContent>
            <Bar @ref="@sideBar" Breakpoint="Breakpoint.Desktop" NavigationBreakpoint="Breakpoint.Tablet" Background="Background.Dark" ThemeContrast="ThemeContrast.Dark"
                 Mode="BarMode.VerticalInline" CollapseMode="BarCollapseMode.Hide">
                <BarBrand>
                    <BarItem>
                        @*<BarLink To="Menu/MainMenu">
                            <BarIcon IconName="customIcon" Display="Display.InlineBlock" />
                            APP ACCY
                            </BarLink>*@
                        <BarLink To="/" Class="Tangerine-Yellow">
                            <BarIcon IconName="customIcon" Display="Display.InlineBlock" />
                            EDP
                        </BarLink>
                    </BarItem>
                </BarBrand>
                <BarMenu>
                    <BarStart>

                        <BarItem>
                            <BarLink Class="Tangerine-Yellow" @onclick="@GoFirstBoard">
                                <i class="fa-solid fa-house"></i>&nbsp;
                                หน้าหลัก
                            </BarLink>
                        </BarItem>

                        @if (UserInMenu != null)
                        {


                            @foreach (var menu in UserInMenu.Where(o => o.TypeID == "MENUGROUP" && o.GroupID != "SETUP"))
                            {
                                @if (menu.IsOpen == true)
                                {
                                    <BarItem>
                                        @if (!string.IsNullOrEmpty(menu.Url))
                                        {
                                            <BarLink Class="Tangerine-Yellow" @onclick="@(() => ChangeURL(menu.Url))">
                                                <i class="@menu.Icon"></i>&nbsp;
                                                @menu.MenuDesc1
                                            </BarLink>

                                        }
                                        else
                                        {
                                            <BarDropdown @bind-Visible="@menu.IsToggleGroupmenu" Class="Tangerine-Yellow">
                                                <BarDropdownToggle>
                                                    <i class="@menu.Icon"></i>&nbsp;
                                                    @menu.MenuDesc1
                                                </BarDropdownToggle>
                                                @foreach (var lm in UserInMenu.Where(o => o.GroupID == menu.GroupID && o.TypeID != "MENUGROUP"))
                                                {
                                                    @if (lm.IsOpen == true)
                                                    {
                                                        <BarDropdownMenu Class="Tangerine-Yellow">
                                                            <BarDropdownItem @onclick="@(() => ChangeURL(lm.Url))">
                                                                @lm.MenuDesc1
                                                            </BarDropdownItem>
                                                        </BarDropdownMenu>
                                                    }
                                                }
                                            </BarDropdown>
                                        }
                                    </BarItem>
                                }
                            }
                        }
                        @if (Username == "X")
                        {
                            <BarItem>
                                <BarLink Class="Tangerine-Yellow" @onclick="@GoToLogin">
                                    <i class="fas fa-key"></i>&nbsp;
                                    เข้าสู่ระบบ
                                </BarLink>
                            </BarItem>
                        }
                        else
                        {
                            <BarItem>
                                <BarDropdown>
                                    <BarDropdownToggle Class="Tangerine-Yellow">
                                        <i class="fa-solid fa-unlock"></i>&nbsp;
                                        ตั้งค่า
                                    </BarDropdownToggle>
                                    <BarDropdownMenu Class="Tangerine-Yellow">
                                        @if (UserInMenu != null)
                                        {
                                            @foreach (var menu in UserInMenu.Where(o => o.TypeID == "MASTER" || o.TypeID == "SETUP ALL"))
                                            {
                                                @if (menu.IsOpen == true)
                                                {
                                                    <BarDropdownItem @onclick="@(() => ChangeURL(menu.Url))">
                                                        @menu.MenuDesc1
                                                    </BarDropdownItem>
                                                }
                                            }
                                        }
                                        <BarDropdownItem @onclick="@LogOut">ออกจากระบบ</BarDropdownItem>
                                    </BarDropdownMenu>
                                </BarDropdown>
                            </BarItem>
                        }
                    </BarStart>
                </BarMenu>
            </Bar>
        </LayoutSiderContent>
    </LayoutSider>

    <Layout>
        <LayoutHeader ElementId="docs-layout-header">
            <Bar Class="b-top-bar" @ref="@topBar" @bind-Visible="@topBarVisible" Style="justify-content:start !important;"
                 Breakpoint="Breakpoint.Desktop" Background="Background.Dark" ThemeContrast="ThemeContrast.Dark">
                <BarToggler Bar="@sideBar" Border="Border.Is0" />
                <BarBrand Display="Display.None.InlineBlock.OnWidescreen">
                    <div class="input-group">
                        <input class="input-elevated" @bind="@search" type="text" placeholder="ค้นหา">
                        <a class="btn" style="background-color: tomato;color: white;" @onclick="@GoTOPage">
                            <i class="fa-solid fa-magnifying-glass"></i>
                        </a>
                    </div>
                </BarBrand>
                @* <BarBrand Display="Display.None.InlineBlock.OnDesktop">
                    <BarItem>
                    </BarItem>
                    </BarBrand>*@
                @*  <BarItem Class="text-center">
                    555555555555555555555
                    </BarItem>*@
                <BarMenu>
                    <BarEnd>
                        @if (Username == "X")
                        {
                            <Dropdown Class="Tangerine-Yellow">
                                <DropdownToggle Color="Color.Default" Class="text-white">
                                    <i class="fas fa-key"></i>&nbsp;
                                    เข้าสู่ระบบ
                                </DropdownToggle>
                                <DropdownMenu>
                                    <DropdownItem @onclick="@GoToLogin">เข้าสู่ระบบ</DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        }
                        else
                        {
                            <Dropdown Class="Tangerine-Yellow">
                                <DropdownToggle Color="Color.Default" Class="text-white">
                                    <i class="fa-solid fa-circle-user fa-lg"></i>&nbsp;
                                    @Username
                                </DropdownToggle>
                                <DropdownMenu>
                                    @if (UserInMenu != null)
                                    {
                                        @foreach (var menu in UserInMenu.Where(o => o.TypeID == "MASTER" || o.TypeID == "SETUP ALL"))
                                        {
                                            @if (menu.IsOpen == true)
                                            {
                                                <DropdownItem @onclick="@(() => ChangeURL(menu.Url))">
                                                    @menu.MenuDesc1
                                                </DropdownItem>
                                            }
                                        }
                                    }
                                    <DropdownItem @onclick="@LogOut">ออกจากระบบ</DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        }
                    </BarEnd>
                </BarMenu>
            </Bar>
        </LayoutHeader>
        <LayoutContent Padding="Padding.Is0.OnX.Is4.OnY.Is2.OnWidescreen" Class="pb-4 pt-2">
            <Container Breakpoint="Breakpoint.Widescreen">
                <TelerikRootComponent>
                    @Body
                </TelerikRootComponent>
            </Container>
        </LayoutContent>
    </Layout>
</Layout>
@*    </Authorized>
    <NotAuthorized>
    <AuthzRedirect></AuthzRedirect>
    </NotAuthorized>
    </AuthorizeView>*@


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    public List<vw_PermissionInMenu> UserInMenu { get; set; } = new List<vw_PermissionInMenu>();
    string search = "";
    public string Username { get; set; }
    //public string CompanyName { get; set; }

    public string color { get; set; } = "darkcyan";

    private Bar sideBar;

    private Bar topBar;

    private bool topBarVisible;

    //private bool sideBarFormMenuVisible;

    //private bool disposed;

    public string first_board_url = "Dashboard/StartBoard";

    // RenderFragment customIcon = @<Image Source="/assets/img/logo_top.png" Style="width:120px" />
    RenderFragment customIcon = @<Image Source="img/dpmlogo_circle.png" Style="width:35px" />
    ;

    protected override async Task OnInitializedAsync()
    {
        //first_board_url=  login.GetFirstBoardUrl();
        await Task.Run(login.CheckLogin);
        first_board_url = await Task.Run(() => login.GetFirstBoardUrl());
        var filter_app = new List<string> { "DPMQ", "CIMS" };
        UserInMenu = login.LogInInfo.UserInMenuDisplay.Where(o => filter_app.Contains(o.AppID)).ToList();

        await Task.Run(LoadData);
        Username = await _localStorage.GetItemAsync
    <string>(Globals.AuthUsername);

        nav.LocationChanged += OnLocationChanged;
        await SelectCulture("en-US");
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }

    async void LoadData()
    {

        //Username  = await _localStorage.GetItemAsync<string>(Globals.AuthUsername);
        if (login.LogInInfo != null)
        {
            Username = login.LogInInfo.CurrentUserInfo.FullName;
        }
    }


    private void GoFirstBoard()
    {
        first_board_url = login.GetFirstBoardUrl();
        nav.NavigateTo(first_board_url);
    }
    private void GoToLogin()
    {

        nav.NavigateTo("Login", true);
    }

    private Task SelectCulture(string name)
    {
        LocalizationService.ChangeLanguage(name);
        return Task.CompletedTask;
    }

    Task OnThemeEnabledChanged(bool value)
    {
        if (Theme == null)
            return Task.CompletedTask;

        Theme.Enabled = value;

        Theme.ThemeHasChanged();

        return Task.CompletedTask;
    }

    Task OnThemeGradientChanged(bool value)
    {
        if (Theme == null)
            return Task.CompletedTask;

        Theme.IsGradient = value;

        //if ( Theme.GradientOptions == null )
        //    Theme.GradientOptions = new GradientOptions();

        //Theme.GradientOptions.BlendPercentage = 80;

        Theme.ThemeHasChanged();

        return Task.CompletedTask;
    }

    Task OnThemeRoundedChanged(bool value)
    {
        if (Theme == null)
            return Task.CompletedTask;

        Theme.IsRounded = value;

        Theme.ThemeHasChanged();

        return Task.CompletedTask;
    }

    Task OnThemeColorChanged(string value)
    {
        if (Theme == null)
            return Task.CompletedTask;

        Theme.ColorOptions ??= new();

        Theme.BackgroundOptions ??= new();

        Theme.TextColorOptions ??= new();

        Theme.ColorOptions.Primary = value;
        Theme.BackgroundOptions.Primary = value;
        Theme.TextColorOptions.Primary = value;

        Theme.InputOptions ??= new();

        //Theme.InputOptions.Color = value;
        Theme.InputOptions.CheckColor = value;
        Theme.InputOptions.SliderColor = value;

        Theme.SpinKitOptions ??= new();

        Theme.SpinKitOptions.Color = value;

        Theme.ThemeHasChanged();

        return Task.CompletedTask;
    }

    [Inject] protected ITextLocalizerService LocalizationService { get; set; }

    [CascadingParameter] protected Theme Theme { get; set; }
    void LogOut(string id)
    {
        nav.NavigateTo("Logout", false);
    }


    #region Methods Theme

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        //await JSRuntime.InvokeVoidAsync( "blazoriseDocs.navigation.scrollToTop" );
    }

    //protected virtual void Dispose(bool disposing) {
    //    if (!disposed) {
    //        if (disposing) {
    //            nav.LocationChanged -= OnLocationChanged;
    //        }

    //        disposed = true;
    //    }
    //}

    //public void Dispose() {
    //    Dispose(true);
    //    GC.SuppressFinalize(this);
    //}
    #endregion

    async private Task LogOut()
    {
        await login.Logout();
        //nav.NavigateTo("/", true);
        //nav.NavigateTo("Dashboard/StartBoard", true);
        //  GoFirstBoard();
    }

    async private Task ChangeURL(string url)
    {
        nav.NavigateTo(url, false);
        await InvokeAsync(StateHasChanged);
    }

    async void GoTOPage()
    {
        string s = search;
        search = "";
        nav.NavigateTo($"DPMBoard/ExclusiveBoard/ExclusiveBoard/{s}", false);
        await InvokeAsync(StateHasChanged);
    }

    async void GoToUser()
    {
        var user = login.LogInInfo.CurrentUserInfo.Username;
        await sessionStorage.SetItemAsync(Globals.ActiveID_USER, user);
        _userService.DocSet = await Task.Run(() => _userService.GetDocSet(user));
        nav.NavigateTo($"Master/UserDetail", false);
    }

    //async Task GetFirstBoardUrl() {
    //    if (login.LoginInfo == null) {
    //          first_board_url = "Dashboard/StartBoard";
    //    }else {
    //           if (login.LoginInfo?.UserInBoard.Count == 0) {
    //        first_board_url = "Dashboard/StartBoard";
    //    } else {
    //        var get_first_board = login.LoginInfo?.UserInBoard.OrderBy(o => o.BoardSort).FirstOrDefault();
    //        first_board_url = get_first_board.BoardUrl;
    //    }
    //    }
    //}

    //private  string GoFirstBoard() {
    //    string url = "";
    //    if (login.LoginInfo?.UserInBoard.Count == 0) {
    //            nav.NavigateTo("Dashboard/StartBoard", false);
    //        } else {
    //            var get_first_board = login.LoginInfo?.UserInBoard.OrderBy(o=>o.BoardSort).FirstOrDefault();
    //            nav.NavigateTo(get_first_board.BoardUrl, false);
    //        }

    //}
}
