@page "/Master/MasterTypeList"

@using Blazorise
@using RobotWasm.Client.Data.DA.UserGroup
@using System.Text.Json
@using System.Text
@using RobotWasm.Shared.Data.ML.Shared
@using RobotWasm.Shared.Data.GaDB
<style>
</style>

@if (!isLoading) {

        <div class="row">
        <div class="col-6 pt-2">
            <Breadcrumb Mode="BreadcrumbMode.Auto">
                <BreadcrumbItem>
                    <BreadcrumbLink To="Dashboard/StartBoard">@menuGroupCaption</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <BreadcrumbLink To="Master/MasterTypeList">@menuCaption</BreadcrumbLink>
                </BreadcrumbItem>
            </Breadcrumb>
        </div>
        </div>

    @* --ค้นหา--*@
    <Accordion>
        <Collapse Visible="@collapse1Visible">
            <CollapseHeader>
                <Heading Size="HeadingSize.Is1">
                    <Button Clicked="@(()=>collapse1Visible = !collapse1Visible)">แสดงการค้นหา</Button>
                </Heading>
            </CollapseHeader>
            <CollapseBody>
                <div class="row">
                    <div class="col-4">
                        <div class="input-group">
                            <input type="text" class="form-control form-control-sm" placeholder="คำค้นหา" @bind-value="@SearchText">
                            <TelerikButton @onclick="@SearchAction" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">ค้นหา</TelerikButton>
                        </div>
                    </div>
                </div>
            </CollapseBody>
        </Collapse>
    </Accordion>


        <div class="row pt-2">
            <div class="col-md-12">
                <TelerikGrid Data=@DocList
                             Pageable="true"
                             Groupable="false"
                             Sortable="true"
                             Resizable="true"
                             Reorderable="true"
                             PageSize="30"
                             Navigable="true">
                    @*<GridToolBar>
                        <GridCommandButton Command="ExcelExport" Icon="file-excel">Export to Excel</GridCommandButton>
                        <label class="k-checkbox-label"><TelerikCheckBox @bind-Value="@ExportAllPages" />Export All Pages</label>
                    </GridToolBar>*@

                    <GridExport>
                        <GridExcelExport FileName="telerik-grid-export" AllPages="@ExportAllPages" />
                    </GridExport>
                    <GridColumns>
                        <GridColumn Title="แก้ไข" Editable="false" Width="80px">
                            <Template>
                                @{
                                    var data = context as MasterTypeHead;
                                    <button class="btn btn-sm" @onclick="@(() => Edit(data))"><i class="fa fa-edit" style="font-size:20px"></i></button>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(MasterTypeHead.MasterTypeID)" Title="รหัสตัวเลือก" Width="150px" />
                        <GridColumn Field="@nameof(MasterTypeHead.Name)" Title="ชื่อตัวเลือก" Width="400px" />
                        <GridColumn Field="@nameof(MasterTypeHead.UseFor)" Title="ระดับใช้งาน" Width="150px" />
                        <GridColumn Field="@nameof(MasterTypeHead.Remark)" Title="หมายเหตุ" Width="200px" />
                        </GridColumns>
                </TelerikGrid>
            </div>
        </div>

    } else {
    <div class="loader-container">
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {
    bool isLoading = false;
    bool collapse1Visible = true;
    string menuCaption = "";
    string menuGroupCaption = "";
    public string SearchText { get; set; } = "";
    bool ExportAllPages { get; set; } = true;
    List<MasterTypeHead>? DocList = new List<MasterTypeHead>();

    protected override async Task OnInitializedAsync() {
        await Task.Run(() => login.CheckLogin());
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);
    }

    async void LoadData() {
        DocList = await _masterTypeService.ListDoc(SearchText);
        isLoading = false;
        await SetActiveControl();
        await InvokeAsync(StateHasChanged);
    }

    async Task SetActiveControl() {
        await CheckPermission();
    }
    async Task CheckPermission() {
        var menu = UserService.GetMenuInfo(login.LogInInfo, "9911");
        menuCaption = menu.Name;
        menuGroupCaption = UserService.GetMenuGroup(login.LogInInfo, menu.GroupID).Name;
    }

    async void Edit(MasterTypeHead select_data) {
        string userlogin = login.LogInInfo.CurrentUser;
        string rcom = login.LogInInfo.CurrentRootCompany.CompanyID;
        isLoading = true;
        await sessionStorage.SetItemAsync(Globals.Active_MastertypeID,select_data.MasterTypeID);
        _masterTypeService.DocSet = await Task.Run(()=> _masterTypeService.GetDocSet(select_data.MasterTypeID,rcom));
        nav.NavigateTo($"Master/MasterTypeDetail", false);
        await InvokeAsync(StateHasChanged);
        isLoading = false;
    }


    async void SearchAction() {
        isLoading = true;
        await Task.Run(LoadData);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}
