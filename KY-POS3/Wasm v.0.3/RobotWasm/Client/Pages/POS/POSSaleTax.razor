@page "/POS/POSSaleTax"

@using System.Text.Json
@using System.Text
@using RobotWasm.Shared.Data.DA;
@using RobotWasm.Shared.Data.ML.Login;
@using RobotWasm.Shared.Data.ML.Shared
@using Blazorise
@using RobotWasm.Shared.Data.GaDB

<div class="row card-top-menu">
    <a class="p-0 text-decoration-none text-dark" @onclick="@GoBack">
        <div class="text-center">
            <div class="d-inline-block float-start"><i class="fa-solid fa-circle-chevron-left fa-2x"></i></div>
            <div class="d-inline-block"><span class="fw-bold" style="font-size:large;">ใบกำกับภาษี</span></div>
        </div>
    </a>
</div>

<div class="row pt-2">
    <div class="col-md-10 col-sm-10 col-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">

                        <div class="row pt-2">
                            <div class="col-12">
                                <label>ชื่อลูกค้า</label>
                                <TelerikTextBox @bind-Value="@_posService.DocSet.Head.CustomerName"
                                                Size="@ThemeConstants.DropDownList.Size.Medium" />

                            </div>
                        </div>
                        <div class="row pt-2">
                            <div class="col-12">
                                <label>สาขา</label>
                                <TelerikTextBox @bind-Value="@_posService.DocSet.Head.CustBranchName"
                                                Size="@ThemeConstants.DropDownList.Size.Medium" />

                            </div>
                        </div>
                        <div class="row pt-2">
                            <div class="col-12">
                                <label>ที่อยู่ 1</label>
                                <TelerikTextBox @bind-Value="@_posService.DocSet.Head.CustAddr1"
                                                Size="@ThemeConstants.DropDownList.Size.Medium" />
                            </div>
                        </div>
                        <div class="row pt-2">
                            <div class="col-12">
                                <label>ที่อยู่ 2</label>
                                <TelerikTextBox @bind-Value="@_posService.DocSet.Head.CustAddr1"
                                                Size="@ThemeConstants.DropDownList.Size.Medium" />

                            </div>
                        </div>
                        <div class="row pt-2">
                            <div class="col-12">
                                <label>เลขผู้เสียภาษี</label>
                                <TelerikTextBox @bind-Value="@_posService.DocSet.Head.CustTaxID"
                                                Size="@ThemeConstants.DropDownList.Size.Medium" />
                            </div>
                        </div>

                        <div class="row pt-3">
                            <div class="col-12">
                                <TelerikButton Class="w-100 rounded-pill" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)" @onclick="@OnSaveAndPrintTax"
                                               Size="@(ThemeConstants.Button.Size.Large)">
                                    พิมพ์ใบกำกับ
                                </TelerikButton>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div>
    <TelerikLoaderContainer Size="@ThemeConstants.Loader.Size.Large"
                            Text="ระบบกำลังประมวลผล ....."
                            Visible="@isLoading"
                            LoaderPosition="@LoaderPosition.End"></TelerikLoaderContainer>
</div>

@code {
    bool isLoading = false;

    protected override async Task OnInitializedAsync() {
        isLoading = true;
        await Task.Run(() => login.CheckLogin());
        await Task.Run(() => CheckIsRefresh());
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);
    }

    async Task CheckIsRefresh() {
        if (_posService.DocSet == null) {
            var docid = await sessionStorage.GetItemAsync<string>(Globals.SessionActive_PosID);
            string rcom = await _localStorage.GetItemAsync<string>(Globals.localStorageRcomID) ?? "";
            if (!string.IsNullOrEmpty(docid)) {
                _posService.DocSet = await Task.Run(() => _posService.GetDocSet(docid, rcom));
            } else {
                nav.NavigateTo("POS/POSSaleDetail");
                await InvokeAsync(StateHasChanged);
                return;
            }

            if (_posService.Menu.Count() == 0) {
                _posService.Menu = await Task.Run(() => _posService.ListMenuItem(_posService.DocSet.Head.RComID, _posService.DocSet.Head.ComID, _posService.DocSet.Head.ShipToUsePrice));
            } else {
                foreach (var l in _posService.DocSet.Line) {
                    if (_posService.Menu != null) {
                        var iInfo = _posService.Menu.Where(o => o.ItemID == l.ItemID).FirstOrDefault();
                        if (iInfo != null) {
                            l.ImageUrl = iInfo.ImageUrl;
                            l.ImageSource = iInfo.ImageUrl;
                        }
                    }
                }
            }

            if (_posService.ItemCate.Count() == 0) {
                _posService.ItemCate = await Task.Run(() => _posService.ListItemCate(_posService.DocSet.Head.RComID));
            }

            if (_posService.Tenders.Count() == 0) {
                _posService.Tenders = ListTenderType();
            }
        }
    }

    async void LoadData() {
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    bool ValidData() {
        var h = _posService.DocSet.Head;
        var line = _posService.DocSet.Line;

        bool isvalid = true;
        string Errmsg = "";
        if (line.Count() == 0) {
            Errmsg = "ไม่พบรายการสินค้า";
            isvalid = false;
        }

        if (h.CustomerName != "" && h.CustomerName.Length > 45) {
            Errmsg = "!! ไม่ได้กรอกข้อมูล หรือ ชื่อลูกหค้าห้ามเกิน 45 ตัวอักษร";
            isvalid = false;
        }

        if (h.CustBranchName != "" && h.CustBranchName.Length > 45) {
            Errmsg = "!! ไม่ได้กรอกข้อมูล หรือ สาขาห้ามเกิน 45 ตัวอักษร";
            isvalid = false;
        }

        if (h.CustAddr1 != "" && h.CustAddr1.Length > 45) {
            Errmsg = "!! ไม่ได้กรอกข้อมูล หรือ ที่อยู่ 1 ห้ามเกิน 45 ตัวอักษร";
            isvalid = false;
        }

        if (h.CustAddr2 != "" && h.CustAddr2.Length > 45) {
            Errmsg = "!! ไม่ได้กรอกข้อมูล หรือ ที่อยู่ 2 ห้ามเกิน 45 ตัวอักษร";
            isvalid = false;
        }

        if (h.CustTaxID != "" && h.CustTaxID.Length > 13) {
            Errmsg = "!! ไม่ได้กรอกข้อมูล หรือ เลขผู้เสียภาษี ห้ามเกิน 13 ตัวอักษร";
            isvalid = false;
        }

        if (!isvalid) {
            Swal.FireAsync("Warning", Errmsg, "info");
        }
        return isvalid;
    }

    async Task OnSaveAndPrintTax() {
        if (!ValidData()) {
            return;
        }

        isLoading = true;

        _posService.DocSet.Head.ModifiedBy = login.LogInInfo.CurrentUser;
        var rr = await Task.Run(() => _posService.SaveTaxSlip(_posService.DocSet));
        if (rr.Result == "fail") {
            await Swal.FireAsync("", rr.Message1, "error");
            isLoading = false;
            return;
        } else {
            _posService.DocSet.Head.FINVID = rr.Message2;
        }
        isLoading = false;
    }

    void GoBack() {
        nav.NavigateTo("POS/POSSaleDetail");
    }
}
