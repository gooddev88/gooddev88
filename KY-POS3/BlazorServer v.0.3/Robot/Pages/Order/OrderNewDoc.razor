@page "/Order/OrderNewDoc/{menu}"

@using Robot.POS.DA;
@using Telerik.Blazor.Components.Upload;
@using static Robot.Data.DA.CompanyService;
@using static Robot.POS.DA.POSOrderService;

@inject POSOrderService posorderService



<div class="row pt-3">
    <div class="col-10 mx-auto text-start">
        <h2>
            เลือกสาขา
        </h2>
    </div>
</div>

<div class="row pt-3">
    <div class="col-md-10 mx-auto">
        @foreach (var l in DocList) {
            <div class="row pb-2 ">
                <div class="col-md-12">
                    <div class="card" style="background-color:#c7c7c7;">
                        <div class="card-body">
                            <a class="btn p-0 w-100" Width="100%" @onclick="@(() => GoToPOSORDER(l))">
                                <div class="row">
                                    <div class="col-md-12 text-left">
                                        <div class="row">
                                            <div class="col-md-1 text-center">
                                                <span style="color: lightseagreen; font-size: large">
                                                    <i class="fas fa-star fa-2x"></i>
                                                </span>
                                            </div>
                                            <div class="col-md-11 text-start">
                                                <span style="color: black; font-size: x-large"> @l.CompanyID </span><br />
                                                <span style="color: gray; font-size: large"> @l.Name </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    [Parameter] public string menu { get; set; } = "";

    bool isLoading = true;
    List<CompanyInfoList> DocList = new List<CompanyInfoList>();

    protected override async Task OnInitializedAsync() {
        pageHistory.AddPageToHistory(nav.Uri);
        await Task.Run(() => login.CheckLogin());
        await Task.Run(LoadData);
        await InvokeAsync(StateHasChanged);
    }

    async void LoadData() {
        DocList = CompanyService.ListCompanyInfoUIC(login.LoginInfo, "BRANCH", false);

        isLoading = false;
        InvokeAsync(StateHasChanged);
    }


    async void GoToPOSORDER(CompanyInfoList select_data) {
        var rcom = login.LoginInfo.CurrentRootCompany.CompanyID;
        var com = login.LoginInfo.CurrentCompany.CompanyID;
        var user = login.LoginInfo.CurrentUser;


        isLoading = true;
        await sessionStorage.RemoveItemAsync(POSOrderService.sessionActiveId);
        posorderService.DocSet = POSOrderService.NewTransaction("ORDER",rcom);
        posorderService.DocSet.head.CreatedBy = user;
        posorderService.DocSet.head.CustID = select_data.CompanyID;
        posorderService.DocSet.head.CustName = select_data.Name;
        await sessionStorage.SetItemAsync(POSOrderService.sessionDocType,"ORDER");
        OrderDetail.txtorderid = "";
        nav.NavigateTo($"Order/OrderDetail/{menu}", false);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

}
