@page "/POSV3/POSShipToPage"

@using Robot.Data.DA.POSSY
@using Robot.Data.DA
@using Robot.Data.GADB.TT
@using System.Threading;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore
@using static Robot.Data.DA.POSSY.ShipToService

@inject POSService posService
@inject LogInService login
@inject IJSRuntime JsRuntime
@inject NavigationManager nav
@inject ShipToService shiptoService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="row pt-2 px-2">
    <div class="col-12">
        <div class="card" style="border-radius: 10px;">
            <div class="card-body p-3">
                <div class="row">
                    <div class="col-md-1 col-sm-2 col-2 text-left">
                        <a ID="btnback" class="" @onclick="@Back">
                            <img src="/SALE/assets/img/back.png" style="width:2rem;" />
                        </a>&nbsp;
                    </div>
                    <div class="col-md-11 col-sm-10 col-10 pl-0 text-left">
                        <strong style="font-size:2rem; color:crimson;">ช่องทางจำหน่าย</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row pt-2 px-2">
    <div class="col-12">
        <RadzenDataList WrapItems="true" AllowPaging="true" Data="@shiptoList" TItem="ShipToService.ShipTo" PageSize="10000">
            <Template Context="s">
                <div class="card w-100 m-0 px-2 py-2 mt-2">
                    <div class="card-body p-0 px-2 w-100">
                        <a class="btn p-0 w-100" style="height: auto;" @onclick="@(() => GoToPOSSale(s))">

                            <div class="row pt-2">
                                <div class="col-4 pt-1 text-left">
                                    <img src='@s.ImageUrl' alt="" style="width: 4.5rem;" />
                                </div>
                                <div class="col-8 text-right pt-3">
                                    <span style="color: cadetblue; font-size: 2rem; font-weight:bold;">@s.ShipToName &nbsp;</span>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>
            </Template>
        </RadzenDataList>

    </div>
</div>


@code {
    bool isLoading = true;
    //public LogInService.LoginSet login { get; set; }
    private SizeMode ControlSizeMode = SizeMode.Medium;

    IEnumerable<ShipTo> shiptoList;


    protected override async Task OnInitializedAsync()
    {
        if (posService.DocSet == null) {
            posService.DocSet = await Task.Run(() => posService.GetSessionDocSet());
            // posService.Menu = await Task.Run(() => posService.GetSessionMenu());
            posService.Menu = posService.ListMenuItem(posService.DocSet.Head.RComID, posService.DocSet.Head.ComID, posService.DocSet.Head.ShipToUsePrice);
            posService.Tenders = await Task.Run(() => posService.GetSessionTenders());
            if (posService.DocSet == null) {
                nav.NavigateTo($"POS/POSSaleNewDoc/{posService.DocSet.Head.ComID}", false);
            }
        }
        await Task.Run(LoadData);
        isLoading = false;
    }
    void LoadData()
    {
        shiptoList = ShipToService.ListShipTo();
    }
    async void GoToPOSSale(ShipTo data)
    {
        posService.DocSet = await Task.Run(() => posService.NewTransaction(login.LoginInfo, "webv2", data.ShipToID));
        posService.DocSet.Head.BillDate = login.LoginInfo.CurrentTransactionDate;
        posService.DocSet.Head.ComID = login.LoginInfo.CurrentCompany.CompanyID;

        await Task.Run(() => login.SetLoginSessionLog(login.LoginInfo));
        //await Task.Run(() => posService.SetSessionDocSet(posService.DocSet));
        //await Task.Run(() => posService.SetSessionMenu(posService.Menu));
        nav.NavigateTo($"POSV3/POSSaleDetail", false);
        await InvokeAsync(StateHasChanged);
    }

    async void Back()
    {
        await Task.Run(() => login.SetLoginSessionLog(login.LoginInfo));
        nav.NavigateTo($"POSV3/POSSaleDetail", false);
        await InvokeAsync(StateHasChanged);
    }

}
