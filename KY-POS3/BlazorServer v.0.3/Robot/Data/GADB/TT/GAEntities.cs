// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using System.Configuration;

#nullable disable

namespace Robot.Data.GADB.TT {
    public partial class GAEntities : DbContext {
        private readonly IConfiguration Configuration;
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
            //optionsBuilder.UseSqlServer(Configuration["GAEntities:ConnectionString"]);
            optionsBuilder.UseSqlServer(Globals.GAEntitiesConn);
        }
        public GAEntities() { }
        //public GAEntities(IConfiguration configuration)
        //{ 
        //    Configuration = configuration;
        //}

        public GAEntities(DbContextOptions<GAEntities> options)
            : base(options) {
        }

        public virtual DbSet<Addr_Amphoe> Addr_Amphoe { get; set; }
        public virtual DbSet<Addr_Country> Addr_Country { get; set; }
        public virtual DbSet<Addr_District> Addr_District { get; set; }
        public virtual DbSet<Addr_Province> Addr_Province { get; set; }
        public virtual DbSet<BankInfo> BankInfo { get; set; }
        public virtual DbSet<BookBankInfo> BookBankInfo { get; set; }
        public virtual DbSet<CompanyInfo> CompanyInfo { get; set; }
        public virtual DbSet<CompanyRoot> CompanyRoot { get; set; }
        public virtual DbSet<Config> Config { get; set; }
        public virtual DbSet<CreditTerm> CreditTerm { get; set; }
        public virtual DbSet<CurrencyInfo> CurrencyInfo { get; set; }
        public virtual DbSet<CustomerInfo> CustomerInfo { get; set; }
        public virtual DbSet<DashBoard> DashBoard { get; set; }
        public virtual DbSet<DashBoardMenu> DashBoardMenu { get; set; }
        public virtual DbSet<DocTypeInfo> DocTypeInfo { get; set; }
        public virtual DbSet<ExchangeRate> ExchangeRate { get; set; }
        public virtual DbSet<GLAccount> GLAccount { get; set; }
        public virtual DbSet<IDGenerator> IDGenerator { get; set; }
        public virtual DbSet<ItemInfo> ItemInfo { get; set; }
        public virtual DbSet<ItemUnit> ItemUnit { get; set; }

        public virtual DbSet<ItemInSellTime> ItemInSellTime { get; set; }
       public virtual DbSet<ItemUnitConvert> ItemUnitConvert { get; set; }
        public virtual DbSet<ItemSellTime> ItemSellTime { get; set; }
        public virtual DbSet<ItemOnHold> ItemOnHold { get; set; }
        public virtual DbSet<ItemPriceInfo> ItemPriceInfo { get; set; }
        public virtual DbSet<vw_ItemRelate> vw_ItemRelate { get; set; }
        public virtual DbSet<ItemInPointRate> ItemInPointRate { get; set; }
        public virtual DbSet<ItemRelate> ItemRelate { get; set; }
        public virtual DbSet<LogInCrossAppReq> LogInCrossAppReq { get; set; }
        public virtual DbSet<LineLogIn> LineLogIn { get; set; }
        public virtual DbSet<LogAPIRequest> LogAPIRequest { get; set; }
        public virtual DbSet<LoginSessionLog> LoginSessionLog { get; set; }
        public virtual DbSet<LineLogInRequest> LineLogInRequest { get; set; }
        public virtual DbSet<LineSender> LineSender { get; set; }
        public virtual DbSet<LineGroupInfo> LineGroupInfo { get; set; }
        public virtual DbSet<Link> Link { get; set; }
        public virtual DbSet<LocationInfo> LocationInfo { get; set; }
        public virtual DbSet<MacRegister> MacRegister { get; set; }
        public virtual DbSet<MailConfig> MailConfig { get; set; }
        public virtual DbSet<MailGroup> MailGroup { get; set; }
        public virtual DbSet<MasterTypeHead> MasterTypeHead { get; set; }
        public virtual DbSet<MasterTypeLine> MasterTypeLine { get; set; }
        public virtual DbSet<OINVHead> OINVHead { get; set; }
        public virtual DbSet<OINVLine> OINVLine { get; set; }
        public virtual DbSet<OPaymentType> OPaymentType { get; set; }
        public virtual DbSet<ORCAdjust> ORCAdjust { get; set; }
        public virtual DbSet<ORCHead> ORCHead { get; set; }
        public virtual DbSet<ORCLine> ORCLine { get; set; }
        public virtual DbSet<ORCPayLine> ORCPayLine { get; set; }
        public virtual DbSet<POS_BOMHead> POS_BOMHead { get; set; }
        public virtual DbSet<POS_BOMLine> POS_BOMLine { get; set; }
        public virtual DbSet<POS_MAS_DocType> POS_MAS_DocType { get; set; }
        public virtual DbSet<POS_ORDERBomLine> POS_ORDERBomLine { get; set; }
        public virtual DbSet<POS_ORDERHead> POS_ORDERHead { get; set; }
        public virtual DbSet<POS_ORDERLine> POS_ORDERLine { get; set; }
        public virtual DbSet<POS_POFGLine> POS_POFGLine { get; set; }
        public virtual DbSet<POS_POHead> POS_POHead { get; set; }
        public virtual DbSet<POS_POLine> POS_POLine { get; set; }
        public virtual DbSet<POS_STKBal> POS_STKBal { get; set; }
        public virtual DbSet<POS_STKMove> POS_STKMove { get; set; }
        public virtual DbSet<POS_SaleRefresh> POS_SaleRefresh { get; set; }
        public virtual DbSet<POS_SaleHead> POS_SaleHead { get; set; }
        public virtual DbSet<POS_SaleLine> POS_SaleLine { get; set; }
        public virtual DbSet<POS_SalePayment> POS_SalePayment { get; set; }
        public virtual DbSet<POS_SaleLog> POS_SaleLog { get; set; }
        public virtual DbSet<POS_StkAdjustHead> POS_StkAdjustHead { get; set; }
        public virtual DbSet<POS_StkAdjustLine> POS_StkAdjustLine { get; set; }
        public virtual DbSet<POS_Table> POS_Table { get; set; }
        public virtual DbSet<TaxInfo> TaxInfo { get; set; }
        public virtual DbSet<ThaiPostAddress> ThaiPostAddress { get; set; }
        public virtual DbSet<TransactionLog> TransactionLog { get; set; }
        public virtual DbSet<TempFilePrinter> TempFilePrinter { get; set; }
        public virtual DbSet<UnitConvert> UnitConvert { get; set; }
        public virtual DbSet<UploadLog> UploadLog { get; set; }
        public virtual DbSet<UserGroupInBoard> UserGroupInBoard { get; set; }
        public virtual DbSet<UserGroupInCompany> UserGroupInCompany { get; set; }
        public virtual DbSet<UserGroupInDocStep> UserGroupInDocStep { get; set; }
        public virtual DbSet<UserGroupInfo> UserGroupInfo { get; set; }
        public virtual DbSet<UserGroupPermission> UserGroupPermission { get; set; }
        public virtual DbSet<UserInBoard> UserInBoard { get; set; }
        public virtual DbSet<UserInCompany> UserInCompany { get; set; }
        public virtual DbSet<UserInDocStep> UserInDocStep { get; set; }
        public virtual DbSet<UserInGroup> UserInGroup { get; set; }
        public virtual DbSet<UserInRCom> UserInRCom { get; set; }
        public virtual DbSet<UserInfo> UserInfo { get; set; }
        public virtual DbSet<UserMenu> UserMenu { get; set; }
        public virtual DbSet<UserPermission> UserPermission { get; set; }
        public virtual DbSet<V_Query> V_Query { get; set; }
        public virtual DbSet<VendorInfo> VendorInfo { get; set; }
        public virtual DbSet<XFileLocation> XFileLocation { get; set; }
        public virtual DbSet<XFilesRef> XFilesRef { get; set; }
        public virtual DbSet<vw_CompanyInfo> vw_CompanyInfo { get; set; }
        public virtual DbSet<vw_CustomerInfo> vw_CustomerInfo { get; set; }
        public virtual DbSet<vw_DocTypeInfo> vw_DocTypeInfo { get; set; }
        public virtual DbSet<vw_ItemBarcode> vw_ItemBarcode { get; set; }
        public virtual DbSet<vw_ItemInfo> vw_ItemInfo { get; set; }
        public virtual DbSet<vw_ItemUnit> vw_ItemUnit { get; set; }
        public virtual DbSet<vw_ItemUnitConvert> vw_ItemUnitConvert { get; set; }
        public virtual DbSet<vw_ItemInSellTime> vw_ItemInSellTime { get; set; }
        public virtual DbSet<vw_ItemPriceInfo> vw_ItemPriceInfo { get; set; }
        public virtual DbSet<vw_LineLogIn> vw_LineLogIn { get; set; }
     public virtual DbSet<vw_POS_STKBalInUnitConvert> vw_POS_STKBalInUnitConvert { get; set; }
        public virtual DbSet<vw_LineLogInRequest> vw_LineLogInRequest { get; set; }
        public virtual DbSet<vw_LocationInfo> vw_LocationInfo { get; set; }
        public virtual DbSet<vw_OINVHead> vw_OINVHead { get; set; }
        public virtual DbSet<vw_ORCHead> vw_ORCHead { get; set; }
        public virtual DbSet<vw_ORCLine> vw_ORCLine { get; set; }
        public virtual DbSet<vw_POSINVHead> vw_POSINVHead { get; set; }
        public virtual DbSet<vw_POSINVLine> vw_POSINVLine { get; set; }
        public virtual DbSet<vw_POS_BOMLine> vw_POS_BOMLine { get; set; }
        public virtual DbSet<vw_POS_ORDERHead> vw_POS_ORDERHead { get; set; }
        public virtual DbSet<vw_POS_ORDERLine> vw_POS_ORDERLine { get; set; }
        public virtual DbSet<vw_POS_POLine> vw_POS_POLine { get; set; }
        public virtual DbSet<vw_POS_POHead> vw_POS_POHead { get; set; }
        public virtual DbSet<vw_POS_POFGLine> vw_POS_POFGLine { get; set; }

        public virtual DbSet<vw_POS_ORDER_RM> vw_POS_ORDER_RM { get; set; }
        public virtual DbSet<vw_POS_STKBal> vw_POS_STKBal { get; set; }
        public virtual DbSet<vw_POS_STKMove> vw_POS_STKMove { get; set; }
        public virtual DbSet<vw_POS_SaleHead> vw_POS_SaleHead { get; set; }
        public virtual DbSet<vw_PermissionGroupInMenu> vw_PermissionGroupInMenu { get; set; }
        public virtual DbSet<vw_PermissionInBoard> vw_PermissionInBoard { get; set; }
        public virtual DbSet<vw_PermissionInCompany> vw_PermissionInCompany { get; set; }
        public virtual DbSet<vw_PermissionInMenu> vw_PermissionInMenu { get; set; }
        public virtual DbSet<vw_Postcode> vw_Postcode { get; set; }
        public virtual DbSet<vw_ThaiPostAddress> vw_ThaiPostAddress { get; set; }
        public virtual DbSet<vw_UIC> vw_UIC { get; set; }
        public virtual DbSet<vw_UIM> vw_UIM { get; set; }
        public virtual DbSet<vw_UserGroupInfo> vw_UserGroupInfo { get; set; }
        public virtual DbSet<vw_UserInBoard> vw_UserInBoard { get; set; }
        public virtual DbSet<vw_UserInGroup> vw_UserInGroup { get; set; }
        public virtual DbSet<vw_UserInRCom> vw_UserInRCom { get; set; }
        public virtual DbSet<vw_UserInfo> vw_UserInfo { get; set; }
        public virtual DbSet<vw_VendorInfo> vw_VendorInfo { get; set; }
        public virtual DbSet<vw_XFilesRef> vw_XFilesRef { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder) {
            modelBuilder.HasAnnotation("Relational:Collation", "Thai_CI_AS");

            modelBuilder.Entity<Addr_Amphoe>(entity => {
                entity.Property(e => e.AmphoeID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AmphoeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CountryID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ProvinceID)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Addr_Country>(entity => {
                entity.HasIndex(e => e.CountryID, "IX_Addr_Country")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ContinentID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrencyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Addr_District>(entity => {
                entity.HasIndex(e => new { e.DistrictID, e.AmphoeID, e.ProvinceID }, "IX_M_Addr_District")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AmphoeID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AmphoeIDEng).HasMaxLength(100);

                entity.Property(e => e.CountryID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DistrictID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DistrictIDEng).HasMaxLength(100);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProvinceID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProvinceIDEng).HasMaxLength(100);

                entity.Property(e => e.RegionID).HasMaxLength(100);
            });

            modelBuilder.Entity<Addr_Province>(entity => {
                entity.Property(e => e.CountryID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ProvinceID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProvinceName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BankInfo>(entity => {
                entity.HasKey(e => e.BankCode)
                    .HasName("PK_Bank");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name_EN)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("เลขที่บัญชี");

                entity.Property(e => e.Name_TH)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("เลขที่บัญชี");

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.SwiftCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<BookBankInfo>(entity => {
                entity.HasKey(e => e.BookID);

                entity.Property(e => e.BookID).HasMaxLength(50);

                entity.Property(e => e.AccGroup)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AcctType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("1.เงินฝากออมทรัพย์ (Saving Account)\r\n2.เงินฝากประจำ (Fixed Deposit Account)\r\n3.เงินฝากกระแสรายวัน (Current Account)");

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasComment("ชื่อธนาคาร มาจาก MasterType");

                entity.Property(e => e.BookDesc)
                    .HasMaxLength(120)
                    .HasComment("ชื่อธนาคาร มาจาก MasterType");

                entity.Property(e => e.BookNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("เลขที่บัญชี");

                entity.Property(e => e.BookOwner)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefID).HasMaxLength(30);

                entity.Property(e => e.Remark1).HasMaxLength(1000);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.UploadTemplateID).HasMaxLength(30);
            });

            modelBuilder.Entity<CompanyInfo>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID });

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasComment("Company+Brn ");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrFull2)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTanon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ถนน");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.BankCode).HasMaxLength(50);

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BookBankNo).HasMaxLength(50);

                entity.Property(e => e.BrnCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("CompanyType");

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsWH)
                    .HasDefaultValueSql("((0))")
                    .HasComment("เป็นศูนย์กระจายพัสดุ");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PriceTaxCondType).HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุลูกค้า");

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุลูกค้า");

                entity.Property(e => e.SalePersonID).HasMaxLength(30);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockType).HasMaxLength(30);

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(N'HQ')")
                    .HasComment("GROUP/COMPANY/BRANCH");
            });

            modelBuilder.Entity<CompanyRoot>(entity => {
                entity.HasKey(e => e.RComID);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.ImageFull).IsRequired();

                entity.Property(e => e.ImageThumb).IsRequired();

                entity.Property(e => e.RComName)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Config>(entity => {
                entity.Property(e => e.ConfigID).HasMaxLength(30);

                entity.Property(e => e.ConfigName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ValueNumber1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ValueNumber2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ValueString1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValueString2)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CreditTerm>(entity => {
                entity.Property(e => e.AccType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.TermDesc)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.TermID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UseIn)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<CurrencyInfo>(entity => {
                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CurrencyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DateRate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.TodayRate).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<CustomerInfo>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.CustomerID })
                    .HasName("PK_Customers");

                entity.HasIndex(e => e.CompanyID, "IX_M_Customers")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerID).HasMaxLength(50);

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.AreaID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BIllPrintRemark)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("EDIT หมายเหตุการวางบิล (เดิม = Remark1)");

                entity.Property(e => e.BankCode).HasMaxLength(30);

                entity.Property(e => e.BillAddr1).HasMaxLength(1000);

                entity.Property(e => e.BillAddr2).HasMaxLength(1000);

                entity.Property(e => e.BillContact)
                    .HasMaxLength(1000)
                    .HasComment("EDIT เดิม = ContactPersonBill");

                entity.Property(e => e.BillInShip)
                    .HasDefaultValueSql("((0))")
                    .HasComment("NEW วางบิลพร้อมส่งของ (เดิม =CanShipWithBilling)");

                entity.Property(e => e.BillMemo)
                    .HasMaxLength(1000)
                    .HasComment("EDIT BillingRefDoc+BillingCondition");

                entity.Property(e => e.BillTime)
                    .HasMaxLength(1000)
                    .HasComment("EDIT เดิม = TimeSendBill");

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookIBankD).HasMaxLength(30);

                entity.Property(e => e.BrnCode).HasMaxLength(10);

                entity.Property(e => e.BrnDesc).HasMaxLength(100);

                entity.Property(e => e.ChqAddr1)
                    .HasMaxLength(1000)
                    .HasComment("NEW");

                entity.Property(e => e.ChqAddr2)
                    .HasMaxLength(1000)
                    .HasComment("NEW");

                entity.Property(e => e.ChqContact)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("EDIT เดิม = ContactPersonChq");

                entity.Property(e => e.ChqMemo)
                    .HasMaxLength(1000)
                    .HasComment("EIDT ClearingCondition+ClearingRefDoc");

                entity.Property(e => e.ChqPrintRemark)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("EDIT หมายเหตุรับเช็ค (เดิม = Remark2)");

                entity.Property(e => e.ChqTime)
                    .HasMaxLength(1000)
                    .HasComment("NEW เดิมคือ TimeGetChq");

                entity.Property(e => e.ContactPerson).HasMaxLength(200);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CrmPoint).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Currency).HasMaxLength(30);

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FullNameEn)
                    .IsRequired()
                    .HasMaxLength(301)
                    .HasComputedColumnSql("(([NameEN1]+' ')+[NameEN2])", false);

                entity.Property(e => e.FullNameTh)
                    .IsRequired()
                    .HasMaxLength(301)
                    .HasComputedColumnSql("(([NameTH1]+' ')+[NameTH2])", false);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("กลุ่มลูกค้า/ประเภทร้านค้า (TITLE) join MasterType : cust_group");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.InteralTermID)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))")
                    .HasComment("NEW FOR FIN TERM");

                entity.Property(e => e.InvPrintRemark)
                    .HasMaxLength(1000)
                    .HasComment("EIDT เดิม = Remark4");

                entity.Property(e => e.InvSignPrintRemark)
                    .HasMaxLength(1000)
                    .HasComment("NEW  เดิม = Remark5");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsSysData).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsUseQO).HasComment("จำเป็นต้องมี Quotation ในการเปิด SO");

                entity.Property(e => e.LimitOverDue)
                    .HasDefaultValueSql("((0))")
                    .HasComment("NEW LIMIT OVER DUE\r\nจำนวนวันที่เกิดกำหนดชำระจะต้องฟ้องศาล");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NameEn1)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.NameEn2)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.NameTh1)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.NameTh2)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentGrade).HasMaxLength(10);

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("NEW");

                entity.Property(e => e.PaymentTermID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.PersonTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเภทบุคคล = นิติบุคคล/บุคคลธรรมดา");

                entity.Property(e => e.ProductGroupID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("NEW");

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SOMemo)
                    .HasMaxLength(1000)
                    .HasComment("EIDT เดิม = Remark6");

                entity.Property(e => e.SalePersonID).HasMaxLength(30);

                entity.Property(e => e.ShipPrintRemark)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("EDIT เดิม =Remark3");

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubGroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment(" join MasterType : cust_subgroup");

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.TitleEn)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TitleTh)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'HQ')")
                    .HasComment("HQ/BRN");

                entity.Property(e => e.VatTypeID).HasMaxLength(30);
            });

            modelBuilder.Entity<DashBoard>(entity => {
                entity.Property(e => e.DashBoardID).HasMaxLength(30);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Page)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DashBoardMenu>(entity => {
                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<DocTypeInfo>(entity => {
                entity.HasKey(e => e.DocTypeID);

                entity.Property(e => e.DocTypeID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApplyToComLevel)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("Company Group/Compnay/Branch");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("This Status For which company");

                entity.Property(e => e.DigitRunning)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocCate)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocTypeCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsAutoID)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PrefixNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ExchangeRate>(entity => {
                entity.HasKey(e => new { e.CompanyID, e.HomeCurrency, e.Currency, e.RateDate, e.RateType })
                    .HasName("PK_ExchangeRate_1");

                entity.Property(e => e.CompanyID).HasMaxLength(30);

                entity.Property(e => e.HomeCurrency).HasMaxLength(30);

                entity.Property(e => e.Currency).HasMaxLength(30);

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateType).HasMaxLength(30);

                entity.Property(e => e.Bank)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 10)");
            });

            modelBuilder.Entity<GLAccount>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.Code });

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Cate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DRCR)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<IDGenerator>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.Prefix, e.Year, e.Month, e.MacNo, e.FuncID })
                    .HasName("PK_IDGenerator_1");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.Prefix).HasMaxLength(50);

                entity.Property(e => e.Year).HasMaxLength(4);

                entity.Property(e => e.Month).HasMaxLength(2);

                entity.Property(e => e.MacNo).HasMaxLength(30);

                entity.Property(e => e.FuncID).HasMaxLength(30);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ItemInfo>(entity => {
                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BrandID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CateID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Dimension).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.GLGroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("เลขบันทึกบัญชี Join ตาราง AccJournal");

                entity.Property(e => e.Group1ID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Group2ID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Group3ID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsKeepStock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsLotItem)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("Company+Brn ");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PackagingID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PackingID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceTaxCondType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("INC VAT / EXC VAT");

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("Express Code");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StkUnitID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("ITEM / SERVICE / EXPENSE");

                entity.Property(e => e.UnitID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("");

                entity.Property(e => e.VendorID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("NEW");

                entity.Property(e => e.VolPerUOM).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 3)");
            });
            modelBuilder.Entity<ItemOnHold>(entity => {
                entity.HasKey(e => e.ID);
            });
            modelBuilder.Entity<ItemPriceInfo>(entity => {
                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("INV/UPLOAD");

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PriceTaxCondType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("INC VAT / EXC VAT");

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("InvoiceID / FileName");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<LineLogIn>(entity => {
                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ApprovedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromReqID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.HasAttachFIle).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ReqMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.UserID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(N'USER / CUSTOMER / VENDOR')");
            });

            modelBuilder.Entity<LineLogInRequest>(entity => {
                entity.Property(e => e.ActionBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ActionMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ActionStatus)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("ACCEPTED / REJECTED / PENDING");

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoDesc)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("ระบบสร้างข้อความให้ เช่น ชื่อ/ รหัสพนักงาน / Fleet ");

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.HasAttachFIle).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ReqID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReqMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.UserID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(N'USER / CUSTOMER / VENDOR')");
            });

            modelBuilder.Entity<LineSender>(entity => {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.ApiUrl)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("EMAIL/\r\nLINE");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ReturnUrl)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Secret)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SenderID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Link>(entity => {
                entity.Property(e => e.AppLink).HasMaxLength(1000);

                entity.Property(e => e.AuthenType).HasMaxLength(100);

                entity.Property(e => e.BaseUrl).HasMaxLength(1000);

                entity.Property(e => e.Domain).HasMaxLength(100);

                entity.Property(e => e.FileExtension).HasMaxLength(1000);

                entity.Property(e => e.FileName).HasMaxLength(1000);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.LinkName).HasMaxLength(50);

                entity.Property(e => e.LinkType).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(100);

                entity.Property(e => e.Port).HasMaxLength(50);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Token).HasMaxLength(100);

                entity.Property(e => e.Username).HasMaxLength(100);

                entity.Property(e => e.VirtualPath).HasMaxLength(1000);
            });

            modelBuilder.Entity<LocationInfo>(entity => {
                entity.HasKey(e => new { e.RCompany, e.CompanyID, e.LocID })
                    .HasName("PK_Locations");

                entity.Property(e => e.RCompany).HasMaxLength(50);

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.LocID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LocTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("MAIN/SUB");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("MAIN/SUB");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<MailConfig>(entity => {
                entity.Property(e => e.MailCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProviderID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SenderEmail)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SenderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SenderPassword)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StmptServer)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MailGroup>(entity => {
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MailGroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<MasterTypeHead>(entity => {
                entity.HasKey(e => e.MasterTypeID)
                    .HasName("PK_MasterTypeHeader");

                entity.Property(e => e.MasterTypeID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UseFor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserAddNew).HasComment("ให้ User สามารถเพิ่มเองได้");
            });

            modelBuilder.Entity<MasterTypeLine>(entity => {
                entity.Property(e => e.Description1)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Description2)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description3)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description4)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsSysData).HasDefaultValueSql("((0))");

                entity.Property(e => e.MasterTypeID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentValue)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValueNUM).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ValueTXT)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OINVHead>(entity => {
                entity.HasKey(e => new { e.SOINVID, e.RCompanyID, e.CompanyID, e.DocTypeID })
                    .HasName("PK_SOINVHead");

                entity.Property(e => e.SOINVID).HasMaxLength(30);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(30)
                    .HasComment("สาขา");

                entity.Property(e => e.DocTypeID)
                    .HasMaxLength(30)
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.AccGroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.AppointmentDate).HasColumnType("datetime");

                entity.Property(e => e.BaseNetTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ราคาสุทธิก่อนส่วนลด");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillToCustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BillingDate).HasColumnType("datetime");

                entity.Property(e => e.BillingID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyBillingID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("สาขา");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustBrnID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustBrnName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustIDRefInCom)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerAddr1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerAddr2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVPendingAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsReverse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LastChatDate).HasColumnType("datetime");

                entity.Property(e => e.LastChatMessage).IsRequired();

                entity.Property(e => e.LastStatementDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขึ้นเงินได้ (มียอดเข้า Statement / เงินสามารถใช้ได้)");

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิก่อน VAT");

                entity.Property(e => e.NetTotalAmtIncVat)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิรวม VAT");

                entity.Property(e => e.NetTotalVatAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("มูลค่า VAT");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayDueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.PrintDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyInvoice)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyOrder)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyReturn)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyShip)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.RCAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RCID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateExchange)
                    .HasColumnType("decimal(18, 12)")
                    .HasComment("0");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark3)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark4)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark5)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SODate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SOINVDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipFrLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipFrSubLocID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TermID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OINVLine>(entity => {
                entity.HasKey(e => new { e.SOINVID, e.LineNum, e.RCompanyID, e.CompanyID, e.DocTypeID })
                    .HasName("PK_SOINVLine");

                entity.Property(e => e.SOINVID).HasMaxLength(30);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(30)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.DocTypeID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.BaseTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ราคาสุทธิก่อนส่วนลด");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsStockItem)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemAccGroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemCateID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemGroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Location in ACCPAC");

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.OntopDiscAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("มูลค่าส่วนลดท้ายบิล");

                entity.Property(e => e.OntopDiscPer)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("เปอร์เซ็นต์ส่วนลดท้ายบิล");

                entity.Property(e => e.Packaging)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("CANCEL");

                entity.Property(e => e.PackagingNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PointID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("NONE / WEIGHT / DIRECT");

                entity.Property(e => e.PointName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasComment("NONE / WEIGHT / DIRECT");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PriceIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyInvoice)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyOrder)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyReturn)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.QtyShip)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SOINVDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.SOLineNum).HasComment("วันที่ขนส่ง");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipLineNum).HasComment("วันที่ขนส่ง");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WUnit)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<OPaymentType>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.Code });

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.AccID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DRCR)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ORCAdjust>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.RCID, e.LineNum })
                    .HasName("PK_ARReceiptAdust");

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(30)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.RCID).HasMaxLength(30);

                entity.Property(e => e.CrAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DrAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GLCate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GLCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GLNam)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RCDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasComment("ประเภทค่าบริการ");
            });

            modelBuilder.Entity<ORCHead>(entity => {
                entity.HasKey(e => new { e.RCID, e.RCompanyID, e.CompanyID, e.DocType })
                    .HasName("PK_ARReceiptHead");

                entity.Property(e => e.RCID).HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.DocType)
                    .HasMaxLength(50)
                    .HasComment("Default ให้เป็นค่าว่างไว้ก่อน");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่หน้าเช็ค");

                entity.Property(e => e.ChqDepositDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ฝากเช็ค");

                entity.Property(e => e.ChqExpired).HasColumnType("datetime");

                entity.Property(e => e.ChqReturnDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่คืนเช็ค");

                entity.Property(e => e.ChqReturnReason)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ClearingDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่โอนเงิน / วันที่หน้าเช็ค / วันที่รับเงินสด / กรณีโอนจ่ายสดรูดบัตรจะเป็นวันที่เดียวกับวันที่ PayDate");

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.CompletedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustBankBranch)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("สาขาธนาคารหน้าเช็ค / บช ที่ลูกค้าโอน");

                entity.Property(e => e.CustBankCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Join กับตาราง M_Bank");

                entity.Property(e => e.CustBankName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("สาขาธนาคารหน้าเช็ค / บช ที่ลูกค้าโอน");

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("มาจาก BranchID ในตาราง CustomerBranch");

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(N'SALE/FIN')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LinkBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LinkDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LinkRefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PayBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ชำระ / รับที่รับเช็ด / วันที่โอน");

                entity.Property(e => e.PayINVAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนเงินสดที่รับ / จำนวนเงินโอน / ตัวเลขหน้า chq");

                entity.Property(e => e.PayINVTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนเงินสดที่รับ / จำนวนเงินโอน / ตัวเลขหน้า chq");

                entity.Property(e => e.PayINVVatAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนเงินสดที่รับ / จำนวนเงินโอน / ตัวเลขหน้า chq");

                entity.Property(e => e.PayMemo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayToBankCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PayToBookID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PayToBookName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PayTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนเงินสดที่รับ / จำนวนเงินโอน / ตัวเลขหน้า chq");

                entity.Property(e => e.PayTotalDiffINVAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PaymentRefNo)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasComment("เลขที่ CHQ / เลขบัญชีที่โอน");

                entity.Property(e => e.RCDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Join MasterType");

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateExchange)
                    .HasColumnType("decimal(18, 12)")
                    .HasComment("0");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.StatementDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขึ้นเงินได้ (มียอดเข้า Statement / เงินสามารถใช้ได้)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Join MasterType");
            });

            modelBuilder.Entity<ORCLine>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.RCID, e.LineNum, e.DocType })
                    .HasName("PK_ARReceiptLine");

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(30)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.RCID).HasMaxLength(30);

                entity.Property(e => e.DocType)
                    .HasMaxLength(50)
                    .HasComment("Default ให้เป็นค่าว่างไว้ก่อน");

                entity.Property(e => e.BillID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyBillingID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("สาขา");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVDate).HasColumnType("datetime");

                entity.Property(e => e.INVDocTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.InvDueDate).HasColumnType("datetime");

                entity.Property(e => e.InvPreviousAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.InvRateExchange)
                    .HasColumnType("decimal(18, 12)")
                    .HasComment("0");

                entity.Property(e => e.InvTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิรวม VAT");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PayAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนที่ชำระงวดนี้ รวม VAT");

                entity.Property(e => e.PayNo).HasComment("ชำระครั้งที่");

                entity.Property(e => e.PayTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนที่ชำระงวดนี้ รวม VAT");

                entity.Property(e => e.PayVatAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนที่ชำระงวดนี้ รวม VAT");

                entity.Property(e => e.RCDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Join MasterType");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark3)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Join MasterType");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<ORCPayLine>(entity => {
                entity.HasKey(e => new { e.RCID, e.LineNum, e.RCompanyID, e.CompanyID })
                    .HasName("PK_ARReceiptPaymentLine");

                entity.Property(e => e.RCID).HasMaxLength(30);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(30)
                    .HasComment("Transaction ของ KMG/KMI/ORN");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่หน้าเช็ค");

                entity.Property(e => e.ChqDepositDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ฝากเช็ค");

                entity.Property(e => e.ChqExpired).HasColumnType("datetime");

                entity.Property(e => e.ChqReturnDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่คืนเช็ค");

                entity.Property(e => e.ChqReturnReason).HasMaxLength(30);

                entity.Property(e => e.ClearingDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่โอนเงิน / วันที่หน้าเช็ค / วันที่รับเงินสด / กรณีโอนจ่ายสดรูดบัตรจะเป็นวันที่เดียวกับวันที่ PayDate");

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.CompletedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustBankBranch)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("สาขาธนาคารหน้าเช็ค / บช ที่ลูกค้าโอน");

                entity.Property(e => e.CustBankCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Join กับตาราง M_Bank");

                entity.Property(e => e.CustBankName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("สาขาธนาคารหน้าเช็ค / บช ที่ลูกค้าโอน");

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("มาจาก BranchID ในตาราง CustomerBranch");

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(N'SALE/FIN')");

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Default ให้เป็นค่าว่างไว้ก่อน");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PayAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนเงินสดที่รับ / จำนวนเงินโอน / ตัวเลขหน้า chq");

                entity.Property(e => e.PayBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayByCate)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayByDesc)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayByType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ชำระ / รับที่รับเช็ด / วันที่โอน");

                entity.Property(e => e.PayMemo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("ชำระโดย");

                entity.Property(e => e.PayToBankCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PayToBookID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PayToBookName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("JOIN กับตาราง M_BookBank");

                entity.Property(e => e.PaymentRefNo)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasComment("เลขที่ CHQ / เลขบัญชีที่โอน");

                entity.Property(e => e.RCDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Join MasterType");

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateExchange)
                    .HasColumnType("decimal(18, 12)")
                    .HasComment("0");

                entity.Property(e => e.StatementDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขึ้นเงินได้ (มียอดเข้า Statement / เงินสามารถใช้ได้)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Join MasterType");

                entity.Property(e => e.TaxBaseAmt)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("ฐานภาษีหัก ณ ที่จ่าย");

                entity.Property(e => e.TaxRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("อัตราหัก ณ ที่จ่าย");

                entity.Property(e => e.WHTRefNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขอ้างอิงหัก ณ ทีจ่าย");
            });

            modelBuilder.Entity<POS_BOMHead>(entity => {
                entity.HasKey(e => new { e.ComID, e.RComID, e.BomID });

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.BomID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.ItemIDFG)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.UserForModule)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("SALE");
            });

            modelBuilder.Entity<POS_BOMLine>(entity => {
                entity.HasKey(e => new { e.ComID, e.RComID, e.BomID, e.LineNum });

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.BomID).HasMaxLength(50);

                entity.Property(e => e.FgQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FgUnit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.ItemIDFG)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemIDRM)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RMDescription)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RmQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RmUnit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.UserForModule)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("SALE");
            });

            modelBuilder.Entity<POS_MAS_DocType>(entity => {
                entity.HasKey(e => e.DocTypeID);

                entity.Property(e => e.DocTypeID).HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.PrefixDocNo)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<POS_ORDERBomLine>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.OrdID, e.LineNum });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.OrdID).HasMaxLength(50);

                entity.Property(e => e.BomID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustID).HasMaxLength(50);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FgAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FgItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FgName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.FgQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FgUnit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.FrLocID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVID).HasMaxLength(50);

                entity.Property(e => e.OrdDate).HasColumnType("datetime");

                entity.Property(e => e.OrdStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RmAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RmItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RmItemName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.RmQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RmUnit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.VendorID)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<POS_ORDERHead>(entity => {
                entity.HasKey(e => new { e.ComID, e.RComID, e.OrdID })
                    .HasName("PK_POS_ORDERHeadx");

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.OrdID).HasMaxLength(50);

                entity.Property(e => e.AcceptedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AcceptedDate).HasColumnType("datetime");

                entity.Property(e => e.AcceptedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustID).HasMaxLength(50);

                entity.Property(e => e.CustName).HasMaxLength(500);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.FrLocID).HasMaxLength(50);

                entity.Property(e => e.GRBy).HasMaxLength(50);

                entity.Property(e => e.GRDate).HasColumnType("datetime");

                entity.Property(e => e.GrAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GrQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVID).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OrdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrdDate).HasColumnType("datetime");

                entity.Property(e => e.OrdQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ShipBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ShipDate).HasColumnType("datetime");

                entity.Property(e => e.ShipQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShipdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("OPEN / ACCEPTED / SHIPPING / RECEIVED / CANCEL");
            });

            modelBuilder.Entity<POS_ORDERLine>(entity => {
                entity.HasKey(e => new { e.ComID, e.RComID, e.OrdID, e.LineNum })
                    .HasName("PK_POS_OrderHead");

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.OrdID).HasMaxLength(50);

                entity.Property(e => e.BalQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CustID).HasMaxLength(50);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FrLocID).HasMaxLength(50);

                entity.Property(e => e.GrAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GrQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVID).HasMaxLength(50);

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.OrdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrdDate).HasColumnType("datetime");

                entity.Property(e => e.OrdQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShipQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShipdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<POS_POHead>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.POID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.POID).HasMaxLength(50);

                entity.Property(e => e.AcceptedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AcceptedDate).HasColumnType("datetime");

                entity.Property(e => e.AcceptedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Amt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.GrAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GrQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OrdID).HasMaxLength(50);

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ShipBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ShipQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShipdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShpiDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("OPEN / ACCEPTED / SHIPPING / RECEIVED / CANCEL");

                entity.Property(e => e.ToLocID).HasMaxLength(50);

                entity.Property(e => e.VendorID).HasMaxLength(50);

                entity.Property(e => e.VendorName).HasMaxLength(200);
            });

            modelBuilder.Entity<POS_POLine>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.POID, e.LineNum });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.POID).HasMaxLength(50);

                entity.Property(e => e.Amt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.GrAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GrQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.OrdID).HasMaxLength(50);

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShipQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShipdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ToLocID).HasMaxLength(50);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.VendorID).HasMaxLength(50);
            });

            modelBuilder.Entity<POS_STKBal>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.LocID, e.SubLocID, e.ItemID, e.LotNo, e.SerialNo });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.LocID).HasMaxLength(50);

                entity.Property(e => e.SubLocID).HasMaxLength(50);

                entity.Property(e => e.ItemID).HasMaxLength(50);

                entity.Property(e => e.LotNo).HasMaxLength(80);

                entity.Property(e => e.SerialNo).HasMaxLength(80);

                entity.Property(e => e.BalQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.InstQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrdQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RetQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<POS_STKMove>(entity => {
                entity.HasIndex(e => new { e.RComID, e.ComID, e.LocID, e.SubLocID, e.DocID, e.LineNum }, "IX_POS_STKMove");

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.MoveType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.RemainQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.StkDate).HasColumnType("datetime");

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TransQty).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<POS_SaleHead>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.BillID });

                entity.Property(e => e.RComID).HasMaxLength(30);

                entity.Property(e => e.ComID)
                    .HasMaxLength(30)
                    .HasComment("สาขา");

                entity.Property(e => e.BillID).HasMaxLength(30);

                entity.Property(e => e.BaseNetTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ราคาสุทธิก่อนส่วนลด");

                entity.Property(e => e.BillDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.BillRefID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactTo)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditTermID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustAccGroup)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustAddr1)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustAddr2)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustBranchID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustBranchName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(220);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.FINVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVPeriod)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LineDisc).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LinkBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Location in ACCPAC");

                entity.Property(e => e.MacNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MacTaxNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetDiff).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAfterRound).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิก่อน VAT");

                entity.Property(e => e.NetTotalAmtIncVat)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("สุทธิรวม VAT");

                entity.Property(e => e.NetTotalVatAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("มูลค่า VAT");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayByCash).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayByOther).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PrintDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0");

                entity.Property(e => e.RateExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("0");

                entity.Property(e => e.ReasonID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("MasterType ReasonReturn");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesID3)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesID4)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesID5)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipToAddr1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipToAddr2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipToLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipToLocName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.ShipToUsePrice)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TableID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<POS_SaleLine>(entity => {
                entity.HasKey(e => new { e.ID  });

                entity.Property(e => e.RComID).HasMaxLength(30);

                entity.Property(e => e.ComID)
                    .HasMaxLength(30)
                    .HasComment("สาขา");

                entity.Property(e => e.MacNo)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillID).HasMaxLength(30);

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BaseTotalAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ราคาสุทธิก่อนส่วนลด");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BelongToLineNum)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BillDate)
                    .HasColumnType("datetime")
                    .HasComment("วันที่ขนส่ง");

                entity.Property(e => e.BillRefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.DiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.FINVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ImgUrl)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsStockItem)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemCateID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemGroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Location in ACCPAC");

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.OntopDiscAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("มูลค่าส่วนลดท้ายบิล");

                entity.Property(e => e.OntopDiscPer)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("เปอร์เซ็นต์ส่วนลดท้ายบิล");

                entity.Property(e => e.PaternValue)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.PatternID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PriceIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ProPackCode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.PromotionID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวน Order รวม");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShareGpPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WUnit)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");

            });

            modelBuilder.Entity<POS_SalePayment>(entity => {
                entity.HasKey(e => new { e.ID });

                entity.Property(e => e.RComID).HasMaxLength(30);

                entity.Property(e => e.ComID)
                    .HasMaxLength(30)
                    .HasComment("สาขา");

                entity.Property(e => e.BillID).HasMaxLength(30);

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(30)
                    .HasComment("ServiceID FROM TABLE OrderServices");

                entity.Property(e => e.BillAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ยอดเงินเต็มของบิล");

                entity.Property(e => e.ChangeAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("เงินทอน");

                entity.Property(e => e.FINVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.GetAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนที่รับเงิน");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("จำนวนที่จ่ายด้วยวิธีการนี้");

                entity.Property(e => e.RoundAmt)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("ยอดเงินเต็มที่ต้องชำระหลังปัดเศษ");
            });

            modelBuilder.Entity<POS_StkAdjustHead>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.AdjID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.AdjID).HasMaxLength(50);

                entity.Property(e => e.ActualAmt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ActualQty).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AdjAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AdjDate).HasColumnType("datetime");

                entity.Property(e => e.AdjQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ApprovedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LocID).HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("OPEN / ACCEPTED / SHIPPING / RECEIVED / CANCEL");
            });

            modelBuilder.Entity<POS_StkAdjustLine>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.AdjID, e.LineNum });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.ComID).HasMaxLength(50);

                entity.Property(e => e.AdjID).HasMaxLength(50);

                entity.Property(e => e.ActualAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ActualQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AdjAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AdjDate).HasColumnType("datetime");

                entity.Property(e => e.AdjQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BeginQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocID).HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<POS_Table>(entity => {
                entity.HasKey(e => new { e.RComID, e.ComID, e.TableID })
                    .HasName("PK_POSTable");

                entity.Property(e => e.RComID).HasMaxLength(30);

                entity.Property(e => e.ComID)
                    .HasMaxLength(30)
                    .HasComment("Company+Brn ");

                entity.Property(e => e.TableID).HasMaxLength(30);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TaxInfo>(entity => {
                entity.HasKey(e => new { e.TaxID, e.Company, e.Type });

                entity.Property(e => e.TaxID).HasMaxLength(30);

                entity.Property(e => e.Company).HasMaxLength(30);

                entity.Property(e => e.Type)
                    .HasMaxLength(30)
                    .HasComment("SALE / PURCHASE");

                entity.Property(e => e.Currency).HasMaxLength(30);

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RateBy).HasMaxLength(30);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.TaxName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ThaiPostAddress>(entity => {
                entity.Property(e => e.BORDER_NAME).HasMaxLength(80);

                entity.Property(e => e.BORDER_POSTAL_CODE).HasMaxLength(30);

                entity.Property(e => e.DISTRICT_NAME).HasMaxLength(80);

                entity.Property(e => e.DISTRICT_POSTAL_CODE).HasMaxLength(30);

                entity.Property(e => e.PROVINCE_NAME).HasMaxLength(80);

                entity.Property(e => e.REGION_ID).HasMaxLength(30);
            });

           

            modelBuilder.Entity<UnitConvert>(entity => {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitID1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitID2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitValue1)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UnitValue2)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserGroupInBoard>(entity => {
                entity.HasKey(e => new { e.RComID, e.UserGroupID, e.DashBoardID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.DashBoardID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserGroupInCompany>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.UserGroupID });

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserGroupInDocStep>(entity => {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StepID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.UserGroupID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserGroupInfo>(entity => {
                entity.HasKey(e => new { e.RComID, e.UserGroupID })
                    .HasName("PK_UserGroup");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LineToken)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserGroupPermission>(entity => {
                entity.HasKey(e => new { e.RComID, e.UserGroupID, e.MenuID });

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID).HasMaxLength(50);

                entity.Property(e => e.MenuID).HasMaxLength(50);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserInBoard>(entity => {
                entity.HasKey(e => e.Username);

                entity.Property(e => e.Username).HasMaxLength(30);

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserInCompany>(entity => {
                entity.HasKey(e => new { e.UserName, e.CompanyID, e.RCompanyID });

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.CompanyID).HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserInDocStep>(entity => {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StepID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<UserInGroup>(entity => {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserGroupID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserInRCom>(entity => {
                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<UserInfo>(entity => {
                entity.HasKey(e => e.Username);

                entity.Property(e => e.Username).HasMaxLength(30);

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuthenType)
                    .HasMaxLength(20)
                    .HasComment("DB/LDAP");

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(20);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101)
                    .HasComputedColumnSql("(([FirstName]+' ')+[LastName])", false);

                entity.Property(e => e.FullName_En)
                    .HasMaxLength(101)
                    .HasComputedColumnSql("(([FirstName_En]+' ')+[LastName_En])", false);

                entity.Property(e => e.Gender).HasMaxLength(30);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsNewUser)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsSuperMan).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobStartDate)
                    .HasColumnType("datetime")
                    .HasComment("");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.UseTimeStamp).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserMenu>(entity => {
                entity.HasKey(e => e.MenuID);

                entity.Property(e => e.MenuID).HasMaxLength(30);

                entity.Property(e => e.Desc1).HasMaxLength(200);

                entity.Property(e => e.Desc2).HasMaxLength(200);

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.GroupSort).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MenuCode).HasMaxLength(30);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentID).HasMaxLength(30);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.SubGroupSort).HasDefaultValueSql("((1))");

                entity.Property(e => e.TypeID)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<UserPermission>(entity => {
                entity.HasKey(e => new { e.Username, e.MenuID });

                entity.Property(e => e.Username).HasMaxLength(30);

                entity.Property(e => e.MenuID).HasMaxLength(30);
            });

            modelBuilder.Entity<V_Query>(entity => {
                entity.HasKey(e => e.QueryID);

                entity.Property(e => e.QueryID).HasMaxLength(50);

                entity.Property(e => e.Command).IsRequired();

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VendorInfo>(entity => {
                entity.HasKey(e => new { e.RCompanyID, e.CompanyID, e.VendorID });

                entity.Property(e => e.RCompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyID)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VendorID).HasMaxLength(50);

                entity.Property(e => e.AccGroup)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("NEW");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("แขวง/อำเภอ");

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเทศ");

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("เลขที่");

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("รหัสไปรษณีย์");

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("จังหวัด");

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เขต/ตำบล");

                entity.Property(e => e.AreaID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankCode).HasMaxLength(10);

                entity.Property(e => e.BankID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("NEW");

                entity.Property(e => e.BillAddr1).HasMaxLength(200);

                entity.Property(e => e.BillAddr2).HasMaxLength(200);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("NEW");

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Currencry)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("NEW");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FullNameEn)
                    .IsRequired()
                    .HasMaxLength(1001)
                    .HasComputedColumnSql("(([NameEN1]+' ')+[NameEN2])", false);

                entity.Property(e => e.FullNameTh)
                    .IsRequired()
                    .HasMaxLength(1001)
                    .HasComputedColumnSql("(([NameTH1]+' ')+[NameTH2])", false);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("กลุ่มลูกค้า/ประเภทร้านค้า (TITLE) join MasterType : cust_group");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("เบอร์มือถือ");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NameEn1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.NameEn2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.NameTh1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasComment("ชื่อที่ใช้ในการค้า");

                entity.Property(e => e.NameTh2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasComment("ชื่อจดทะเบียน");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentTermID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.PersonTypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("ประเภทบุคคล = นิติบุคคล/บุคคลธรรมดา");

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("NEW");

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุการวางบิล");

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุรับเช็ค");

                entity.Property(e => e.Remark3)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมาย เอกสารแนบท้ายการแจ้งส่ง");

                entity.Property(e => e.Remark4)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("หมายเหตุท้ายอินวอยซ์");

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubGroupID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment(" join MasterType : cust_subgroup");

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("Tel1");

                entity.Property(e => e.TitleEn)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TitleTh)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(N'HQ')")
                    .HasComment("HQ/BRN");

                entity.Property(e => e.VatTypeID).HasMaxLength(30);

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<XFileLocation>(entity => {
                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DBName)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.DBServer)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LoginName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LoginPass)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PathType)
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(N'URL / FILEPATH')");

                entity.Property(e => e.RootPath).HasMaxLength(40);

                entity.Property(e => e.RootPathID).HasMaxLength(40);

                entity.Property(e => e.RootUrl).HasMaxLength(40);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<XFilesRef>(entity => {
                entity.Property(e => e.AppID).HasMaxLength(30);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("สาขา");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DBName).HasMaxLength(80);

                entity.Property(e => e.DBServer).HasMaxLength(120);

                entity.Property(e => e.DocCate)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("TASK / DOC");

                entity.Property(e => e.DocID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasComment("TASK / DOC");

                entity.Property(e => e.FileExt).HasMaxLength(20);

                entity.Property(e => e.FileID)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.FilePath).HasMaxLength(1000);

                entity.Property(e => e.FileType)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasComment("IMG / FILE");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OriginFileExt).HasMaxLength(20);

                entity.Property(e => e.OriginFileName).HasMaxLength(200);

                entity.Property(e => e.OriginFilePath).HasMaxLength(1000);

                entity.Property(e => e.RCompanyID).HasMaxLength(30);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.RootPathID).HasMaxLength(40);

                entity.Property(e => e.SourceTable)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("Ref to table source");

                entity.Property(e => e.SubUrl).HasMaxLength(200);
            });

            modelBuilder.Entity<vw_CompanyInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_CompanyInfo");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrFull2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTanon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BankCode).HasMaxLength(50);

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BookBankNo).HasMaxLength(50);

                entity.Property(e => e.BrnCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ComCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(301);

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PriceTaxCondType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SalePersonID).HasMaxLength(30);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StockType).HasMaxLength(30);

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TypeName).HasMaxLength(256);

                entity.Property(e => e.XStatus)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_CustomerInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_CustomerInfo");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AreaID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BIllPrintRemark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.BankCode).HasMaxLength(30);

                entity.Property(e => e.BankName).HasMaxLength(100);

                entity.Property(e => e.BillAddr1).HasMaxLength(1000);

                entity.Property(e => e.BillAddr2).HasMaxLength(1000);

                entity.Property(e => e.BillContact).HasMaxLength(1000);

                entity.Property(e => e.BillMemo).HasMaxLength(1000);

                entity.Property(e => e.BillTime).HasMaxLength(1000);

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookIBankD).HasMaxLength(30);

                entity.Property(e => e.BrnCode).HasMaxLength(10);

                entity.Property(e => e.BrnDesc).HasMaxLength(100);

                entity.Property(e => e.ChqAddr1).HasMaxLength(1000);

                entity.Property(e => e.ChqAddr2).HasMaxLength(1000);

                entity.Property(e => e.ChqContact).HasMaxLength(1000);

                entity.Property(e => e.ChqMemo).HasMaxLength(1000);

                entity.Property(e => e.ChqPrintRemark).HasMaxLength(1000);

                entity.Property(e => e.ChqTime).HasMaxLength(1000);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ContactPerson).HasMaxLength(200);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CrmPoint).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FullNameEn)
                    .IsRequired()
                    .HasMaxLength(301);

                entity.Property(e => e.FullNameTh)
                    .IsRequired()
                    .HasMaxLength(301);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.InteralTermID).HasMaxLength(20);

                entity.Property(e => e.InvPrintRemark).HasMaxLength(1000);

                entity.Property(e => e.InvSignPrintRemark).HasMaxLength(1000);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NameDisplay)
                    .IsRequired()
                    .HasMaxLength(183);

                entity.Property(e => e.NameEn1)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NameEn2)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NameTh1)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NameTh2)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PaymentGrade).HasMaxLength(10);

                entity.Property(e => e.PaymentMethod).HasMaxLength(30);

                entity.Property(e => e.PaymentTermID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.PaymentTermValue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PersonTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ProductGroupID).HasMaxLength(30);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SOMemo).HasMaxLength(1000);

                entity.Property(e => e.SalePersonID).HasMaxLength(30);

                entity.Property(e => e.ShipPrintRemark).HasMaxLength(1000);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubGroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubGroupName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TitleEN)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TitleTh)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.VatTypeID).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_DocTypeInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_DocTypeInfo");

                entity.Property(e => e.ApplyToComLevel)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ApplyToComLevelName).HasMaxLength(256);

                entity.Property(e => e.ComanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DigitRunning)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocCate)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocTypeCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PrefixNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<vw_ItemBarcode>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_ItemBarcode");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BrandID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CateID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CommByAmtRate).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CommPerVolRate).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Dimension).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.GLGroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Group1ID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Group2ID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Group3ID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.PackagingID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PackingID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceTaxCondType).HasMaxLength(30);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StkUnitID).HasMaxLength(30);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UnitID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VendorID).HasMaxLength(30);

                entity.Property(e => e.VolPerUOM).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<vw_ItemInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_ItemInfo");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BrandID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CateID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CateName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Dimension).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.GLGroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Group1ID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Group1Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Group2ID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Group2Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Group3ID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Group3Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.NameDisplay)
                    .IsRequired()
                    .HasMaxLength(403);

                entity.Property(e => e.PackagingID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceTaxCondType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StkUnitID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.UnitID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VatTypeName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.VendorID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VolPerUOM).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<vw_ItemPriceInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_ItemPriceInfo");

                entity.Property(e => e.CateID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PriceTaxCondType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_LineLogIn>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_LineLogIn");

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ApprovedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromReqID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LineID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ReqMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.UserCompanyID)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserFullName).HasMaxLength(101);

                entity.Property(e => e.UserID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_LineLogInRequest>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_LineLogInRequest");

                entity.Property(e => e.ActionBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ActionMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ActionStatus)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.AutoDesc)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.LineID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ReqID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReqMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.UserCompanyID)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserFullName).HasMaxLength(101);

                entity.Property(e => e.UserID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_LocationInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_LocationInfo");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LocTypeName).HasMaxLength(256);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RCompany)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.XStatus)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_OINVHead>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_OINVHead");

                entity.Property(e => e.AccGroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.AppointmentDate).HasColumnType("datetime");

                entity.Property(e => e.BaseNetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillToCustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BillingDate).HasColumnType("datetime");

                entity.Property(e => e.BillingID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyBillingID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustBrnID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustBrnName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustIDRefInCom)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerAddr1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CustomerAddr2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVPendingAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LastChatDate).HasColumnType("datetime");

                entity.Property(e => e.LastChatMessage).IsRequired();

                entity.Property(e => e.LastStatementDate).HasColumnType("datetime");

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalVatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayDueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.QtyInvoice).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyOrder).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyReturn).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyShip).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCDate).HasColumnType("datetime");

                entity.Property(e => e.RCID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateExchange).HasColumnType("decimal(18, 12)");

                entity.Property(e => e.RefDocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark3).HasMaxLength(1000);

                entity.Property(e => e.Remark4)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark5)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SODate).HasColumnType("datetime");

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SOINVDate).HasColumnType("datetime");

                entity.Property(e => e.SOINVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipDate).HasColumnType("datetime");

                entity.Property(e => e.ShipFrLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipFrSubLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TermID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_ORCHead>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_ORCHead");

                entity.Property(e => e.ChqDate).HasColumnType("datetime");

                entity.Property(e => e.ChqDepositDate).HasColumnType("datetime");

                entity.Property(e => e.ChqExpired).HasColumnType("datetime");

                entity.Property(e => e.ChqReturnDate).HasColumnType("datetime");

                entity.Property(e => e.ChqReturnReason)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ChqReturnReasonText).HasMaxLength(256);

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.CompletedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustBankBranch)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CustBankCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustBankName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LinkBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.LinkRefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PayBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayDate).HasColumnType("datetime");

                entity.Property(e => e.PayINVAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayINVTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayINVVatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PayToBankCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayToBookID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayToBookName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PayTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayTotalDiffINVAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PaymentRefNo)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.RCDate).HasColumnType("datetime");

                entity.Property(e => e.RCID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateExchange).HasColumnType("decimal(18, 12)");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.StatementDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_ORCLine>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_ORCLine");

                entity.Property(e => e.BillID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.INVDate).HasColumnType("datetime");

                entity.Property(e => e.INVDocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.InvDueDate).HasColumnType("datetime");

                entity.Property(e => e.InvPreviousAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.InvRateExchange).HasColumnType("decimal(18, 12)");

                entity.Property(e => e.InvTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayVatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RCDate).HasColumnType("datetime");

                entity.Property(e => e.RCID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RCStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark3)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_POSINVHead>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_POSINVHead");

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ApproveDate).HasColumnType("datetime");

                entity.Property(e => e.ApproveStatus).HasMaxLength(30);

                entity.Property(e => e.BaseNetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BillingDate).HasColumnType("datetime");

                entity.Property(e => e.BillingID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CHQNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(301);

                entity.Property(e => e.ContactTo)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditTermID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustAccGroup)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustBranchID).HasMaxLength(30);

                entity.Property(e => e.CustBranchName).HasMaxLength(120);

                entity.Property(e => e.CustTaxID).HasMaxLength(30);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVDate).HasColumnType("datetime");

                entity.Property(e => e.INVFullID).HasMaxLength(30);

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVPeriod).HasMaxLength(100);

                entity.Property(e => e.INVRefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVUnqHID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LastDocStepActionBy).HasMaxLength(30);

                entity.Property(e => e.LastDocStepDate).HasColumnType("datetime");

                entity.Property(e => e.LastDocStepID).HasMaxLength(30);

                entity.Property(e => e.LastDocStepName).HasMaxLength(120);

                entity.Property(e => e.LastDocStepStatus).HasMaxLength(30);

                entity.Property(e => e.LineDisc).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LinkBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MacNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MacTaxNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetTotalAfterRound).HasColumnType("decimal(19, 6)");

                entity.Property(e => e.NetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalVatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayByCash).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayByOther).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayClearingDate).HasColumnType("datetime");

                entity.Property(e => e.PayCompletedAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.PayDate).HasColumnType("datetime");

                entity.Property(e => e.PayDateDate).HasColumnType("datetime");

                entity.Property(e => e.PayDueDate).HasColumnType("datetime");

                entity.Property(e => e.PayID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PostDate).HasColumnType("datetime");

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyReturn).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RVDate).HasColumnType("datetime");

                entity.Property(e => e.RVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ReasonID).HasMaxLength(30);

                entity.Property(e => e.RemainInvAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RoundDown).HasColumnType("decimal(7, 6)");

                entity.Property(e => e.SODate).HasColumnType("datetime");

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID3)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID4)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID5)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipDate).HasColumnType("datetime");

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipToAddr1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ShipToAddr2)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ShipToLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipToLocName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.Status).HasMaxLength(30);

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TableID).HasMaxLength(30);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TaxAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TaxTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_POSINVLine>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_POSINVLine");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BaseTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CommisstionAmt1).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CommisstionAmt2).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CommisstionRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CostAVG).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostSTD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.DiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ExpectDate).HasColumnType("datetime");

                entity.Property(e => e.ExtRefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVDate).HasColumnType("datetime");

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVIDRef)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVUniqID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.INVUnqHID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.InvUniqRef)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ItemAccGroup)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ItemCateID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ItemGroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ItemTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PaternValue)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.PatternID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayDueDate).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PriceIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ProPackCode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.PromotionID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QtyReturn).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SOID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SOUniqID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipUniqID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.WUnit)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<vw_POS_ORDERHead>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_POS_ORDERHead");

                entity.Property(e => e.AcceptedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AcceptedDate).HasColumnType("datetime");

                entity.Property(e => e.AcceptedMemo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ComName).HasMaxLength(301);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.FrLocID).HasMaxLength(50);

                entity.Property(e => e.GRBy).HasMaxLength(50);

                entity.Property(e => e.GRDate).HasColumnType("datetime");

                entity.Property(e => e.GrAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GrQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OrdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrdDate).HasColumnType("datetime");

                entity.Property(e => e.OrdID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrdQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ShipBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ShipDate).HasColumnType("datetime");

                entity.Property(e => e.ShipQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShipdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<vw_POS_ORDERLine>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_POS_ORDERLine");

                entity.Property(e => e.BalQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BalQtyOrd).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FrLocID).HasMaxLength(50);

                entity.Property(e => e.GrAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GrQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.OnOrdQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrdDate).HasColumnType("datetime");

                entity.Property(e => e.OrdID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrdQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ShipdAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<vw_POS_ORDER_RM>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_POS_ORDER_RM");

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrdDate).HasColumnType("datetime");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RmAmt).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.RmItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RmItemName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.RmQty).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.VendorID)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_POS_STKBal>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_POS_STKBal");

                entity.Property(e => e.BalQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CateID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.OrdQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UnitID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_POS_STKMove>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_POS_STKMove");

                entity.Property(e => e.CateID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LotNo)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.MoveType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.RemainQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.StkDate).HasColumnType("datetime");

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TransQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_POS_SaleHead>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_POS_SaleHead");

                entity.Property(e => e.BaseNetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BillDate).HasColumnType("datetime");

                entity.Property(e => e.BillID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BillRefID)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ComID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ContactTo)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditTermID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustAccGroup)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustAddr1)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.CustAddr2)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.CustBranchID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustBranchName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.CustTaxID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(220);

                entity.Property(e => e.DiscCalBy)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.DocTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FINVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.INVPeriod)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ItemDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LineDisc).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LinkBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LinkDate).HasColumnType("datetime");

                entity.Property(e => e.LocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MacNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MacTaxNo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NetDiff).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAfterRound).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalAmtIncVat).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.NetTotalVatAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OntopDiscPer).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.POID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PayByCash).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayByOther).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayTotalAmt).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ReasonID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SalesID1)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID2)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID3)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID4)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalesID5)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipToAddr1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ShipToAddr2)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ShipToLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ShipToLocName)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.ShipToUsePrice)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubLocID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TableID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TableName).HasMaxLength(500);

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VatTypeID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_PermissionGroupInMenu>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_PermissionGroupInMenu");

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MenuCode).HasMaxLength(30);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.UserGroupId)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_PermissionInBoard>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInBoard");

                entity.Property(e => e.BoardName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BoardPage)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_PermissionInCompany>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInCompany");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_PermissionInMenu>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_PermissionInMenu");

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.GroupID).HasMaxLength(30);

                entity.Property(e => e.MenuCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuDesc1)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.MenuDesc2)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MenuType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubGroupID).HasMaxLength(30);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_Postcode>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_Postcode");

                entity.Property(e => e.AmphoeID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DistrictID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProvinceID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegionID).HasMaxLength(100);
            });

            modelBuilder.Entity<vw_ThaiPostAddress>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_ThaiPostAddress");

                entity.Property(e => e.BORDER_NAME).HasMaxLength(80);

                entity.Property(e => e.DISTRICT_NAME).HasMaxLength(80);

                entity.Property(e => e.DISTRICT_POSTAL_CODE).HasMaxLength(30);

                entity.Property(e => e.FULLADDR).HasMaxLength(282);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.PROVINCE_NAME).HasMaxLength(80);
            });

            modelBuilder.Entity<vw_UIC>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UIC");

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RCompanyID).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UIM>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UIM");

                entity.Property(e => e.MenuID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UserGroupInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserGroupInfo");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UserGroupID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserInBoard>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInBoard");

                entity.Property(e => e.DashBoardID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Page)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserInGroup>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInGroup");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RComID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.UserGroupId)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_UserInRCom>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInRCom");

                entity.Property(e => e.RComID).HasMaxLength(50);

                entity.Property(e => e.RComName)
                    .IsRequired()
                    .HasMaxLength(301);

                entity.Property(e => e.UserFullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<vw_UserInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_UserInfo");

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AuthenType)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Birthdate).HasColumnType("datetime");

                entity.Property(e => e.BookBankNumber).HasMaxLength(50);

                entity.Property(e => e.CitizenId).HasMaxLength(30);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultCompany).HasMaxLength(20);

                entity.Property(e => e.DepartmentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName_En).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.FullName_En).HasMaxLength(101);

                entity.Property(e => e.Gender).HasMaxLength(30);

                entity.Property(e => e.ImageProfile).HasMaxLength(500);

                entity.Property(e => e.JobStartDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName_En).HasMaxLength(50);

                entity.Property(e => e.LineToken).HasMaxLength(100);

                entity.Property(e => e.MaritalStatus).HasMaxLength(30);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PositionID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ResignDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.WorkAge).HasMaxLength(4000);

                entity.Property(e => e.XStatus)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_VendorInfo>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_VendorInfo");

                entity.Property(e => e.AccGroup)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.AddrAmphoe)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrCountry)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrFull)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.AddrMoo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AddrNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AddrPostCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrProvince)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AddrTumbon)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AreaID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BankID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BillAddr1)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BillAddr2)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CreatedBy).HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Currencry)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FullNameEn)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.FullNameTh)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.GroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NameEn1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.NameEn2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.NameTh1)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.NameTh2)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ParentID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PaymentTermID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.PaymentTermValue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PersonTypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RateBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RefID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Remark1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark3)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark4)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ShortCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubGroupID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubGroupName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.TaxID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TitleEN)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TitleTh)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TypeID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.VatTypeID).HasMaxLength(30);

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.VendorID)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vw_XFilesRef>(entity => {
                entity.HasNoKey();

                entity.ToView("vw_XFilesRef");

                entity.Property(e => e.AppID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CompanyID)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DBName)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.DBServer)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.DocCate)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DocID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FileExt).HasMaxLength(20);

                entity.Property(e => e.FileID)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.FilePath).HasMaxLength(1000);

                entity.Property(e => e.FileType)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.FullPathAndFile).HasMaxLength(1262);

                entity.Property(e => e.FullUrlAndFile).HasMaxLength(469);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OriginFileExt).HasMaxLength(20);

                entity.Property(e => e.OriginFileName).HasMaxLength(200);

                entity.Property(e => e.OriginFilePath).HasMaxLength(1000);

                entity.Property(e => e.PathType).HasMaxLength(40);

                entity.Property(e => e.RCompanyID).HasMaxLength(30);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.RootPath).HasMaxLength(40);

                entity.Property(e => e.RootPathID).HasMaxLength(40);

                entity.Property(e => e.RootUrl).HasMaxLength(40);

                entity.Property(e => e.SourceTable)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubUrl).HasMaxLength(200);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

 
    }
}